/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(56);
} else {}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

module.exports = function infoMessage(props) {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      color: props.info.type == "error" && "red" || props.info.type == "success" && "green"
    }
  }, props.info.message);
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 31, 63, 90, 123, 152, 189, 225, 261, 297, 334, 370, 406, 442, 472, 508, 549, 587, 619, 653, 691, 725, 753, 786, 827, 863, 891, 924, 965, 1001, 1035, 1069, 1105, 1139, 1168, 1205, 1248, 1288, 1324, 1360, 1396, 1432, 1468, 1504, 1540, 1576, 1610, 1646, 1685, 1724, 1759, 1800, 1841, 1883, 1926, 1963, 2000, 2037, 2074, 2112, 2149, 2179, 2208, 2236, 2264, 2293, 2322, 2361, 2397, 2446, 2495, 2526, 2556, 2593, 2630, 2667, 2704, 2735, 2766, 2802, 2835, 2906, 2962, 3000, 3039, 3073, 3105, 3145, 3182, 3218, 3254, 3290, 3318, 3346, 3375, 3403, 3441, 3479, 3517, 3555, 3593, 3625, 3657, 3690, 3723, 3756, 3789, 3822, 3858, 3892],
  widths: [31, 32, 27, 33, 29, 37, 36, 36, 36, 37, 36, 36, 36, 30, 36, 41, 38, 32, 34, 38, 34, 28, 33, 41, 36, 28, 33, 41, 36, 34, 34, 36, 34, 29, 37, 43, 40, 36, 36, 36, 36, 36, 36, 36, 36, 34, 36, 39, 39, 35, 41, 41, 42, 43, 37, 37, 37, 37, 38, 37, 30, 29, 28, 28, 29, 29, 39, 36, 49, 49, 31, 30, 37, 37, 37, 37, 31, 31, 36, 33, 71, 56, 38, 39, 34, 32, 40, 37, 36, 36, 36, 28, 28, 29, 28, 38, 38, 38, 38, 38, 32, 32, 33, 33, 33, 33, 33, 36, 34, 33],
  heights: [71, 71, 68, 68, 66, 68, 66, 69, 69, 68, 66, 69, 69, 69, 67, 64, 64, 65, 66, 66, 68, 67, 66, 64, 65, 64, 63, 63, 64, 67, 69, 65, 66, 64, 64, 62, 63, 65, 68, 66, 66, 65, 68, 66, 66, 48, 48, 43, 46, 48, 58, 53, 60, 50, 68, 69, 70, 70, 69, 68, 67, 68, 69, 69, 68, 67, 74, 74, 65, 64, 69, 69, 62, 61, 59, 58, 60, 59, 58, 55, 46, 53, 68, 72, 78, 79, 56, 57, 54, 53, 53, 64, 71, 85, 86, 51, 54, 52, 52, 51, 71, 67, 66, 65, 64, 68, 66, 66, 65, 63],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [-1, -26], [-1, -26], [-1, -26], [1, -27], [1, -27], [1, -27], [0, -28], [0, -28], [0, -28], [2, -28], [2, -28], [2, -28], [4, -28], [4, -28], [4, -28], [2, -27], [2, -27], [2, -27], [2, -26], [2, -26], [2, -26], [1, -27], [1, -27], [1, -23], [1, -24], [1, -27], [0, -27], [0, -23], [0, -24], [0, -26], [-3, -26], [-3, -26], [-2, -27], [-2, -28], [0, -27], [-1, -25], [0, -25], [0, -27], [-2, -27], [-3, -26], [0, -26], [0, -29], [-2, -28], [-3, -26], [0, -27], [0, -27], [0, -25], [0, -25], [0, -26], [2, -29], [0, -28], [-1, -27], [0, -27], [1, -28], [2, -26], [2, -25], [2, -26], [2, -28], [1, -26], [1, -25], [1, -26], [0, -27], [0, -25], [0, -25], [0, -26], [-1, -29], [1, -28], [2, -27], [0, -27], [0, -27], [3, -27], [4, -26], [0, -26], [0, -29], [3, -28], [4, -26], [0, -27], [0, -26], [3, -26], [4, -26], [2, -27], [2, -28], [0, -27], [1, -25], [0, -25], [0, -15], [0, -15], [0, -15], [-4, -15], [-4, -15], [-4, -15], [-2, -17], [-2, -17], [-2, -17], [-2, -16], [-2, -16], [-2, -16], [3, -15], [3, -15], [3, -15], [1, -15], [1, -15], [1, -15], [1, -17], [1, -17], [1, -17], [1, -15], [1, -15], [1, -15], [-2, -21], [-3, -18], [-2, -21], [-2, -21], [-3, -18], [-2, -21], [-5, -24], [-5, -21], [-5, -24], [-5, -24], [-5, -21], [-5, -24], [5, -24], [6, -21], [5, -24], [5, -24], [6, -21], [5, -24], [3, -21], [4, -18], [3, -21], [3, -21], [4, -18], [3, -21], [0, -28], [0, -28], [0, -29], [0, -29], [0, -28], [0, -28], [0, -28], [0, -28], [0, -29], [0, -29], [0, -28], [0, -28], [0, -27], [1, -28], [1, -28], [1, -28], [1, -28], [1, -27], [0, -27], [1, -28], [1, -28], [1, -28], [1, -28], [1, -27], [0, -27], [0, -28], [-1, -28], [-1, -28], [0, -28], [0, -27], [0, -27], [0, -28], [-1, -28], [-1, -28], [0, -28], [0, -27], [1, -28], [1, -28], [1, -29], [1, -29], [0, -28], [1, -28], [1, -28], [1, -28], [1, -29], [1, -29], [0, -28], [1, -28], [2, -32], [2, -33], [2, -33], [-6, -27], [-6, -27], [2, -32], [2, -33], [2, -33], [-6, -27], [-6, -27], [1, -28], [3, -28], [3, -28], [6, -25], [5, -24], [1, -28], [3, -28], [3, -28], [6, -25], [5, -24], [0, -28], [-3, -28], [-3, -28], [-5, -25], [-4, -24], [0, -28], [-3, -28], [-3, -28], [-5, -25], [-4, -24], [-1, -32], [-2, -33], [-2, -33], [7, -27], [7, -27], [-1, -32], [-2, -33], [-2, -33], [7, -27], [7, -27], [-2, -22], [1, -24], [-2, -22], [-2, -22], [1, -24], [-2, -22], [3, -23], [6, -21], [3, -23], [3, -23], [6, -21], [3, -23], [-2, -23], [-5, -21], [-2, -23], [-2, -23], [-5, -21], [-2, -23], [3, -22], [0, -24], [3, -22], [3, -22], [0, -24], [3, -22], [0, -23], [0, -23], [7, -19], [7, -19], [-6, -19], [-6, -19], [0, -23], [0, -23], [0, -5], [0, -5], [1, -9], [1, -9], [-1, -9], [-1, -9], [1, -5], [1, -5], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [-1, -28], [1, -31], [1, -35], [2, -35], [-6, -26], [-5, -21], [-6, -19], [-6, -18], [-6, -18], [-1, -28], [1, -31], [1, -35], [2, -35], [-6, -26], [-5, -21], [-6, -19], [-6, -18], [-6, -18], [0, -26], [1, -29], [0, -36], [0, -37], [-9, -28], [-10, -23], [-10, -21], [-10, -21], [-10, -20], [0, -26], [1, -29], [0, -36], [0, -37], [-9, -28], [-10, -23], [-10, -21], [-10, -21], [-10, -20], [0, -26], [-1, -29], [1, -36], [0, -37], [9, -28], [10, -23], [10, -21], [10, -21], [10, -20], [0, -26], [-1, -29], [1, -36], [0, -37], [9, -28], [10, -23], [10, -21], [10, -21], [10, -20], [1, -28], [0, -31], [-1, -35], [-2, -35], [6, -26], [6, -21], [6, -19], [6, -18], [6, -18], [1, -28], [0, -31], [-1, -35], [-2, -35], [6, -26], [6, -21], [6, -19], [6, -18], [6, -18], [-1, -28], [1, -31], [1, -35], [2, -35], [-6, -26], [-5, -21], [-6, -19], [-6, -18], [-1, -28], [1, -31], [1, -35], [2, -35], [-6, -26], [-5, -21], [-6, -19], [-6, -18], [0, -26], [1, -29], [0, -36], [0, -37], [-9, -28], [-10, -23], [-10, -21], [-10, -21], [0, -26], [1, -29], [0, -36], [0, -37], [-9, -28], [-10, -23], [-10, -21], [-10, -21], [0, -26], [-1, -29], [1, -36], [0, -37], [9, -28], [10, -23], [10, -21], [10, -21], [0, -26], [-1, -29], [1, -36], [0, -37], [9, -28], [10, -23], [10, -21], [10, -21], [1, -28], [0, -31], [-1, -35], [-2, -35], [6, -26], [6, -21], [6, -19], [6, -18], [1, -28], [0, -31], [-1, -35], [-2, -35], [6, -26], [6, -21], [6, -19], [6, -18], [0, -27], [0, -25], [1, -25], [1, -24], [1, -24], [1, -24], [0, -27], [0, -25], [1, -25], [1, -24], [1, -24], [1, -24], [1, -27], [1, -26], [-1, -25], [0, -24], [1, -23], [1, -23], [1, -27], [1, -26], [-1, -25], [0, -24], [1, -23], [1, -23], [0, -27], [0, -26], [1, -25], [0, -24], [0, -23], [0, -23], [0, -27], [0, -26], [1, -25], [0, -24], [0, -23], [0, -23], [0, -27], [0, -25], [0, -25], [0, -24], [0, -24], [0, -24], [0, -27], [0, -25], [0, -25], [0, -24], [0, -24], [0, -24]],
  anchorHead: [[1, -57], [-2, -57], [4, -57], [-3, -58], [-4, -58], [0, -57], [-4, -58], [13, -73], [-3, -58], [14, -73], [13, -72], [-3, -58], [13, -72], [-10, -73], [13, -73], [-10, -73], [7, -57], [12, -71], [6, -58], [6, -58], [-9, -72], [5, -58], [1, -58], [6, -59], [1, -57], [1, -56], [1, -54], [1, -55], [1, -57], [1, -56], [1, -54], [1, -55], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [14, -73], [14, -72], [14, -70], [14, -71], [14, -73], [14, -72], [14, -70], [14, -71], [13, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [-13, -73], [-13, -72], [-13, -70], [-13, -71], [-13, -73], [-13, -72], [-13, -70], [-13, -71], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [1, -35], [-3, -36], [4, -36], [-3, -37], [-3, -37], [1, -35], [-3, -37], [13, -52], [-3, -37], [12, -51], [12, -50], [-5, -36], [12, -51], [-10, -52], [12, -52], [-13, -50], [5, -34], [10, -49], [2, -37], [2, -37], [-14, -52], [1, -37], [-3, -36], [2, -37], [-12, -54], [-11, -39], [-10, -54], [-12, -54], [-11, -39], [-10, -54], [-15, -64], [-16, -46], [-15, -63], [-15, -64], [-16, -46], [-15, -63], [16, -64], [17, -46], [16, -63], [16, -64], [17, -46], [16, -63], [13, -54], [12, -39], [11, -54], [13, -54], [12, -39], [11, -54], [-2, -58], [-2, -59], [-2, -60], [-2, -60], [-2, -59], [-2, -58], [-2, -58], [-2, -59], [-2, -60], [-2, -60], [-2, -59], [-2, -58], [13, -73], [13, -74], [13, -75], [13, -75], [13, -74], [13, -73], [13, -73], [13, -74], [13, -75], [13, -75], [13, -74], [13, -73], [-12, -73], [-12, -74], [-12, -75], [-12, -75], [-12, -74], [-12, -73], [-12, -73], [-12, -74], [-12, -75], [-12, -75], [-12, -74], [-12, -73], [3, -58], [3, -59], [3, -60], [3, -60], [3, -59], [3, -58], [3, -58], [3, -59], [3, -60], [3, -60], [3, -59], [3, -58], [-2, -60], [-1, -61], [0, -61], [-11, -54], [-12, -52], [-2, -60], [-1, -61], [0, -61], [-11, -54], [-12, -52], [12, -66], [13, -65], [14, -65], [6, -67], [5, -65], [12, -66], [13, -65], [14, -65], [6, -67], [5, -65], [-11, -66], [-12, -65], [-13, -65], [-5, -67], [-4, -65], [-11, -66], [-12, -65], [-13, -65], [-5, -67], [-4, -65], [3, -60], [2, -61], [1, -61], [12, -54], [13, -52], [3, -60], [2, -61], [1, -61], [12, -54], [13, -52], [0, -61], [5, -61], [0, -61], [0, -61], [5, -61], [0, -61], [3, -68], [7, -65], [3, -68], [3, -68], [7, -65], [3, -68], [-2, -68], [-6, -65], [-2, -68], [-2, -68], [-6, -65], [-2, -68], [1, -61], [-4, -61], [1, -61], [1, -61], [-4, -61], [1, -61], [15, -58], [15, -58], [16, -61], [16, -61], [-15, -61], [-15, -61], [-14, -58], [-14, -58], [27, -22], [27, -22], [38, 8], [38, 8], [-37, 8], [-37, 8], [-26, -22], [-26, -22], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-3, -59], [-1, -53], [0, -53], [1, -54], [-14, -42], [-15, -37], [-15, -36], [-15, -36], [-15, -36], [-3, -59], [-1, -53], [0, -53], [1, -54], [-14, -42], [-15, -37], [-15, -36], [-15, -36], [-15, -36], [13, -73], [15, -70], [16, -70], [17, -71], [2, -63], [0, -58], [0, -57], [0, -57], [0, -57], [13, -73], [15, -70], [16, -70], [17, -71], [2, -63], [0, -58], [0, -57], [0, -57], [0, -57], [-12, -73], [-14, -70], [-15, -70], [-16, -71], [-1, -63], [1, -58], [1, -57], [1, -57], [1, -57], [-12, -73], [-14, -70], [-15, -70], [-16, -71], [-1, -63], [1, -58], [1, -57], [1, -57], [1, -57], [4, -59], [2, -53], [1, -53], [0, -54], [15, -42], [16, -37], [16, -36], [16, -36], [16, -36], [4, -59], [2, -53], [1, -53], [0, -54], [15, -42], [16, -37], [16, -36], [16, -36], [16, -36], [-3, -59], [-1, -53], [0, -53], [1, -54], [-14, -42], [-15, -37], [-15, -36], [-15, -36], [-3, -59], [-1, -53], [0, -53], [1, -54], [-14, -42], [-15, -37], [-15, -36], [-15, -36], [13, -73], [15, -70], [16, -70], [17, -71], [2, -63], [0, -58], [0, -57], [0, -57], [13, -73], [15, -70], [16, -70], [17, -71], [2, -63], [0, -58], [0, -57], [0, -57], [-12, -73], [-14, -70], [-15, -70], [-16, -71], [-1, -63], [1, -58], [1, -57], [1, -57], [-12, -73], [-14, -70], [-15, -70], [-16, -71], [-1, -63], [1, -58], [1, -57], [1, -57], [4, -59], [2, -53], [1, -53], [0, -54], [15, -42], [16, -37], [16, -36], [16, -36], [4, -59], [2, -53], [1, -53], [0, -54], [15, -42], [16, -37], [16, -36], [16, -36], [-3, -59], [-4, -53], [-3, -52], [-3, -50], [-3, -49], [-3, -49], [-3, -59], [-4, -53], [-3, -52], [-3, -50], [-3, -49], [-3, -49], [15, -71], [14, -68], [13, -67], [13, -66], [13, -64], [13, -64], [15, -71], [14, -68], [13, -67], [13, -66], [13, -64], [13, -64], [-14, -71], [-13, -68], [-12, -67], [-12, -66], [-12, -64], [-12, -64], [-14, -71], [-13, -68], [-12, -67], [-12, -66], [-12, -64], [-12, -64], [4, -59], [5, -53], [4, -52], [4, -50], [4, -49], [4, -49], [4, -59], [5, -53], [4, -52], [4, -50], [4, -49], [4, -49]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 82, 83, 84, 85, 86, 87, 88, 89, 90, 82, 83, 84, 85, 86, 87, 88, 89, 90, 82, 83, 84, 85, 86, 87, 88, 89, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 91, 92, 93, 94, 95, 96, 97, 98, 91, 92, 93, 94, 95, 96, 97, 98, 91, 92, 93, 94, 95, 96, 97, 98, 82, 83, 84, 85, 86, 87, 88, 89, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 104, 100, 101, 102, 103, 104, 104, 105, 106, 107, 108, 109, 109, 105, 106, 107, 108, 109, 109, 105, 106, 107, 108, 109, 109, 105, 106, 107, 108, 109, 109, 100, 101, 102, 103, 104, 104, 100, 101, 102, 103, 104, 104]
};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var _module$exports;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = (_module$exports = {
  xPos: [0, 37, 74, 110, 144, 180, 220, 261, 301, 338, 379, 419, 458, 495, 529, 573, 614, 653, 686, 728, 770, 806, 837, 879, 923, 961, 992, 1038, 1090, 1132, 1169, 1203, 1240, 1274, 1311, 1356, 1398, 1437, 1476, 1517, 1561, 1605, 1645, 1688, 1730, 1771, 1827, 1867, 1915, 1964, 2018, 2058, 2097, 2137, 2178, 2217, 2255, 2291, 2327, 2363, 2401, 2441, 2480, 2518, 2555, 2593, 2632, 2670, 2725, 2780, 2832, 2882, 2918, 2970, 3024, 3087, 3138, 3189, 3236, 3278, 3325, 3374, 3422, 3485, 3550, 3588, 3625, 3660, 3700, 3743, 3788, 3847, 3902, 3942, 3985, 4025, 4067, 4109, 4161, 4224, 4280, 4318, 4363, 4408, 4466, 4512, 4558, 4604, 4638, 4690, 4741, 4794, 4849, 4896, 4944, 4984, 5025, 5066, 5112, 5157, 5191, 5225, 5259, 5308],
  widths: [37, 37, 36, 34, 36, 40, 41, 40, 37, 41, 40, 39, 37, 34, 44, 41, 39, 33, 42, 42, 36, 31, 42, 44, 38, 31, 46, 52, 42, 37, 34, 37, 34, 37, 45, 42, 39, 39, 41, 44, 44, 40, 43, 42, 41, 56, 40, 48, 49, 54, 40, 39, 40, 41, 39, 38, 36, 36, 36, 38, 40, 39, 38, 37, 38, 39, 38, 55, 55, 52, 50, 36, 52, 54, 63, 51, 51, 47, 42, 47, 49, 48, 63, 65, 38, 37, 35, 40, 43, 45, 59, 55, 40, 43, 40, 42, 42, 52, 63, 56, 38, 45, 45, 58, 46, 46, 46, 34, 52, 51, 53, 55, 47, 48, 40, 41, 41, 46, 45, 34, 34, 34, 49, 45],
  heights: [70, 68, 68, 68, 67, 71, 68, 66, 70, 71, 68, 67, 69, 69, 66, 63, 64, 66, 64, 66, 69, 67, 66, 64, 63, 64, 61, 64, 65, 71, 70, 68, 61, 64, 64, 62, 66, 71, 70, 68, 67, 71, 71, 69, 67, 44, 43, 47, 45, 43, 62, 56, 59, 53, 70, 71, 72, 73, 72, 71, 67, 68, 69, 70, 69, 68, 67, 64, 75, 77, 69, 65, 68, 71, 56, 55, 61, 60, 66, 65, 59, 65, 45, 54, 70, 71, 66, 66, 67, 65, 64, 63, 70, 70, 70, 70, 71, 72, 66, 64, 66, 66, 67, 69, 73, 62, 58, 65, 66, 66, 68, 59, 59, 58, 69, 68, 67, 94, 95, 69, 68, 67, 94, 93],
  bodyOffsets: [[0, -24], [0, -24], [0, -24], [-1, -25], [-1, -25], [-1, -25], [-4, -25], [-4, -25], [-4, -25], [1, -24], [1, -24], [1, -24], [0, -24], [0, -24], [0, -24], [-1, -24], [-1, -24], [-1, -24], [2, -25], [2, -25], [2, -25], [1, -25], [1, -25], [1, -25], [-1, -23], [2, -24], [4, -22], [4, -21], [1, -23], [-3, -24], [-5, -22], [-4, -21], [-1, -24], [-5, -25], [-3, -24], [0, -25], [0, -26], [0, -26], [3, -23], [2, -22], [2, -24], [-6, -24], [-4, -23], [0, -24], [2, -26], [-4, -26], [-1, -23], [1, -23], [1, -23], [4, -23], [5, -22], [2, -26], [-1, -27], [-4, -26], [-2, -25], [0, -24], [2, -23], [4, -23], [4, -22], [1, -23], [-2, -23], [-4, -22], [-6, -21], [-3, -23], [0, -23], [-4, -23], [-4, -22], [-2, -26], [2, -27], [5, -26], [2, -25], [1, -24], [-1, -24], [6, -24], [4, -23], [0, -24], [-1, -26], [4, -26], [1, -23], [-1, -23], [1, -24], [5, -25], [4, -24], [1, -25], [1, -26], [0, -26], [-3, -23], [-2, -22], [-1, -11], [-1, -11], [-1, -11], [-2, -11], [-2, -11], [-2, -11], [2, -9], [2, -9], [2, -9], [-1, -10], [-1, -10], [-1, -10], [-1, -11], [-1, -11], [-1, -11], [2, -10], [2, -10], [2, -10], [-4, -9], [-4, -9], [-4, -9], [0, -11], [0, -11], [0, -11], [1, -19], [-3, -16], [1, -19], [1, -19], [-3, -16], [1, -19], [-1, -19], [0, -16], [-1, -19], [-1, -19], [0, -16], [-1, -19], [1, -19], [1, -16], [1, -19], [1, -19], [1, -16], [1, -19], [-1, -19], [4, -16], [-1, -19], [-1, -19], [4, -16], [-1, -19], [-2, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [-2, -25], [-2, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [-2, -25], [-2, -23], [-1, -24], [-1, -24], [0, -25], [-1, -24], [-1, -24], [-2, -23], [-1, -24], [-1, -24], [0, -25], [-1, -24], [-1, -24], [2, -23], [2, -24], [1, -24], [1, -25], [1, -24], [2, -24], [2, -23], [2, -24], [1, -24], [1, -25], [1, -24], [2, -24], [3, -25], [2, -25], [2, -26], [2, -26], [2, -26], [2, -25], [3, -25], [2, -25], [2, -26], [2, -26], [2, -26], [2, -25], [-1, -24], [4, -26], [2, -31], [-10, -17], [-11, -13], [-1, -24], [4, -26], [2, -31], [-10, -17], [-11, -13], [4, -21], [6, -23], [7, -25], [2, -18], [-3, -17], [4, -21], [6, -23], [7, -25], [2, -18], [-3, -17], [-4, -21], [-6, -23], [-7, -25], [-1, -18], [4, -17], [-4, -21], [-6, -23], [-7, -25], [-1, -18], [4, -17], [1, -24], [-3, -26], [-1, -31], [10, -17], [11, -13], [1, -24], [-3, -26], [-1, -31], [10, -17], [11, -13], [-5, -24], [-4, -26], [-5, -24], [-5, -24], [-4, -26], [-5, -24], [-1, -25], [4, -22], [-1, -25], [-1, -25], [4, -22], [-1, -25], [1, -25], [-3, -22], [1, -25], [1, -25], [-3, -22], [1, -25], [6, -24], [5, -26], [6, -24], [6, -24], [5, -26], [6, -24], [-3, 2], [-3, 2], [0, -1], [0, -1], [1, -1], [1, -1], [4, 2], [4, 2], [-3, -21], [-2, -21], [-1, -26], [4, -27], [6, -27], [6, -27], [2, -26], [-12, -15], [-11, -14], [-3, -21], [-2, -21], [-1, -26], [4, -27], [6, -27], [6, -27], [2, -26], [-12, -15], [-11, -14], [-1, -25], [1, -25], [3, -25], [3, -25], [4, -25], [4, -25], [5, -26], [-7, -23], [-10, -22], [-1, -25], [1, -25], [3, -25], [3, -25], [4, -25], [4, -25], [5, -26], [-7, -23], [-10, -22], [1, -25], [0, -25], [-3, -25], [-3, -25], [-4, -25], [-4, -25], [-5, -26], [8, -23], [10, -22], [1, -25], [0, -25], [-3, -25], [-3, -25], [-4, -25], [-4, -25], [-5, -26], [8, -23], [10, -22], [3, -21], [3, -21], [2, -26], [-4, -27], [-5, -27], [-5, -27], [-1, -26], [13, -15], [12, -14], [3, -21], [3, -21], [2, -26], [-4, -27], [-5, -27], [-5, -27], [-1, -26], [13, -15], [12, -14], [-2, -25], [0, -25], [-1, -28], [-1, -28], [1, -29], [-6, -25], [-6, -20], [-6, -18], [-2, -25], [0, -25], [-1, -28], [-1, -28], [1, -29], [-6, -25], [-6, -20], [-6, -18], [-2, -23], [1, -22], [2, -23], [3, -24], [4, -26], [0, -21], [-4, -21], [-5, -21], [-2, -23], [1, -22], [2, -23], [3, -24], [4, -26], [0, -21], [-4, -21], [-5, -21], [2, -23], [-1, -22], [-2, -23], [-2, -24], [-3, -26], [1, -21], [5, -21], [5, -21], [2, -23], [-1, -22], [-2, -23], [-2, -24], [-3, -26], [1, -21], [5, -21], [5, -21], [3, -25], [0, -25], [2, -28], [2, -28], [-1, -29], [6, -25], [6, -20], [6, -18], [3, -25], [0, -25], [2, -28], [2, -28], [-1, -29], [6, -25], [6, -20], [6, -18], [-1, -25], [0, -25], [1, -25], [1, -24], [3, -38], [3, -38], [-1, -25], [0, -25], [1, -25], [1, -24], [3, -38], [3, -38], [1, -24], [2, -23], [2, -22], [2, -21], [6, -35], [4, -35], [1, -24], [2, -23], [2, -22], [2, -21], [6, -35], [4, -35], [-1, -24], [-2, -23], [-2, -22], [-2, -21], [-5, -35], [-3, -35], [-1, -24], [-2, -23], [-2, -22], [-2, -21], [-5, -35], [-3, -35], [2, -25], [0, -25], [0, -25], [0, -24], [-3, -38], [-2, -38], [2, -25], [0, -25], [0, -25], [0, -24], [-3, -38], [-2, -38]]
}, _defineProperty(_module$exports, "bodyOffsets", [[0, -24], [0, -24], [0, -24], [-1, -25], [-1, -25], [-1, -25], [-4, -25], [-4, -25], [-4, -25], [1, -24], [1, -24], [1, -24], [0, -24], [0, -24], [0, -24], [-1, -24], [-1, -24], [-1, -24], [2, -25], [2, -25], [2, -25], [1, -25], [1, -25], [1, -25], [-1, -23], [2, -24], [4, -22], [4, -21], [1, -23], [-3, -24], [-5, -22], [-4, -21], [-1, -24], [-5, -25], [-3, -24], [0, -25], [0, -26], [0, -26], [3, -23], [2, -22], [2, -24], [-6, -24], [-4, -23], [0, -24], [2, -26], [-4, -26], [-1, -23], [1, -23], [1, -23], [4, -23], [5, -22], [2, -26], [-1, -27], [-4, -26], [-2, -25], [0, -24], [2, -23], [4, -23], [4, -22], [1, -23], [-2, -23], [-4, -22], [-6, -21], [-3, -23], [0, -23], [-4, -23], [-4, -22], [-2, -26], [2, -27], [5, -26], [2, -25], [1, -24], [-1, -24], [6, -24], [4, -23], [0, -24], [-1, -26], [4, -26], [1, -23], [-1, -23], [1, -24], [5, -25], [4, -24], [1, -25], [1, -26], [0, -26], [-3, -23], [-2, -22], [-1, -11], [-1, -11], [-1, -11], [-2, -11], [-2, -11], [-2, -11], [2, -9], [2, -9], [2, -9], [-1, -10], [-1, -10], [-1, -10], [-1, -11], [-1, -11], [-1, -11], [2, -10], [2, -10], [2, -10], [-4, -9], [-4, -9], [-4, -9], [0, -11], [0, -11], [0, -11], [1, -19], [-3, -16], [1, -19], [1, -19], [-3, -16], [1, -19], [-1, -19], [0, -16], [-1, -19], [-1, -19], [0, -16], [-1, -19], [1, -19], [1, -16], [1, -19], [1, -19], [1, -16], [1, -19], [-1, -19], [4, -16], [-1, -19], [-1, -19], [4, -16], [-1, -19], [-2, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [-2, -25], [-2, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [-2, -25], [-2, -23], [-1, -24], [-1, -24], [0, -25], [-1, -24], [-1, -24], [-2, -23], [-1, -24], [-1, -24], [0, -25], [-1, -24], [-1, -24], [2, -23], [2, -24], [1, -24], [1, -25], [1, -24], [2, -24], [2, -23], [2, -24], [1, -24], [1, -25], [1, -24], [2, -24], [3, -25], [2, -25], [2, -26], [2, -26], [2, -26], [2, -25], [3, -25], [2, -25], [2, -26], [2, -26], [2, -26], [2, -25], [-1, -24], [4, -26], [2, -31], [-10, -17], [-11, -13], [-1, -24], [4, -26], [2, -31], [-10, -17], [-11, -13], [4, -21], [6, -23], [7, -25], [2, -18], [-3, -17], [4, -21], [6, -23], [7, -25], [2, -18], [-3, -17], [-4, -21], [-6, -23], [-7, -25], [-1, -18], [4, -17], [-4, -21], [-6, -23], [-7, -25], [-1, -18], [4, -17], [1, -24], [-3, -26], [-1, -31], [10, -17], [11, -13], [1, -24], [-3, -26], [-1, -31], [10, -17], [11, -13], [-5, -24], [-4, -26], [-5, -24], [-5, -24], [-4, -26], [-5, -24], [-1, -25], [4, -22], [-1, -25], [-1, -25], [4, -22], [-1, -25], [1, -25], [-3, -22], [1, -25], [1, -25], [-3, -22], [1, -25], [6, -24], [5, -26], [6, -24], [6, -24], [5, -26], [6, -24], [0, -26], [0, -26], [5, -21], [5, -21], [-5, -21], [-5, -21], [1, -26], [1, -26], [-3, 2], [-3, 2], [0, -1], [0, -1], [1, -1], [1, -1], [4, 2], [4, 2], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-3, -21], [-2, -21], [-1, -26], [4, -27], [6, -27], [6, -27], [2, -26], [-12, -15], [-11, -14], [-3, -21], [-2, -21], [-1, -26], [4, -27], [6, -27], [6, -27], [2, -26], [-12, -15], [-11, -14], [-1, -25], [1, -25], [3, -25], [3, -25], [4, -25], [4, -25], [5, -26], [-7, -23], [-10, -22], [-1, -25], [1, -25], [3, -25], [3, -25], [4, -25], [4, -25], [5, -26], [-7, -23], [-10, -22], [1, -25], [0, -25], [-3, -25], [-3, -25], [-4, -25], [-4, -25], [-5, -26], [8, -23], [10, -22], [1, -25], [0, -25], [-3, -25], [-3, -25], [-4, -25], [-4, -25], [-5, -26], [8, -23], [10, -22], [3, -21], [3, -21], [2, -26], [-4, -27], [-5, -27], [-5, -27], [-1, -26], [13, -15], [12, -14], [3, -21], [3, -21], [2, -26], [-4, -27], [-5, -27], [-5, -27], [-1, -26], [13, -15], [12, -14], [-2, -25], [0, -25], [-1, -28], [-1, -28], [1, -29], [-6, -25], [-6, -20], [-6, -18], [-2, -25], [0, -25], [-1, -28], [-1, -28], [1, -29], [-6, -25], [-6, -20], [-6, -18], [-2, -23], [1, -22], [2, -23], [3, -24], [4, -26], [0, -21], [-4, -21], [-5, -21], [-2, -23], [1, -22], [2, -23], [3, -24], [4, -26], [0, -21], [-4, -21], [-5, -21], [2, -23], [-1, -22], [-2, -23], [-2, -24], [-3, -26], [1, -21], [5, -21], [5, -21], [2, -23], [-1, -22], [-2, -23], [-2, -24], [-3, -26], [1, -21], [5, -21], [5, -21], [3, -25], [0, -25], [2, -28], [2, -28], [-1, -29], [6, -25], [6, -20], [6, -18], [3, -25], [0, -25], [2, -28], [2, -28], [-1, -29], [6, -25], [6, -20], [6, -18], [-1, -25], [0, -25], [1, -25], [1, -24], [3, -38], [3, -38], [-1, -25], [0, -25], [1, -25], [1, -24], [3, -38], [3, -38], [1, -24], [2, -23], [2, -22], [2, -21], [6, -35], [4, -35], [1, -24], [2, -23], [2, -22], [2, -21], [6, -35], [4, -35], [-1, -24], [-2, -23], [-2, -22], [-2, -21], [-5, -35], [-3, -35], [-1, -24], [-2, -23], [-2, -22], [-2, -21], [-5, -35], [-3, -35], [2, -25], [0, -25], [0, -25], [0, -24], [-3, -38], [-2, -38], [2, -25], [0, -25], [0, -25], [0, -24], [-3, -38], [-2, -38]]), _defineProperty(_module$exports, "anchorHead", [[0, -56], [-4, -57], [6, -57], [-5, -57], [-5, -57], [0, -56], [-5, -57], [11, -73], [-5, -57], [11, -73], [11, -72], [-5, -57], [11, -72], [-11, -73], [11, -73], [-11, -73], [5, -57], [11, -72], [4, -57], [4, -57], [-12, -73], [5, -57], [0, -56], [5, -57], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [0, -30], [-5, -31], [5, -31], [-5, -31], [-5, -31], [0, -30], [-5, -31], [11, -47], [-5, -31], [12, -47], [12, -46], [-4, -31], [11, -46], [-11, -47], [11, -47], [-11, -47], [6, -31], [11, -46], [5, -31], [5, -31], [-11, -47], [5, -31], [0, -30], [5, -31], [-8, -63], [-15, -42], [-8, -63], [-8, -63], [-15, -42], [-8, -63], [-8, -61], [-6, -43], [-8, -61], [-8, -61], [-6, -43], [-8, -61], [9, -61], [7, -43], [9, -61], [9, -61], [7, -43], [9, -61], [9, -63], [16, -42], [9, -63], [9, -63], [16, -42], [9, -63], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [13, -72], [13, -73], [13, -74], [13, -75], [13, -74], [13, -73], [13, -72], [13, -73], [13, -74], [13, -75], [13, -74], [13, -73], [-12, -72], [-12, -73], [-12, -74], [-12, -75], [-12, -74], [-12, -73], [-12, -72], [-12, -73], [-12, -74], [-12, -75], [-12, -74], [-12, -73], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [-1, -56], [-1, -57], [0, -59], [-30, -31], [-34, -27], [-1, -56], [-1, -57], [0, -59], [-30, -31], [-34, -27], [15, -69], [16, -70], [17, -71], [5, -59], [3, -57], [15, -69], [16, -70], [17, -71], [5, -59], [3, -57], [-14, -69], [-15, -70], [-16, -71], [-4, -59], [-2, -57], [-14, -69], [-15, -70], [-16, -71], [-4, -59], [-2, -57], [2, -56], [2, -57], [1, -59], [31, -31], [35, -27], [2, -56], [2, -57], [1, -59], [31, -31], [35, -27], [9, -65], [13, -65], [9, -65], [9, -65], [13, -65], [9, -65], [5, -72], [11, -71], [5, -72], [5, -72], [11, -71], [5, -72], [-4, -72], [-10, -71], [-4, -72], [-4, -72], [-10, -71], [-4, -72], [-8, -65], [-12, -65], [-8, -65], [-8, -65], [-12, -65], [-8, -65], [23, -66], [23, -66], [14, -69], [14, -69], [-13, -69], [-13, -69], [-22, -66], [-22, -66], [37, -15], [37, -15], [36, 24], [36, 24], [-35, 24], [-35, 24], [-36, -15], [-36, -15], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-24, -44], [-23, -43], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-24, -44], [-23, -43], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [15, -75], [-4, -69], [-4, -68], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [15, -75], [-4, -69], [-4, -68], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-14, -75], [5, -69], [5, -68], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-14, -75], [5, -69], [5, -68], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [25, -44], [24, -43], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [25, -44], [24, -43], [-4, -57], [-1, -56], [1, -56], [1, -57], [2, -58], [-26, -36], [-26, -32], [-26, -31], [-4, -57], [-1, -56], [1, -56], [1, -57], [2, -58], [-26, -36], [-26, -32], [-26, -31], [13, -72], [12, -71], [13, -72], [13, -73], [13, -74], [0, -63], [0, -62], [-1, -61], [13, -72], [12, -71], [13, -72], [13, -73], [13, -74], [0, -63], [0, -62], [-1, -61], [-12, -72], [-11, -71], [-12, -72], [-12, -73], [-12, -74], [1, -63], [1, -62], [2, -61], [-12, -72], [-11, -71], [-12, -72], [-12, -73], [-12, -74], [1, -63], [1, -62], [2, -61], [5, -57], [2, -56], [0, -56], [0, -57], [-1, -58], [27, -36], [27, -32], [27, -31], [5, -57], [2, -56], [0, -56], [0, -57], [-1, -58], [27, -36], [27, -32], [27, -31], [-5, -57], [-4, -56], [-3, -55], [-3, -54], [-4, -57], [-5, -58], [-5, -57], [-4, -56], [-3, -55], [-3, -54], [-4, -57], [-5, -58], [11, -73], [12, -71], [12, -69], [12, -68], [11, -70], [10, -71], [11, -73], [12, -71], [12, -69], [12, -68], [11, -70], [10, -71], [-10, -73], [-11, -71], [-11, -69], [-11, -68], [-10, -70], [-9, -71], [-10, -73], [-11, -71], [-11, -69], [-11, -68], [-10, -70], [-9, -71], [6, -57], [5, -56], [4, -55], [4, -54], [5, -57], [6, -58], [6, -57], [5, -56], [4, -55], [4, -54], [5, -57], [6, -58]]), _defineProperty(_module$exports, "spriteIndices", [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 1, 1, 1, 1, 1, 1, 1, 1, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 1, 114, 115, 116, 117, 118, 1, 114, 115, 116, 117, 118, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 1, 114, 115, 116, 117, 118, 1, 114, 115, 116, 117, 118]), _module$exports);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 43, 85, 122, 162, 203, 247, 292, 335, 376, 416, 458, 504, 550, 588, 632, 681, 727, 767, 803, 841, 876, 907, 949, 1001, 1047, 1080, 1120, 1168, 1211, 1250, 1290, 1330, 1368, 1404, 1445, 1491, 1533, 1573, 1617, 1657, 1694, 1732, 1769, 1807, 1846, 1905, 1963, 2010, 2071, 2138, 2183, 2227, 2271, 2315, 2356, 2398, 2440, 2482, 2524, 2566, 2606, 2647, 2688, 2728, 2767, 2806, 2850, 2899, 2958, 3006, 3041, 3080, 3129, 3167, 3215, 3261, 3303, 3347, 3410, 3483, 3527, 3569, 3610, 3651, 3715, 3775, 3823, 3858, 3892, 3926, 3961, 4015, 4069, 4113, 4155, 4212, 4259, 4298, 4341, 4384, 4424, 4477, 4522, 4560, 4601],
  widths: [43, 42, 37, 40, 41, 44, 45, 43, 41, 40, 42, 46, 46, 38, 44, 49, 46, 40, 36, 38, 35, 31, 42, 52, 46, 33, 40, 48, 43, 39, 40, 40, 38, 36, 41, 46, 42, 40, 44, 40, 37, 38, 37, 38, 39, 59, 58, 47, 61, 67, 45, 44, 44, 44, 41, 42, 42, 42, 42, 42, 40, 41, 41, 40, 39, 39, 44, 49, 59, 48, 35, 39, 49, 38, 48, 46, 42, 44, 63, 73, 44, 42, 41, 41, 64, 60, 48, 35, 34, 34, 35, 54, 54, 44, 42, 57, 47, 39, 43, 43, 40, 53, 45, 38, 41, 41],
  heights: [73, 72, 71, 73, 71, 70, 70, 71, 74, 70, 70, 71, 74, 73, 71, 67, 68, 68, 70, 69, 73, 70, 69, 67, 66, 66, 64, 64, 68, 73, 73, 69, 70, 66, 66, 64, 67, 68, 72, 70, 70, 68, 72, 70, 70, 48, 49, 53, 50, 46, 60, 59, 65, 59, 72, 71, 72, 74, 74, 73, 71, 70, 72, 73, 73, 72, 69, 68, 60, 59, 71, 70, 65, 65, 65, 66, 65, 63, 50, 49, 69, 69, 69, 70, 63, 62, 62, 71, 70, 69, 70, 65, 65, 65, 72, 79, 80, 75, 71, 70, 73, 83, 81, 74, 72, 71],
  bodyOffsets: [[2, -27], [2, -27], [2, -27], [0, -29], [0, -29], [0, -29], [3, -28], [3, -28], [3, -28], [2, -27], [2, -27], [2, -27], [2, -28], [2, -28], [2, -28], [-2, -27], [-2, -27], [-2, -27], [-2, -28], [-2, -28], [-2, -28], [0, -29], [0, -29], [0, -29], [0, -29], [2, -28], [3, -25], [2, -25], [0, -29], [-1, -28], [-3, -25], [-3, -25], [1, -28], [0, -28], [2, -28], [0, -29], [0, -31], [0, -29], [-1, -27], [1, -26], [2, -29], [0, -28], [-1, -27], [1, -29], [2, -31], [-1, -31], [-3, -29], [0, -28], [2, -27], [0, -26], [1, -26], [1, -27], [1, -31], [0, -30], [-1, -29], [0, -28], [0, -30], [0, -27], [0, -26], [1, -27], [0, -30], [1, -27], [1, -27], [2, -28], [-1, -27], [0, -26], [-1, -26], [-1, -27], [-1, -31], [1, -30], [1, -29], [0, -28], [-1, -29], [0, -28], [1, -27], [-1, -29], [-1, -31], [1, -31], [3, -29], [1, -28], [-1, -28], [0, -28], [-1, -28], [0, -29], [0, -31], [0, -29], [1, -27], [0, -26], [3, -12], [3, -12], [3, -12], [-2, -13], [-2, -13], [-2, -13], [-2, -10], [-2, -10], [-2, -10], [2, -12], [2, -12], [2, -12], [-1, -14], [-1, -14], [-1, -14], [-1, -12], [-1, -12], [-1, -12], [3, -10], [3, -10], [3, -10], [2, -13], [2, -13], [2, -13], [-2, -22], [-3, -21], [-2, -22], [-2, -22], [-3, -21], [-2, -22], [-1, -23], [-2, -20], [-1, -23], [-1, -23], [-2, -20], [-1, -23], [1, -23], [2, -20], [1, -23], [1, -23], [2, -20], [1, -23], [3, -22], [3, -21], [3, -22], [3, -22], [3, -21], [3, -22], [1, -27], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [1, -27], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [2, -26], [3, -26], [3, -27], [2, -27], [2, -27], [2, -27], [2, -26], [3, -26], [3, -27], [2, -27], [2, -27], [2, -27], [-2, -26], [-2, -26], [-2, -27], [-2, -27], [-1, -27], [-1, -27], [-2, -26], [-2, -26], [-2, -27], [-2, -27], [-1, -27], [-1, -27], [0, -27], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [2, -27], [-1, -27], [-8, -24], [-10, -23], [-10, -23], [2, -27], [-1, -27], [-8, -24], [-10, -23], [-10, -23], [5, -24], [7, -24], [0, -27], [-5, -27], [-5, -27], [5, -24], [7, -24], [0, -27], [-5, -27], [-5, -27], [-4, -24], [-6, -24], [1, -27], [5, -27], [5, -27], [-4, -24], [-6, -24], [1, -27], [5, -27], [5, -27], [-2, -27], [2, -27], [9, -24], [10, -23], [10, -23], [-2, -27], [2, -27], [9, -24], [10, -23], [10, -23], [1, -27], [2, -28], [1, -27], [1, -27], [2, -28], [1, -27], [7, -21], [8, -18], [7, -21], [7, -21], [8, -18], [7, -21], [-7, -21], [-8, -18], [-7, -21], [-7, -21], [-8, -18], [-7, -21], [-1, -27], [-2, -28], [-1, -27], [-1, -27], [-2, -28], [-1, -27], [13, -24], [13, -24], [24, -15], [24, -15], [-24, -15], [-24, -15], [-13, -24], [-13, -24], [7, -6], [7, -6], [13, -7], [13, -7], [-12, -7], [-12, -7], [-6, -6], [-6, -6], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [3, -26], [2, -27], [2, -28], [2, -29], [-4, -21], [-4, -21], [-5, -21], [-5, -21], [-5, -21], [3, -26], [2, -27], [2, -28], [2, -29], [-4, -21], [-4, -21], [-5, -21], [-5, -21], [-5, -21], [3, -27], [4, -28], [6, -28], [7, -29], [-3, -26], [-4, -26], [-9, -26], [-9, -26], [-9, -26], [3, -27], [4, -28], [6, -28], [7, -29], [-3, -26], [-4, -26], [-9, -26], [-9, -26], [-9, -26], [-2, -27], [-4, -28], [-6, -28], [-6, -29], [3, -26], [4, -26], [9, -26], [9, -26], [9, -26], [-2, -27], [-4, -28], [-6, -28], [-6, -29], [3, -26], [4, -26], [9, -26], [9, -26], [9, -26], [-3, -26], [-2, -27], [-1, -28], [-1, -29], [4, -21], [4, -21], [5, -21], [5, -21], [5, -21], [-3, -26], [-2, -27], [-1, -28], [-1, -29], [4, -21], [4, -21], [5, -21], [5, -21], [5, -21], [3, -26], [2, -27], [2, -28], [2, -29], [-4, -21], [-4, -21], [-5, -21], [-5, -21], [3, -26], [2, -27], [2, -28], [2, -29], [-4, -21], [-4, -21], [-5, -21], [-5, -21], [3, -27], [4, -28], [6, -28], [7, -29], [-3, -26], [-4, -26], [-9, -26], [-9, -26], [3, -27], [4, -28], [6, -28], [7, -29], [-3, -26], [-4, -26], [-9, -26], [-9, -26], [-2, -27], [-4, -28], [-6, -28], [-6, -29], [3, -26], [4, -26], [9, -26], [9, -26], [-2, -27], [-4, -28], [-6, -28], [-6, -29], [3, -26], [4, -26], [9, -26], [9, -26], [-3, -26], [-2, -27], [-1, -28], [-1, -29], [4, -21], [4, -21], [5, -21], [5, -21], [-3, -26], [-2, -27], [-1, -28], [-1, -29], [4, -21], [4, -21], [5, -21], [5, -21], [0, -29], [1, -32], [0, -33], [0, -30], [-1, -28], [0, -28], [0, -29], [1, -32], [0, -33], [0, -30], [-1, -28], [0, -28], [2, -27], [-3, -34], [-2, -33], [2, -30], [3, -27], [3, -26], [2, -27], [-3, -34], [-2, -33], [2, -30], [3, -27], [3, -26], [-2, -27], [4, -34], [3, -33], [-2, -30], [-2, -27], [-2, -26], [-2, -27], [4, -34], [3, -33], [-2, -30], [-2, -27], [-2, -26], [0, -29], [0, -32], [1, -33], [1, -30], [2, -28], [1, -28], [0, -29], [0, -32], [1, -33], [1, -30], [2, -28], [1, -28]],
  anchorHead: [[1, -59], [-4, -61], [7, -61], [-4, -61], [-4, -61], [1, -59], [-4, -61], [12, -77], [-5, -61], [12, -77], [12, -76], [-4, -61], [12, -76], [-10, -77], [12, -77], [-11, -77], [5, -61], [11, -76], [5, -61], [6, -61], [-11, -77], [5, -61], [0, -59], [4, -61], [0, -59], [0, -58], [0, -56], [0, -57], [0, -59], [0, -58], [0, -56], [0, -57], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-3, -61], [-3, -60], [-3, -58], [-3, -59], [-3, -61], [-3, -60], [-3, -58], [-3, -59], [13, -77], [13, -76], [13, -74], [13, -75], [13, -77], [13, -76], [13, -74], [13, -75], [12, -76], [12, -75], [12, -73], [12, -74], [12, -76], [12, -75], [12, -73], [12, -74], [-12, -77], [-12, -76], [-12, -74], [-12, -75], [-12, -77], [-12, -76], [-12, -74], [-12, -75], [4, -61], [4, -60], [4, -58], [4, -59], [4, -61], [4, -60], [4, -58], [4, -59], [5, -61], [5, -60], [5, -58], [5, -59], [5, -61], [5, -60], [5, -58], [5, -59], [1, -32], [-4, -34], [6, -34], [-4, -34], [-3, -34], [1, -32], [-3, -34], [13, -50], [-4, -34], [12, -50], [12, -49], [-4, -34], [12, -49], [-9, -50], [13, -50], [-11, -50], [4, -34], [10, -49], [4, -34], [5, -34], [-12, -50], [5, -34], [0, -32], [4, -34], [-20, -53], [-24, -42], [-20, -53], [-20, -53], [-24, -42], [-20, -53], [-14, -67], [-12, -50], [-14, -67], [-14, -67], [-12, -50], [-14, -67], [15, -67], [13, -50], [15, -67], [15, -67], [13, -50], [15, -67], [21, -53], [25, -42], [21, -53], [21, -53], [25, -42], [21, -53], [-4, -59], [-4, -58], [-4, -59], [-4, -61], [-4, -61], [-4, -60], [-4, -59], [-4, -58], [-4, -59], [-4, -61], [-4, -61], [-4, -60], [12, -75], [12, -74], [12, -76], [12, -77], [12, -77], [12, -76], [12, -75], [12, -74], [12, -76], [12, -77], [12, -77], [12, -76], [-11, -75], [-11, -74], [-11, -76], [-11, -77], [-11, -77], [-11, -76], [-11, -75], [-11, -74], [-11, -76], [-11, -77], [-11, -77], [-11, -76], [5, -59], [5, -58], [5, -59], [5, -61], [5, -61], [5, -60], [5, -59], [5, -58], [5, -59], [5, -61], [5, -61], [5, -60], [-4, -58], [-7, -58], [-23, -44], [-23, -43], [-23, -43], [-4, -58], [-7, -58], [-23, -44], [-23, -43], [-23, -43], [15, -73], [18, -73], [0, -72], [1, -72], [1, -72], [15, -73], [18, -73], [0, -72], [1, -72], [1, -72], [-14, -73], [-17, -73], [1, -72], [0, -72], [0, -72], [-14, -73], [-17, -73], [1, -72], [0, -72], [0, -72], [5, -58], [8, -58], [24, -44], [24, -43], [24, -43], [5, -58], [8, -58], [24, -44], [24, -43], [24, -43], [21, -70], [24, -71], [21, -70], [21, -70], [24, -71], [21, -70], [18, -72], [23, -67], [18, -72], [18, -72], [23, -67], [18, -72], [-17, -72], [-22, -67], [-17, -72], [-17, -72], [-22, -67], [-17, -72], [-20, -70], [-23, -71], [-20, -70], [-20, -70], [-23, -71], [-20, -70], [40, -62], [40, -62], [49, -58], [49, -58], [-48, -58], [-48, -58], [-39, -62], [-39, -62], [46, -26], [46, -26], [57, 15], [57, 15], [-56, 15], [-56, 15], [-45, -26], [-45, -26], [1, -59], [1, -59], [1, -59], [1, -59], [1, -59], [1, -59], [1, -59], [1, -59], [-3, -57], [-3, -58], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-19, -44], [-3, -57], [-3, -58], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-19, -44], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-1, -72], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-1, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [2, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [2, -72], [4, -57], [4, -58], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [20, -44], [4, -57], [4, -58], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [20, -44], [-3, -57], [-3, -58], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-3, -57], [-3, -58], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [4, -57], [4, -58], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [4, -57], [4, -58], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [-4, -61], [-4, -63], [-4, -65], [-4, -64], [-4, -60], [-4, -59], [-4, -61], [-4, -63], [-4, -65], [-4, -64], [-4, -60], [-4, -59], [12, -77], [12, -79], [12, -81], [12, -80], [12, -76], [12, -75], [12, -77], [12, -79], [12, -81], [12, -80], [12, -76], [12, -75], [-11, -77], [-11, -79], [-11, -81], [-11, -80], [-11, -76], [-11, -75], [-11, -77], [-11, -79], [-11, -81], [-11, -80], [-11, -76], [-11, -75], [5, -61], [5, -63], [5, -65], [5, -64], [5, -60], [5, -59], [5, -61], [5, -63], [5, -65], [5, -64], [5, -60], [5, -59]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99]
};

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 71, 103, 141, 178, 216, 252, 286, 323, 362, 398, 432, 468, 502, 543, 586, 620, 653, 693, 733, 768, 791, 836, 878, 910, 934, 979, 1021, 1051, 1083, 1118, 1154, 1190, 1221, 1259, 1307, 1348, 1385, 1421, 1455, 1491, 1528, 1565, 1600, 1637, 1669, 1705, 1740, 1776, 1809, 1840, 1872, 1903, 1944, 1983, 2024, 2059, 2094, 2129, 2164, 2199, 2234, 2270, 2306, 2342, 2378, 2414, 2450, 2495, 2542, 2585, 2630, 2667, 2706, 2742, 2777, 2826, 2872, 2921, 2963, 3007, 3049, 3100, 3144, 3220, 3276, 3326, 3378, 3427, 3480, 3532, 3579, 3613, 3648, 3682, 3726, 3771, 3812, 3855, 3896, 3935, 3991, 4043, 4082, 4120, 4158, 4215, 4267, 4303, 4338, 4372, 4404, 4443, 4481, 4517, 4553, 4589, 4625, 4663],
  widths: [37, 34, 32, 38, 37, 38, 36, 34, 37, 39, 36, 34, 36, 34, 41, 43, 34, 33, 40, 40, 35, 23, 45, 42, 32, 24, 45, 42, 30, 32, 35, 36, 36, 31, 38, 48, 41, 37, 36, 34, 36, 37, 37, 35, 37, 32, 36, 35, 36, 33, 31, 32, 31, 41, 39, 41, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 45, 47, 43, 45, 37, 39, 36, 35, 49, 46, 49, 42, 44, 42, 51, 44, 76, 56, 50, 52, 49, 53, 52, 47, 34, 35, 34, 44, 45, 41, 43, 41, 39, 56, 52, 39, 38, 38, 57, 52, 36, 35, 34, 32, 39, 38, 36, 36, 36, 36, 38, 36],
  heights: [71, 70, 68, 65, 69, 69, 67, 69, 73, 68, 67, 69, 73, 70, 68, 62, 66, 66, 66, 69, 70, 69, 68, 66, 65, 65, 63, 64, 67, 70, 71, 70, 70, 66, 68, 66, 65, 69, 70, 62, 65, 69, 69, 61, 65, 49, 48, 42, 48, 48, 57, 50, 57, 59, 50, 59, 69, 72, 73, 73, 72, 70, 67, 70, 71, 71, 70, 68, 71, 71, 64, 63, 67, 66, 64, 63, 67, 67, 67, 61, 61, 61, 61, 52, 39, 58, 65, 72, 78, 69, 65, 67, 66, 77, 79, 73, 71, 69, 67, 66, 65, 58, 56, 64, 63, 61, 63, 60, 73, 72, 70, 68, 74, 73, 71, 70, 68, 67, 71, 70],
  bodyOffsets: [[0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [-2, -24], [-2, -24], [-2, -24], [0, -22], [0, -22], [0, -22], [2, -24], [2, -24], [2, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [-1, -25], [-1, -25], [-1, -22], [0, -21], [0, -26], [0, -25], [0, -22], [0, -21], [1, -25], [-4, -25], [-3, -25], [1, -25], [2, -27], [-1, -26], [0, -22], [2, -23], [-1, -23], [-6, -23], [-2, -22], [0, -23], [-2, -25], [-7, -25], [-3, -23], [-1, -22], [-2, -25], [0, -23], [0, -22], [0, -23], [0, -27], [-1, -25], [-2, -24], [0, -25], [0, -25], [0, -25], [0, -26], [0, -24], [0, -25], [-1, -24], [-1, -25], [-1, -24], [2, -25], [1, -23], [0, -22], [0, -23], [1, -27], [1, -25], [2, -24], [1, -25], [2, -23], [7, -23], [2, -22], [0, -23], [2, -25], [8, -25], [3, -23], [1, -22], [-1, -25], [5, -25], [4, -25], [-1, -25], [-1, -27], [1, -26], [0, -22], [-1, -23], [-1, -14], [-1, -14], [-1, -14], [-3, -15], [-3, -15], [-3, -15], [-4, -17], [-4, -17], [-4, -17], [-3, -13], [-3, -13], [-3, -13], [0, -16], [0, -16], [0, -16], [3, -13], [3, -13], [3, -13], [5, -17], [5, -17], [5, -17], [3, -15], [3, -15], [3, -15], [0, -10], [0, -7], [0, -10], [0, -10], [0, -7], [0, -10], [0, -10], [-4, -7], [0, -10], [0, -10], [-4, -7], [0, -10], [1, -10], [5, -7], [1, -10], [1, -10], [5, -7], [1, -10], [1, -10], [0, -7], [1, -10], [1, -10], [0, -7], [1, -10], [1, -25], [1, -27], [1, -27], [1, -27], [1, -27], [1, -26], [1, -25], [1, -27], [1, -27], [1, -27], [1, -27], [1, -26], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -25], [0, -27], [0, -27], [0, -27], [0, -27], [0, -26], [0, -25], [0, -27], [0, -27], [0, -27], [0, -27], [0, -26], [0, -25], [2, -25], [2, -25], [-9, -23], [-9, -23], [0, -25], [2, -25], [2, -25], [-9, -23], [-9, -23], [0, -25], [0, -25], [0, -25], [-1, -28], [-1, -26], [0, -25], [0, -25], [0, -25], [-1, -28], [-1, -26], [1, -25], [1, -25], [1, -25], [1, -28], [2, -26], [1, -25], [1, -25], [1, -25], [1, -28], [2, -26], [1, -25], [-1, -25], [-1, -25], [10, -23], [10, -23], [1, -25], [-1, -25], [-1, -25], [10, -23], [10, -23], [0, -27], [3, -28], [0, -27], [0, -27], [3, -28], [0, -27], [0, -27], [3, -26], [0, -27], [0, -27], [3, -26], [0, -27], [0, -27], [-3, -26], [0, -27], [0, -27], [-3, -26], [0, -27], [1, -27], [-3, -28], [1, -27], [1, -27], [-3, -28], [1, -27], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [1, -20], [1, -20], [0, -5], [0, -5], [0, -3], [0, -3], [0, -3], [0, -3], [0, -5], [0, -5], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [-4, -28], [-5, -32], [-3, -35], [-4, -27], [-4, -25], [-4, -25], [-4, -25], [0, -27], [0, -27], [-4, -28], [-5, -32], [-3, -35], [-4, -27], [-4, -25], [-4, -25], [-4, -25], [0, -27], [0, -27], [-3, -19], [-3, -25], [-3, -26], [0, -22], [0, -21], [0, -21], [0, -21], [3, -19], [3, -19], [-3, -19], [-3, -25], [-3, -26], [0, -22], [0, -21], [0, -21], [0, -21], [3, -19], [3, -19], [3, -19], [4, -25], [3, -26], [0, -22], [1, -21], [1, -21], [1, -21], [-2, -19], [-2, -19], [3, -19], [4, -25], [3, -26], [0, -22], [1, -21], [1, -21], [1, -21], [-2, -19], [-2, -19], [4, -28], [5, -32], [4, -35], [5, -27], [4, -25], [4, -25], [4, -25], [1, -27], [1, -27], [4, -28], [5, -32], [4, -35], [5, -27], [4, -25], [4, -25], [4, -25], [1, -27], [1, -27], [1, -24], [1, -24], [1, -24], [1, -23], [-12, -17], [-11, -16], [-11, -16], [-11, -16], [1, -24], [1, -24], [1, -24], [1, -23], [-12, -17], [-11, -16], [-11, -16], [-11, -16], [-3, -22], [-3, -22], [-3, -21], [-4, -20], [-19, -22], [-20, -21], [-20, -21], [-20, -21], [-3, -22], [-3, -22], [-3, -21], [-4, -20], [-19, -22], [-20, -21], [-20, -21], [-20, -21], [4, -22], [4, -22], [3, -21], [4, -20], [20, -22], [20, -21], [20, -21], [20, -21], [4, -22], [4, -22], [3, -21], [4, -20], [20, -22], [20, -21], [20, -21], [20, -21], [0, -24], [0, -24], [0, -24], [0, -23], [12, -17], [11, -16], [11, -16], [11, -16], [0, -24], [0, -24], [0, -24], [0, -23], [12, -17], [11, -16], [11, -16], [11, -16], [0, -27], [1, -27], [0, -26], [-1, -25], [1, -28], [0, -27], [0, -27], [1, -27], [0, -26], [-1, -25], [1, -28], [0, -27], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -22], [0, -22], [0, -21], [0, -20], [0, -22], [0, -22], [0, -27], [0, -27], [0, -26], [1, -25], [0, -28], [0, -27], [0, -27], [0, -27], [0, -26], [1, -25], [0, -28], [0, -27]],
  anchorHead: [[0, -56], [-4, -56], [4, -56], [-4, -56], [-4, -56], [0, -55], [-3, -56], [13, -73], [-2, -56], [14, -72], [13, -71], [-3, -56], [11, -70], [-11, -71], [12, -71], [-13, -72], [4, -56], [10, -71], [4, -56], [3, -56], [-12, -73], [5, -56], [1, -55], [5, -56], [0, -56], [0, -55], [0, -53], [0, -54], [0, -56], [0, -55], [0, -53], [0, -54], [-4, -57], [-4, -56], [-4, -53], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -57], [5, -56], [5, -53], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [0, -35], [-4, -35], [4, -35], [-4, -36], [-4, -36], [0, -35], [-4, -35], [12, -52], [-4, -35], [12, -51], [12, -50], [-4, -36], [11, -51], [-11, -52], [12, -52], [-11, -51], [5, -36], [11, -50], [5, -35], [5, -35], [-11, -52], [5, -36], [1, -34], [5, -36], [-14, -47], [-10, -35], [-13, -44], [-14, -47], [-10, -35], [-13, -44], [-10, -53], [-14, -32], [-10, -48], [-10, -53], [-14, -32], [-10, -48], [11, -53], [15, -32], [11, -48], [11, -53], [15, -32], [11, -48], [15, -47], [11, -35], [14, -44], [15, -47], [11, -35], [14, -44], [-4, -56], [-4, -59], [-4, -60], [-4, -60], [-4, -59], [-4, -57], [-4, -56], [-4, -59], [-4, -60], [-4, -60], [-4, -59], [-4, -57], [14, -67], [14, -70], [14, -71], [14, -71], [14, -70], [14, -68], [14, -67], [14, -70], [14, -71], [14, -71], [14, -70], [14, -68], [-13, -67], [-13, -70], [-13, -71], [-13, -71], [-13, -70], [-13, -68], [-13, -67], [-13, -70], [-13, -71], [-13, -71], [-13, -70], [-13, -68], [5, -56], [5, -59], [5, -60], [5, -60], [5, -59], [5, -57], [5, -56], [5, -59], [5, -60], [5, -60], [5, -59], [5, -57], [-6, -58], [-4, -58], [-4, -58], [-14, -51], [-16, -49], [-6, -58], [-4, -58], [-4, -58], [-14, -51], [-16, -49], [14, -72], [15, -72], [15, -72], [6, -72], [3, -68], [14, -72], [15, -72], [15, -72], [6, -72], [3, -68], [-13, -72], [-14, -72], [-14, -72], [-5, -72], [-2, -68], [-13, -72], [-14, -72], [-14, -72], [-5, -72], [-2, -68], [7, -58], [5, -58], [5, -58], [15, -51], [17, -49], [7, -58], [5, -58], [5, -58], [15, -51], [17, -49], [13, -72], [17, -73], [13, -72], [13, -72], [17, -73], [13, -72], [13, -79], [18, -77], [13, -79], [13, -79], [18, -77], [13, -79], [-12, -79], [-17, -77], [-12, -79], [-12, -79], [-17, -77], [-12, -79], [-12, -72], [-16, -73], [-12, -72], [-12, -72], [-16, -73], [-12, -72], [20, -62], [20, -62], [21, -67], [21, -67], [-20, -67], [-20, -67], [-19, -62], [-19, -62], [33, -20], [33, -20], [39, 11], [39, 11], [-38, 11], [-38, 11], [-32, -20], [-32, -20], [0, -56], [0, -56], [0, -56], [0, -56], [0, -56], [0, -56], [0, -56], [0, -56], [-4, -56], [-5, -57], [-5, -58], [-6, -54], [-4, -55], [-4, -55], [-4, -55], [-1, -56], [-2, -55], [-4, -56], [-5, -57], [-5, -58], [-6, -54], [-4, -55], [-4, -55], [-4, -55], [-1, -56], [-2, -55], [15, -68], [14, -69], [14, -70], [16, -66], [18, -65], [18, -65], [18, -65], [20, -63], [19, -63], [15, -68], [14, -69], [14, -70], [16, -66], [18, -65], [18, -65], [18, -65], [20, -63], [19, -63], [-14, -68], [-13, -69], [-13, -70], [-15, -66], [-17, -65], [-17, -65], [-17, -65], [-19, -63], [-18, -63], [-14, -68], [-13, -69], [-13, -70], [-15, -66], [-17, -65], [-17, -65], [-17, -65], [-19, -63], [-18, -63], [5, -56], [6, -57], [6, -58], [7, -54], [5, -55], [5, -55], [5, -55], [2, -56], [3, -55], [5, -56], [6, -57], [6, -58], [7, -54], [5, -55], [5, -55], [5, -55], [2, -56], [3, -55], [-4, -55], [-3, -55], [-5, -54], [-6, -53], [-26, -41], [-28, -39], [-27, -39], [-27, -39], [-4, -55], [-3, -55], [-5, -54], [-6, -53], [-26, -41], [-28, -39], [-27, -39], [-27, -39], [12, -69], [13, -69], [12, -68], [10, -67], [-8, -66], [-9, -64], [-8, -64], [-8, -64], [12, -69], [13, -69], [12, -68], [10, -67], [-8, -66], [-9, -64], [-8, -64], [-8, -64], [-11, -69], [-12, -69], [-11, -68], [-9, -67], [9, -66], [10, -64], [9, -64], [9, -64], [-11, -69], [-12, -69], [-11, -68], [-9, -67], [9, -66], [10, -64], [9, -64], [9, -64], [5, -55], [4, -55], [6, -54], [7, -53], [27, -41], [29, -39], [28, -39], [28, -39], [5, -55], [4, -55], [6, -54], [7, -53], [27, -41], [29, -39], [28, -39], [28, -39], [-4, -60], [-4, -59], [-4, -57], [-4, -55], [-4, -61], [-4, -60], [-4, -60], [-4, -59], [-4, -57], [-4, -55], [-4, -61], [-4, -60], [14, -71], [14, -70], [14, -67], [14, -66], [14, -70], [14, -69], [14, -71], [14, -70], [14, -67], [14, -66], [14, -70], [14, -69], [-13, -71], [-13, -70], [-13, -67], [-13, -66], [-13, -70], [-13, -69], [-13, -71], [-13, -70], [-13, -67], [-13, -66], [-13, -70], [-13, -69], [5, -60], [5, -59], [5, -57], [5, -55], [5, -61], [5, -60], [5, -60], [5, -59], [5, -57], [5, -55], [5, -61], [5, -60]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 52, 50, 51, 52, 53, 54, 55, 53, 54, 55, 53, 54, 55, 53, 54, 55, 50, 51, 52, 50, 51, 52, 56, 57, 58, 59, 60, 61, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 56, 57, 58, 59, 60, 61, 56, 57, 58, 59, 60, 61, 68, 69, 69, 70, 71, 68, 69, 69, 70, 71, 72, 73, 73, 74, 75, 72, 73, 73, 74, 75, 72, 73, 73, 74, 75, 72, 73, 73, 74, 75, 68, 69, 69, 70, 71, 68, 69, 69, 70, 71, 76, 77, 78, 76, 77, 78, 79, 80, 81, 79, 80, 81, 79, 80, 81, 79, 80, 81, 76, 77, 78, 76, 77, 78, 82, 82, 83, 83, 83, 83, 82, 82, 84, 84, 85, 85, 85, 85, 84, 84, 0, 0, 0, 0, 0, 0, 0, 0, 86, 87, 88, 89, 90, 90, 90, 91, 91, 86, 87, 88, 89, 90, 90, 90, 91, 91, 92, 93, 94, 95, 96, 96, 96, 97, 97, 92, 93, 94, 95, 96, 96, 96, 97, 97, 92, 93, 94, 95, 96, 96, 96, 97, 97, 92, 93, 94, 95, 96, 96, 96, 97, 97, 86, 87, 88, 89, 90, 90, 90, 91, 91, 86, 87, 88, 89, 90, 90, 90, 91, 91, 98, 98, 99, 100, 101, 102, 102, 102, 98, 98, 99, 100, 101, 102, 102, 102, 103, 103, 104, 105, 106, 107, 107, 107, 103, 103, 104, 105, 106, 107, 107, 107, 103, 103, 104, 105, 106, 107, 107, 107, 103, 103, 104, 105, 106, 107, 107, 107, 98, 98, 99, 100, 101, 102, 102, 102, 98, 98, 99, 100, 101, 102, 102, 102, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113]
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 35, 72, 114, 146, 181, 216, 251, 285, 320, 355, 389, 423, 457, 489, 523, 558, 592, 624, 655, 692, 726, 753, 793, 839, 880, 907, 946, 992, 1031, 1062, 1096, 1133, 1167, 1198, 1234, 1277, 1316, 1351, 1385, 1419, 1453, 1488, 1521, 1554, 1587, 1624, 1671, 1718, 1764, 1806, 1844, 1882, 1916, 1952, 2001, 2050, 2098, 2147, 2197, 2246, 2289, 2332, 2375, 2418, 2462, 2507, 2555, 2604, 2664, 2724, 2767, 2816, 2873, 2930, 2970, 3017, 3056, 3098, 3161, 3225, 3273, 3324, 3373, 3419, 3479, 3539, 3582, 3632, 3681, 3725, 3783, 3842, 3890, 3939, 3991, 4050, 4109, 4168, 4231, 4290, 4332, 4376, 4424, 4481, 4538, 4595, 4653, 4710, 4751, 4806, 4854, 4903, 4963, 5023, 5060, 5112, 5155, 5204, 5261],
  widths: [35, 37, 42, 32, 35, 35, 35, 34, 35, 35, 34, 34, 34, 32, 34, 35, 34, 32, 31, 37, 34, 27, 40, 46, 41, 27, 39, 46, 39, 31, 34, 37, 34, 31, 36, 43, 39, 35, 34, 34, 34, 35, 33, 33, 33, 37, 47, 47, 46, 42, 38, 38, 34, 36, 49, 49, 48, 49, 50, 49, 43, 43, 43, 43, 44, 45, 48, 49, 60, 60, 43, 49, 57, 57, 40, 47, 39, 42, 63, 64, 48, 51, 49, 46, 60, 60, 43, 50, 49, 44, 58, 59, 48, 49, 52, 59, 59, 59, 63, 59, 42, 44, 48, 57, 57, 57, 58, 57, 41, 55, 48, 49, 60, 60, 37, 52, 43, 49, 57, 57],
  heights: [73, 70, 68, 70, 71, 73, 71, 73, 75, 74, 72, 73, 75, 67, 68, 70, 74, 70, 66, 66, 69, 69, 68, 66, 65, 66, 65, 66, 68, 70, 71, 70, 69, 66, 68, 66, 66, 69, 71, 70, 68, 69, 70, 69, 68, 53, 47, 42, 43, 46, 63, 50, 66, 58, 66, 67, 68, 68, 67, 66, 68, 69, 70, 70, 69, 68, 65, 65, 61, 59, 68, 69, 65, 64, 66, 66, 69, 68, 42, 49, 65, 64, 65, 61, 61, 59, 68, 69, 69, 66, 70, 67, 64, 65, 60, 76, 76, 76, 68, 67, 67, 66, 67, 69, 68, 67, 70, 68, 66, 71, 65, 65, 61, 59, 71, 72, 68, 69, 70, 68],
  bodyOffsets: [[0, -26], [0, -26], [0, -26], [-2, -27], [-2, -27], [-2, -27], [-3, -27], [-3, -27], [-3, -27], [-2, -26], [-2, -26], [-2, -26], [0, -25], [0, -25], [0, -25], [2, -26], [2, -26], [2, -26], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [1, -27], [0, -27], [-1, -24], [0, -24], [1, -27], [0, -27], [-1, -24], [0, -24], [0, -28], [0, -27], [0, -24], [0, -23], [0, -27], [-1, -28], [-2, -26], [-2, -25], [0, -26], [-2, -26], [-3, -25], [-1, -26], [0, -28], [-1, -27], [-2, -25], [-2, -25], [-1, -26], [-2, -24], [-1, -23], [-2, -24], [-1, -28], [-4, -26], [-5, -25], [-3, -27], [0, -27], [-1, -25], [0, -24], [-1, -26], [0, -27], [0, -26], [1, -24], [0, -26], [2, -26], [2, -24], [2, -23], [2, -24], [2, -28], [4, -26], [6, -25], [4, -27], [1, -26], [2, -26], [3, -25], [2, -26], [1, -28], [2, -27], [2, -25], [3, -25], [0, -28], [0, -27], [1, -24], [0, -23], [0, -27], [2, -28], [3, -26], [2, -25], [2, -11], [2, -11], [2, -11], [-3, -14], [-3, -14], [-3, -14], [-7, -17], [-7, -17], [-7, -17], [-3, -18], [-3, -18], [-3, -18], [-1, -18], [-1, -18], [-1, -18], [3, -18], [3, -18], [3, -18], [8, -17], [8, -17], [8, -17], [4, -14], [4, -14], [4, -14], [0, -20], [0, -14], [0, -20], [0, -20], [0, -14], [0, -20], [0, -23], [-1, -19], [0, -23], [0, -23], [-1, -19], [0, -23], [0, -23], [1, -19], [0, -23], [0, -23], [1, -19], [0, -23], [0, -20], [0, -14], [0, -20], [0, -20], [0, -14], [0, -20], [1, -23], [1, -23], [1, -24], [1, -24], [0, -23], [1, -23], [1, -23], [1, -23], [1, -24], [1, -24], [0, -23], [1, -23], [-1, -24], [-1, -24], [-1, -25], [-1, -25], [-1, -24], [0, -24], [-1, -24], [-1, -24], [-1, -25], [-1, -25], [-1, -24], [0, -24], [2, -24], [2, -24], [2, -25], [2, -25], [1, -24], [1, -24], [2, -24], [2, -24], [2, -25], [2, -25], [1, -24], [1, -24], [0, -23], [0, -23], [-1, -24], [0, -24], [0, -23], [0, -23], [0, -23], [0, -23], [-1, -24], [0, -24], [0, -23], [0, -23], [0, -26], [6, -31], [-7, -23], [-7, -21], [-7, -21], [0, -26], [6, -31], [-7, -23], [-7, -21], [-7, -21], [2, -24], [8, -24], [-9, -22], [-9, -22], [-9, -22], [2, -24], [8, -24], [-9, -22], [-9, -22], [-9, -22], [-1, -24], [-7, -24], [10, -22], [10, -22], [10, -22], [-1, -24], [-7, -24], [10, -22], [10, -22], [10, -22], [0, -26], [-5, -31], [7, -23], [7, -21], [7, -21], [0, -26], [-5, -31], [7, -23], [7, -21], [7, -21], [0, -30], [-1, -31], [0, -30], [0, -30], [-1, -31], [0, -30], [4, -23], [3, -22], [4, -23], [4, -23], [3, -22], [4, -23], [-3, -23], [-3, -22], [-3, -23], [-3, -23], [-3, -22], [-3, -23], [0, -30], [2, -31], [0, -30], [0, -30], [2, -31], [0, -30], [11, -36], [11, -36], [18, -27], [18, -27], [-18, -27], [-18, -27], [-10, -36], [-10, -36], [4, -11], [4, -11], [9, -9], [9, -9], [-9, -9], [-9, -9], [-3, -11], [-3, -11], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -24], [6, -29], [6, -29], [-2, -27], [-13, -21], [-13, -19], [-13, -19], [-13, -19], [-13, -19], [0, -24], [6, -29], [6, -29], [-2, -27], [-13, -21], [-13, -19], [-13, -19], [-13, -19], [-13, -19], [2, -24], [6, -24], [8, -24], [2, -24], [-10, -26], [-10, -24], [-10, -24], [-10, -24], [-10, -24], [2, -24], [6, -24], [8, -24], [2, -24], [-10, -26], [-10, -24], [-10, -24], [-10, -24], [-10, -24], [-1, -24], [-6, -24], [-7, -24], [-2, -24], [10, -26], [11, -24], [11, -24], [11, -24], [11, -24], [-1, -24], [-6, -24], [-7, -24], [-2, -24], [10, -26], [11, -24], [11, -24], [11, -24], [11, -24], [0, -24], [-5, -29], [-5, -29], [2, -27], [13, -21], [13, -19], [13, -19], [13, -19], [13, -19], [0, -24], [-5, -29], [-5, -29], [2, -27], [13, -21], [13, -19], [13, -19], [13, -19], [13, -19], [0, -28], [2, -28], [-3, -26], [-7, -27], [-7, -27], [-7, -27], [-9, -23], [-7, -22], [0, -28], [2, -28], [-3, -26], [-7, -27], [-7, -27], [-7, -27], [-9, -23], [-7, -22], [6, -23], [6, -23], [0, -25], [-9, -26], [-9, -26], [-9, -25], [-10, -27], [-9, -26], [6, -23], [6, -23], [0, -25], [-9, -26], [-9, -26], [-9, -25], [-10, -27], [-9, -26], [-6, -23], [-6, -23], [0, -25], [10, -26], [10, -26], [10, -25], [10, -27], [10, -26], [-6, -23], [-6, -23], [0, -25], [10, -26], [10, -26], [10, -25], [10, -27], [10, -26], [0, -28], [-1, -28], [3, -26], [8, -27], [8, -27], [8, -27], [10, -23], [8, -22], [0, -28], [-1, -28], [3, -26], [8, -27], [8, -27], [8, -27], [10, -23], [8, -22], [0, -25], [0, -23], [0, -23], [6, -28], [-9, -19], [-9, -18], [0, -25], [0, -23], [0, -23], [6, -28], [-9, -19], [-9, -18], [5, -24], [-2, -27], [2, -24], [8, -24], [-9, -26], [-9, -25], [5, -24], [-2, -27], [2, -24], [8, -24], [-9, -26], [-9, -25], [-4, -24], [2, -27], [-1, -24], [-7, -24], [10, -26], [10, -25], [-4, -24], [2, -27], [-1, -24], [-7, -24], [10, -26], [10, -25], [1, -25], [1, -23], [0, -23], [-5, -28], [9, -19], [9, -18], [1, -25], [1, -23], [0, -23], [-5, -28], [9, -19], [9, -18]],
  anchorHead: [[-1, -58], [-6, -58], [4, -58], [-5, -59], [-4, -59], [0, -58], [-4, -59], [12, -75], [-5, -59], [11, -75], [11, -74], [-5, -59], [10, -74], [-12, -75], [10, -75], [-10, -75], [6, -59], [11, -74], [5, -59], [6, -59], [-11, -75], [6, -59], [1, -58], [5, -59], [0, -59], [0, -58], [0, -56], [0, -57], [0, -59], [0, -58], [0, -56], [0, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [6, -59], [6, -58], [6, -56], [6, -57], [6, -59], [6, -58], [6, -56], [6, -57], [0, -33], [-5, -33], [5, -33], [-5, -34], [-4, -34], [0, -33], [-4, -36], [11, -52], [-5, -36], [11, -54], [11, -52], [-5, -37], [11, -53], [-10, -54], [11, -54], [-11, -54], [6, -38], [11, -53], [5, -36], [6, -36], [-11, -52], [6, -34], [1, -33], [5, -34], [-3, -67], [-11, -39], [-3, -67], [-3, -67], [-11, -39], [-3, -67], [-3, -71], [-5, -49], [-3, -71], [-3, -71], [-5, -49], [-3, -71], [4, -71], [6, -49], [4, -71], [4, -71], [6, -49], [4, -71], [4, -67], [12, -39], [4, -67], [4, -67], [12, -39], [4, -67], [-3, -54], [-3, -55], [-3, -56], [-3, -56], [-3, -55], [-3, -54], [-3, -54], [-3, -55], [-3, -56], [-3, -56], [-3, -55], [-3, -54], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [4, -54], [4, -55], [4, -56], [4, -56], [4, -55], [4, -54], [4, -54], [4, -55], [4, -56], [4, -56], [4, -55], [4, -54], [-3, -57], [6, -61], [-20, -47], [-23, -44], [-23, -44], [-3, -57], [6, -61], [-20, -47], [-23, -44], [-23, -44], [15, -71], [25, -72], [-2, -68], [-3, -67], [-3, -67], [15, -71], [25, -72], [-2, -68], [-3, -67], [-3, -67], [-14, -71], [-24, -72], [3, -68], [4, -67], [4, -67], [-14, -71], [-24, -72], [3, -68], [4, -67], [4, -67], [4, -57], [-5, -61], [21, -47], [24, -44], [24, -44], [4, -57], [-5, -61], [21, -47], [24, -44], [24, -44], [16, -73], [20, -74], [16, -73], [16, -73], [20, -74], [16, -73], [15, -76], [18, -74], [15, -76], [15, -76], [18, -74], [15, -76], [-14, -76], [-17, -74], [-14, -76], [-14, -76], [-17, -74], [-14, -76], [-15, -73], [-19, -74], [-15, -73], [-15, -73], [-19, -74], [-15, -73], [42, -73], [42, -73], [41, -73], [41, -73], [-40, -73], [-40, -73], [-41, -73], [-41, -73], [45, -27], [45, -27], [51, 14], [51, 14], [-50, 14], [-50, 14], [-44, -27], [-44, -27], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-2, -55], [3, -59], [6, -60], [-6, -56], [-28, -45], [-31, -42], [-31, -42], [-31, -42], [-31, -42], [-2, -55], [3, -59], [6, -60], [-6, -56], [-28, -45], [-31, -42], [-31, -42], [-31, -42], [-31, -42], [16, -71], [22, -72], [25, -72], [9, -70], [-2, -69], [-3, -68], [-3, -68], [-3, -68], [-3, -68], [16, -71], [22, -72], [25, -72], [9, -70], [-2, -69], [-3, -68], [-3, -68], [-3, -68], [-3, -68], [-15, -71], [-21, -72], [-24, -72], [-8, -70], [3, -69], [4, -68], [4, -68], [4, -68], [4, -68], [-15, -71], [-21, -72], [-24, -72], [-8, -70], [3, -69], [4, -68], [4, -68], [4, -68], [4, -68], [3, -55], [-2, -59], [-5, -60], [7, -56], [29, -45], [32, -42], [32, -42], [32, -42], [32, -42], [3, -55], [-2, -59], [-5, -60], [7, -56], [29, -45], [32, -42], [32, -42], [32, -42], [32, -42], [-1, -58], [1, -58], [-12, -53], [-27, -44], [-26, -44], [-26, -44], [-24, -43], [-22, -42], [-1, -58], [1, -58], [-12, -53], [-27, -44], [-26, -44], [-26, -44], [-24, -43], [-22, -42], [19, -69], [19, -68], [6, -69], [-3, -72], [-2, -71], [-2, -72], [-1, -71], [0, -70], [19, -69], [19, -68], [6, -69], [-3, -72], [-2, -71], [-2, -72], [-1, -71], [0, -70], [-18, -69], [-18, -68], [-5, -69], [4, -72], [3, -71], [3, -72], [2, -71], [1, -70], [-18, -69], [-18, -68], [-5, -69], [4, -72], [3, -71], [3, -72], [2, -71], [1, -70], [2, -58], [0, -58], [13, -53], [28, -44], [27, -44], [27, -44], [25, -43], [23, -42], [2, -58], [0, -58], [13, -53], [28, -44], [27, -44], [27, -44], [25, -43], [23, -42], [-2, -55], [-5, -50], [-2, -54], [6, -59], [-21, -43], [-24, -41], [-2, -55], [-5, -50], [-2, -54], [6, -59], [-21, -43], [-24, -41], [21, -74], [5, -71], [17, -72], [26, -71], [-3, -70], [-4, -69], [21, -74], [5, -71], [17, -72], [26, -71], [-3, -70], [-4, -69], [-20, -74], [-4, -71], [-16, -72], [-25, -71], [4, -70], [5, -69], [-20, -74], [-4, -71], [-16, -72], [-25, -71], [4, -70], [5, -69], [3, -55], [6, -50], [3, -54], [-5, -59], [22, -43], [25, -41], [3, -55], [6, -50], [3, -54], [-5, -59], [22, -43], [25, -41]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 92, 93, 94, 95, 96, 97, 98, 99, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 102, 103, 104, 105, 106, 107, 92, 93, 94, 95, 96, 97, 98, 99, 92, 93, 94, 95, 96, 97, 98, 99, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113]
};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 76, 116, 150, 186, 224, 261, 300, 337, 375, 413, 452, 489, 525, 561, 600, 635, 670, 707, 751, 789, 824, 868, 915, 959, 996, 1034, 1077, 1115, 1150, 1187, 1225, 1262, 1297, 1335, 1378, 1419, 1455, 1490, 1524, 1559, 1595, 1631, 1665, 1700, 1745, 1798, 1854, 1905, 1951, 1989, 2027, 2065, 2105, 2154, 2203, 2251, 2300, 2350, 2399, 2442, 2485, 2528, 2571, 2615, 2660, 2702, 2748, 2788, 2833, 2907, 2975, 3025, 3075, 3125, 3173, 3225, 3278, 3322, 3372, 3422, 3468, 3524, 3578, 3625, 3675, 3727, 3780, 3833, 3885, 3938, 3990, 4037, 4083, 4132, 4188, 4244, 4300, 4358, 4415, 4458, 4511, 4563, 4608, 4668, 4732, 4769, 4821, 4865, 4914, 4970],
  widths: [38, 38, 40, 34, 36, 38, 37, 39, 37, 38, 38, 39, 37, 36, 36, 39, 35, 35, 37, 44, 38, 35, 44, 47, 44, 37, 38, 43, 38, 35, 37, 38, 37, 35, 38, 43, 41, 36, 35, 34, 35, 36, 36, 34, 35, 45, 53, 56, 51, 46, 38, 38, 38, 40, 49, 49, 48, 49, 50, 49, 43, 43, 43, 43, 44, 45, 42, 46, 40, 45, 74, 68, 50, 50, 50, 48, 52, 53, 44, 50, 50, 46, 56, 54, 47, 50, 52, 53, 53, 52, 53, 52, 47, 46, 49, 56, 56, 56, 58, 57, 43, 53, 52, 45, 60, 64, 37, 52, 44, 49, 56, 58],
  heights: [74, 70, 68, 73, 73, 73, 73, 74, 74, 73, 73, 74, 74, 71, 74, 73, 76, 75, 71, 70, 73, 70, 69, 67, 64, 66, 67, 67, 67, 72, 74, 71, 71, 67, 69, 67, 68, 73, 76, 73, 71, 73, 75, 68, 67, 58, 54, 44, 46, 48, 65, 51, 66, 60, 67, 68, 69, 69, 68, 67, 69, 70, 71, 71, 70, 69, 69, 67, 70, 72, 50, 50, 70, 69, 69, 68, 68, 68, 78, 77, 77, 72, 66, 65, 69, 69, 63, 75, 75, 68, 67, 67, 69, 67, 67, 66, 65, 65, 68, 66, 67, 73, 68, 66, 69, 66, 72, 73, 69, 70, 76, 75],
  bodyOffsets: [[0, -26], [0, -26], [0, -26], [-2, -29], [-2, -29], [-2, -29], [-2, -28], [-2, -28], [-2, -28], [1, -26], [1, -26], [1, -26], [2, -26], [2, -26], [2, -26], [1, -26], [1, -26], [1, -26], [3, -28], [3, -28], [3, -28], [2, -29], [2, -29], [2, -29], [0, -26], [0, -25], [0, -23], [0, -24], [0, -26], [0, -25], [0, -23], [0, -24], [1, -28], [-2, -26], [-2, -24], [-1, -24], [2, -26], [-1, -27], [-4, -26], [-2, -25], [2, -28], [-5, -27], [-6, -26], [-4, -29], [1, -30], [-2, -28], [-4, -26], [-3, -27], [1, -27], [1, -25], [1, -24], [1, -25], [1, -29], [0, -27], [-4, -26], [-1, -27], [1, -26], [1, -24], [1, -23], [1, -25], [1, -26], [1, -24], [1, -26], [2, -27], [0, -27], [0, -25], [-1, -24], [0, -25], [0, -29], [0, -27], [5, -26], [2, -27], [-1, -28], [5, -27], [7, -26], [4, -29], [0, -30], [2, -28], [5, -26], [3, -27], [-1, -28], [2, -26], [3, -24], [2, -24], [-1, -26], [2, -27], [4, -26], [2, -25], [0, -11], [0, -11], [0, -11], [-5, -13], [-5, -13], [-5, -13], [-6, -17], [-6, -17], [-6, -17], [-7, -17], [-7, -17], [-7, -17], [0, -16], [0, -16], [0, -16], [6, -17], [6, -17], [6, -17], [5, -17], [5, -17], [5, -17], [5, -13], [5, -13], [5, -13], [0, -20], [0, -13], [0, -20], [0, -20], [0, -13], [0, -20], [0, -21], [-1, -18], [0, -21], [0, -21], [-1, -18], [0, -21], [0, -21], [1, -18], [0, -21], [0, -21], [1, -18], [0, -21], [0, -20], [0, -13], [0, -20], [0, -20], [0, -13], [0, -20], [1, -23], [1, -24], [1, -24], [1, -24], [0, -24], [1, -23], [1, -23], [1, -24], [1, -24], [1, -24], [0, -24], [1, -23], [-1, -24], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [0, -24], [-1, -24], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [0, -24], [2, -24], [2, -25], [2, -25], [2, -25], [1, -25], [1, -24], [2, -24], [2, -25], [2, -25], [2, -25], [1, -25], [1, -24], [0, -23], [0, -24], [-1, -24], [0, -24], [0, -24], [0, -23], [0, -23], [0, -24], [-1, -24], [0, -24], [0, -24], [0, -23], [6, -31], [-5, -17], [-5, -17], [-5, -17], [6, -31], [-5, -17], [-5, -17], [-5, -17], [7, -29], [-10, -25], [-11, -24], [-11, -24], [7, -29], [-10, -25], [-11, -24], [-11, -24], [-7, -29], [10, -25], [11, -24], [11, -24], [-7, -29], [10, -25], [11, -24], [11, -24], [-6, -31], [5, -17], [6, -17], [6, -17], [-6, -31], [5, -17], [6, -17], [6, -17], [0, -30], [-1, -31], [0, -30], [0, -30], [-1, -31], [0, -30], [4, -23], [4, -20], [4, -23], [4, -23], [4, -20], [4, -23], [-4, -23], [-3, -20], [-4, -23], [-4, -23], [-3, -20], [-4, -23], [0, -30], [1, -31], [0, -30], [0, -30], [1, -31], [0, -30], [11, -36], [11, -36], [14, -20], [14, -20], [-13, -20], [-13, -20], [-11, -36], [-11, -36], [4, -11], [4, -11], [9, -9], [9, -9], [-9, -9], [-9, -9], [-4, -11], [-4, -11], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -24], [2, -27], [4, -27], [3, -27], [-5, -11], [-5, -11], [-5, -11], [-5, -11], [-5, -11], [0, -24], [2, -27], [4, -27], [3, -27], [-5, -11], [-5, -11], [-5, -11], [-5, -11], [-5, -11], [5, -28], [9, -27], [10, -27], [4, -25], [-10, -25], [-11, -24], [-11, -24], [-11, -24], [-11, -24], [5, -28], [9, -27], [10, -27], [4, -25], [-10, -25], [-11, -24], [-11, -24], [-11, -24], [-11, -24], [-5, -28], [-9, -27], [-10, -27], [-4, -25], [10, -25], [11, -24], [11, -24], [11, -24], [11, -24], [-5, -28], [-9, -27], [-10, -27], [-4, -25], [10, -25], [11, -24], [11, -24], [11, -24], [11, -24], [0, -24], [-2, -27], [-4, -27], [-3, -27], [5, -11], [6, -11], [6, -11], [6, -11], [6, -11], [0, -24], [-2, -27], [-4, -27], [-3, -27], [5, -11], [6, -11], [6, -11], [6, -11], [6, -11], [0, -28], [2, -28], [-3, -25], [-7, -25], [-7, -25], [-8, -22], [-7, -21], [-8, -21], [0, -28], [2, -28], [-3, -25], [-7, -25], [-7, -25], [-8, -22], [-7, -21], [-8, -21], [6, -27], [5, -26], [2, -26], [-9, -26], [-9, -25], [-9, -25], [-11, -27], [-10, -26], [6, -27], [5, -26], [2, -26], [-9, -26], [-9, -25], [-9, -25], [-11, -27], [-10, -26], [-5, -27], [-5, -26], [-1, -26], [9, -26], [9, -25], [9, -25], [11, -27], [11, -26], [-5, -27], [-5, -26], [-1, -26], [9, -26], [9, -25], [9, -25], [11, -27], [11, -26], [1, -28], [-2, -28], [3, -25], [8, -25], [8, -25], [8, -22], [8, -21], [8, -21], [1, -28], [-2, -28], [3, -25], [8, -25], [8, -25], [8, -22], [8, -21], [8, -21], [-1, -24], [-1, -24], [-2, -23], [4, -30], [-11, -21], [-13, -20], [-1, -24], [-1, -24], [-2, -23], [4, -30], [-11, -21], [-13, -20], [6, -24], [-1, -27], [3, -24], [11, -25], [-8, -26], [-8, -25], [6, -24], [-1, -27], [3, -24], [11, -25], [-8, -26], [-8, -25], [-5, -24], [1, -27], [-3, -24], [-10, -25], [8, -26], [8, -25], [-5, -24], [1, -27], [-3, -24], [-10, -25], [8, -26], [8, -25], [2, -24], [2, -24], [2, -23], [-3, -30], [11, -21], [13, -20], [2, -24], [2, -24], [2, -23], [-3, -30], [11, -21], [13, -20]],
  anchorHead: [[0, -58], [-3, -59], [3, -59], [-4, -59], [-4, -60], [-1, -59], [-4, -59], [13, -75], [-5, -59], [13, -76], [12, -75], [-3, -60], [13, -76], [-9, -77], [14, -77], [-10, -77], [6, -60], [12, -75], [6, -59], [6, -59], [-11, -75], [5, -59], [2, -59], [5, -59], [0, -58], [0, -57], [0, -55], [0, -56], [0, -58], [0, -57], [0, -55], [0, -56], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [12, -75], [12, -74], [12, -72], [12, -73], [12, -75], [12, -74], [12, -72], [12, -73], [12, -74], [12, -73], [12, -71], [12, -72], [12, -74], [12, -73], [12, -71], [12, -72], [-11, -75], [-11, -74], [-11, -72], [-11, -73], [-11, -75], [-11, -74], [-11, -72], [-11, -73], [6, -59], [6, -58], [6, -56], [6, -57], [6, -59], [6, -58], [6, -56], [6, -57], [7, -59], [7, -58], [7, -56], [7, -57], [7, -59], [7, -58], [7, -56], [7, -57], [0, -36], [-4, -37], [4, -37], [-4, -37], [-4, -37], [0, -36], [-4, -37], [12, -53], [-4, -37], [12, -53], [11, -52], [-5, -37], [11, -52], [-11, -53], [11, -53], [-11, -53], [5, -37], [11, -52], [4, -37], [4, -37], [-13, -53], [4, -37], [0, -36], [3, -37], [-3, -67], [-11, -39], [-3, -67], [-3, -67], [-11, -39], [-3, -67], [-3, -69], [-5, -47], [-3, -69], [-3, -69], [-5, -47], [-3, -69], [4, -69], [6, -47], [4, -69], [4, -69], [6, -47], [4, -69], [4, -67], [12, -39], [4, -67], [4, -67], [12, -39], [4, -67], [0, -52], [0, -53], [0, -54], [0, -55], [0, -54], [0, -53], [0, -52], [0, -53], [0, -54], [0, -55], [0, -54], [0, -53], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [1, -52], [1, -53], [1, -54], [1, -55], [1, -54], [1, -53], [1, -52], [1, -53], [1, -54], [1, -55], [1, -54], [1, -53], [6, -60], [-14, -40], [-17, -37], [-17, -37], [6, -60], [-14, -40], [-17, -37], [-17, -37], [15, -73], [-4, -70], [-5, -69], [-5, -69], [15, -73], [-4, -70], [-5, -69], [-5, -69], [-14, -73], [5, -70], [6, -69], [6, -69], [-14, -73], [5, -70], [6, -69], [6, -69], [-5, -60], [15, -40], [18, -37], [18, -37], [-5, -60], [15, -40], [18, -37], [18, -37], [16, -73], [20, -74], [16, -73], [16, -73], [20, -74], [16, -73], [15, -76], [18, -74], [15, -76], [15, -76], [18, -74], [15, -76], [-14, -76], [-17, -74], [-14, -76], [-14, -76], [-17, -74], [-14, -76], [-15, -73], [-19, -74], [-15, -73], [-15, -73], [-19, -74], [-15, -73], [42, -73], [42, -73], [39, -68], [39, -68], [-38, -68], [-38, -68], [-41, -73], [-41, -73], [50, -32], [50, -32], [52, 14], [52, 14], [-51, 14], [-51, 14], [-49, -32], [-49, -32], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -53], [2, -56], [4, -56], [-4, -53], [-14, -36], [-17, -33], [-17, -33], [-17, -33], [-17, -33], [0, -53], [2, -56], [4, -56], [-4, -53], [-14, -36], [-17, -33], [-17, -33], [-17, -33], [-17, -33], [15, -71], [20, -72], [21, -72], [12, -70], [-4, -70], [-5, -69], [-5, -69], [-5, -69], [-5, -69], [15, -71], [20, -72], [21, -72], [12, -70], [-4, -70], [-5, -69], [-5, -69], [-5, -69], [-5, -69], [-14, -71], [-19, -72], [-20, -72], [-11, -70], [5, -70], [6, -69], [6, -69], [6, -69], [6, -69], [-14, -71], [-19, -72], [-20, -72], [-11, -70], [5, -70], [6, -69], [6, -69], [6, -69], [6, -69], [1, -53], [-1, -56], [-3, -56], [5, -53], [15, -36], [18, -33], [18, -33], [18, -33], [18, -33], [1, -53], [-1, -56], [-3, -56], [5, -53], [15, -36], [18, -33], [18, -33], [18, -33], [18, -33], [-2, -58], [1, -58], [-10, -52], [-17, -51], [-16, -51], [-16, -51], [-15, -50], [-14, -50], [-2, -58], [1, -58], [-10, -52], [-17, -51], [-16, -51], [-16, -51], [-15, -50], [-14, -50], [15, -74], [15, -71], [8, -74], [-2, -71], [-1, -70], [-1, -70], [-1, -70], [0, -69], [15, -74], [15, -71], [8, -74], [-2, -71], [-1, -70], [-1, -70], [-1, -70], [0, -69], [-14, -74], [-14, -71], [-7, -74], [3, -71], [2, -70], [2, -70], [2, -70], [1, -69], [-14, -74], [-14, -71], [-7, -74], [3, -71], [2, -70], [2, -70], [2, -70], [1, -69], [3, -58], [0, -58], [11, -52], [18, -51], [17, -51], [17, -51], [16, -50], [15, -50], [3, -58], [0, -58], [11, -52], [18, -51], [17, -51], [17, -51], [16, -50], [15, -50], [-2, -54], [-3, -51], [-2, -54], [6, -59], [-21, -43], [-25, -41], [-2, -54], [-3, -51], [-2, -54], [6, -59], [-21, -43], [-25, -41], [21, -72], [9, -73], [17, -72], [26, -71], [2, -70], [1, -69], [21, -72], [9, -73], [17, -72], [26, -71], [2, -70], [1, -69], [-20, -72], [-8, -73], [-16, -72], [-25, -71], [-1, -70], [0, -69], [-20, -72], [-8, -73], [-16, -72], [-25, -71], [-1, -70], [0, -69], [3, -54], [4, -51], [3, -54], [-5, -59], [22, -43], [26, -41], [3, -54], [4, -51], [3, -54], [-5, -59], [22, -43], [26, -41]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 73, 76, 77, 77, 73, 76, 77, 77, 79, 82, 83, 83, 79, 82, 83, 83, 79, 82, 83, 83, 79, 82, 83, 83, 73, 76, 77, 77, 73, 76, 77, 77, 66, 67, 66, 66, 67, 66, 68, 69, 68, 68, 69, 68, 68, 69, 68, 68, 69, 68, 66, 67, 66, 66, 67, 66, 67, 67, 69, 69, 69, 69, 67, 67, 70, 70, 71, 71, 71, 71, 70, 70, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 74, 75, 76, 77, 77, 77, 77, 72, 73, 74, 75, 76, 77, 77, 77, 77, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 72, 73, 74, 75, 76, 77, 77, 77, 77, 72, 73, 74, 75, 76, 77, 77, 77, 77, 84, 85, 86, 87, 88, 89, 90, 91, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 92, 93, 94, 95, 96, 97, 98, 99, 92, 93, 94, 95, 96, 97, 98, 99, 92, 93, 94, 95, 96, 97, 98, 99, 84, 85, 86, 87, 88, 89, 90, 91, 84, 85, 86, 87, 88, 89, 90, 91, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105]
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 39, 76, 111, 141, 177, 216, 256, 295, 332, 371, 411, 450, 487, 521, 563, 604, 642, 674, 716, 758, 795, 821, 862, 906, 939, 966, 1012, 1064, 1103, 1136, 1169, 1206, 1240, 1276, 1321, 1363, 1399, 1438, 1479, 1522, 1561, 1601, 1643, 1685, 1726, 1773, 1817, 1851, 1895, 1945, 1983, 2023, 2057, 2091, 2130, 2168, 2206, 2243, 2280, 2319, 2358, 2396, 2433, 2469, 2507, 2545, 2586, 2637, 2691, 2742, 2793, 2830, 2876, 2930, 2983, 3034, 3080, 3126, 3161, 3200, 3244, 3287, 3351, 3415, 3452, 3488, 3523, 3563, 3606, 3642, 3700, 3755, 3791, 3829, 3868, 3912, 3956, 3996, 4053, 4109, 4150, 4185, 4219, 4256, 4305, 4354, 4403, 4442, 4481, 4522, 4565, 4611, 4658, 4705, 4751, 4797, 4857, 4915, 4971, 5009, 5046, 5091, 5134],
  widths: [39, 37, 35, 30, 36, 39, 40, 39, 37, 39, 40, 39, 37, 34, 42, 41, 38, 32, 42, 42, 37, 26, 41, 44, 33, 27, 46, 52, 39, 33, 33, 37, 34, 36, 45, 42, 36, 39, 41, 43, 39, 40, 42, 42, 41, 47, 44, 34, 44, 50, 38, 40, 34, 34, 39, 38, 38, 37, 37, 39, 39, 38, 37, 36, 38, 38, 41, 51, 54, 51, 51, 37, 46, 54, 53, 51, 46, 46, 35, 39, 44, 43, 64, 64, 37, 36, 35, 40, 43, 36, 58, 55, 36, 38, 39, 44, 44, 40, 57, 56, 41, 35, 34, 37, 49, 49, 49, 39, 39, 41, 43, 46, 47, 47, 46, 46, 60, 58, 56, 38, 37, 45, 43, 40],
  heights: [75, 70, 69, 70, 70, 72, 69, 67, 71, 72, 68, 67, 70, 70, 67, 64, 65, 67, 65, 67, 70, 68, 67, 65, 64, 65, 62, 65, 66, 72, 71, 69, 62, 65, 65, 63, 67, 71, 70, 68, 67, 71, 71, 69, 67, 45, 46, 48, 48, 43, 59, 53, 61, 50, 71, 72, 73, 74, 73, 72, 67, 68, 69, 70, 69, 68, 68, 66, 76, 71, 62, 65, 68, 70, 56, 55, 64, 61, 64, 64, 60, 65, 46, 55, 71, 72, 67, 67, 68, 66, 63, 62, 70, 70, 70, 71, 72, 73, 67, 66, 69, 67, 68, 69, 67, 61, 61, 65, 67, 66, 68, 56, 55, 55, 81, 81, 69, 68, 67, 84, 82, 74, 72, 71],
  bodyOffsets: [[0, -24], [0, -24], [0, -24], [-1, -25], [-1, -25], [-1, -25], [-4, -25], [-4, -25], [-4, -25], [-2, -25], [-2, -25], [-2, -25], [-1, -25], [-1, -25], [-1, -25], [1, -25], [1, -25], [1, -25], [3, -25], [3, -25], [3, -25], [1, -25], [1, -25], [1, -25], [-1, -25], [2, -24], [4, -23], [3, -22], [0, -25], [-3, -25], [-5, -22], [-4, -22], [-1, -25], [-6, -25], [-2, -25], [-1, -25], [-1, -26], [0, -26], [3, -23], [2, -23], [-1, -25], [-6, -24], [-4, -23], [-2, -25], [0, -26], [-4, -27], [-1, -23], [0, -24], [-2, -24], [3, -23], [4, -20], [1, -25], [-2, -25], [-5, -24], [-3, -24], [-3, -23], [2, -22], [4, -22], [5, -21], [4, -22], [-2, -22], [-5, -21], [-6, -20], [-3, -22], [3, -24], [-2, -23], [-3, -20], [-1, -25], [2, -25], [6, -24], [3, -24], [3, -23], [1, -25], [7, -24], [4, -23], [3, -25], [1, -26], [4, -27], [1, -23], [1, -24], [1, -25], [6, -25], [3, -25], [1, -25], [1, -26], [0, -26], [-3, -23], [-1, -23], [3, -13], [3, -13], [3, -13], [1, -13], [1, -13], [1, -13], [-4, -12], [-4, -12], [-4, -12], [-4, -11], [-4, -11], [-4, -11], [-6, -13], [-6, -13], [-6, -13], [4, -11], [4, -11], [4, -11], [3, -12], [3, -12], [3, -12], [-2, -13], [-2, -13], [-2, -13], [1, -23], [0, -20], [1, -23], [1, -23], [0, -20], [1, -23], [0, -17], [-1, -12], [0, -17], [0, -17], [-1, -12], [0, -17], [0, -17], [1, -12], [0, -17], [0, -17], [1, -12], [0, -17], [-1, -23], [0, -20], [-1, -23], [-1, -23], [0, -20], [-1, -23], [-2, -26], [-2, -27], [-2, -27], [-1, -28], [-1, -27], [-1, -27], [-2, -26], [-2, -27], [-2, -27], [-1, -28], [-1, -27], [-1, -27], [-2, -24], [-2, -25], [-1, -25], [-1, -26], [-1, -25], [-2, -25], [-2, -24], [-2, -25], [-1, -25], [-1, -26], [-1, -25], [-2, -25], [3, -24], [2, -25], [2, -25], [1, -26], [1, -25], [2, -25], [3, -24], [2, -25], [2, -25], [1, -26], [1, -25], [2, -25], [3, -26], [2, -27], [2, -27], [2, -28], [2, -27], [2, -27], [3, -26], [2, -27], [2, -27], [2, -28], [2, -27], [2, -27], [1, -24], [6, -25], [2, -30], [-10, -17], [-11, -13], [1, -24], [6, -25], [2, -30], [-10, -17], [-11, -13], [3, -23], [6, -25], [6, -28], [-3, -21], [-3, -20], [3, -23], [6, -25], [6, -28], [-3, -21], [-3, -20], [-2, -23], [-6, -25], [-6, -28], [4, -21], [4, -20], [-2, -23], [-6, -25], [-6, -28], [4, -21], [4, -20], [0, -24], [-5, -25], [-2, -30], [11, -17], [12, -13], [0, -24], [-5, -25], [-2, -30], [11, -17], [12, -13], [-5, -24], [-4, -26], [-5, -24], [-5, -24], [-4, -26], [-5, -24], [-4, -21], [-3, -21], [-4, -21], [-4, -21], [-3, -21], [-4, -21], [5, -21], [4, -21], [5, -21], [5, -21], [4, -21], [5, -21], [5, -24], [4, -26], [5, -24], [5, -24], [4, -26], [5, -24], [2, -26], [2, -26], [0, -19], [0, -19], [1, -19], [1, -19], [-2, -26], [-2, -26], [-3, 1], [-3, 1], [-3, 2], [-3, 2], [3, 2], [3, 2], [3, 1], [3, 1], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-2, -21], [-2, -22], [0, -26], [4, -27], [6, -28], [6, -28], [-2, -26], [-12, -13], [-10, -13], [-2, -21], [-2, -22], [0, -26], [4, -27], [6, -28], [6, -28], [-2, -26], [-12, -13], [-10, -13], [-1, -25], [0, -25], [3, -25], [4, -25], [5, -26], [5, -26], [-1, -26], [-11, -24], [-11, -24], [-1, -25], [0, -25], [3, -25], [4, -25], [5, -26], [5, -26], [-1, -26], [-11, -24], [-11, -24], [1, -25], [0, -25], [-2, -25], [-4, -25], [-5, -26], [-5, -26], [1, -26], [12, -24], [11, -24], [1, -25], [0, -25], [-2, -25], [-4, -25], [-5, -26], [-5, -26], [1, -26], [12, -24], [11, -24], [3, -21], [2, -22], [1, -26], [-4, -27], [-5, -28], [-5, -28], [2, -26], [12, -13], [11, -13], [3, -21], [2, -22], [1, -26], [-4, -27], [-5, -28], [-5, -28], [2, -26], [12, -13], [11, -13], [-2, -26], [2, -27], [5, -29], [4, -30], [5, -30], [-7, -22], [-6, -19], [-6, -19], [-2, -26], [2, -27], [5, -29], [4, -30], [5, -30], [-7, -22], [-6, -19], [-6, -19], [-2, -24], [-1, -23], [2, -24], [3, -25], [3, -26], [-4, -22], [-4, -21], [-4, -21], [-2, -24], [-1, -23], [2, -24], [3, -25], [3, -26], [-4, -22], [-4, -21], [-4, -21], [3, -24], [2, -23], [-1, -24], [-2, -25], [-2, -26], [4, -22], [5, -21], [5, -21], [3, -24], [2, -23], [-1, -24], [-2, -25], [-2, -26], [4, -22], [5, -21], [5, -21], [3, -26], [-1, -27], [-4, -29], [-4, -30], [-4, -30], [8, -22], [7, -19], [7, -19], [3, -26], [-1, -27], [-4, -29], [-4, -30], [-4, -30], [8, -22], [7, -19], [7, -19], [-1, -25], [3, -30], [3, -30], [-3, -24], [-3, -24], [-4, -23], [-1, -25], [3, -30], [3, -30], [-3, -24], [-3, -24], [-4, -23], [-2, -25], [2, -30], [4, -30], [2, -25], [2, -24], [0, -23], [-2, -25], [2, -30], [4, -30], [2, -25], [2, -24], [0, -23], [2, -25], [-2, -30], [-3, -30], [-1, -25], [-1, -24], [0, -23], [2, -25], [-2, -30], [-3, -30], [-1, -25], [-1, -24], [0, -23], [2, -25], [-3, -30], [-3, -30], [3, -24], [3, -24], [4, -23], [2, -25], [-3, -30], [-3, -30], [3, -24], [3, -24], [4, -23]],
  anchorHead: [[0, -56], [-5, -57], [7, -57], [-6, -57], [-5, -57], [0, -56], [-5, -57], [11, -73], [-6, -57], [11, -73], [11, -72], [-5, -57], [11, -72], [-11, -73], [11, -73], [-11, -73], [5, -57], [11, -72], [4, -57], [5, -57], [-11, -73], [6, -57], [0, -56], [5, -57], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [0, -30], [-5, -31], [5, -31], [-5, -31], [-5, -31], [0, -30], [-5, -31], [11, -47], [-6, -31], [12, -47], [12, -46], [-4, -31], [11, -46], [-10, -47], [11, -47], [-11, -47], [6, -31], [11, -46], [5, -31], [6, -31], [-11, -47], [5, -31], [0, -30], [4, -31], [-8, -63], [-15, -42], [-8, -63], [-8, -63], [-15, -42], [-8, -63], [-8, -61], [-9, -37], [-8, -61], [-8, -61], [-9, -37], [-8, -61], [9, -61], [10, -37], [9, -61], [9, -61], [10, -37], [9, -61], [9, -63], [16, -42], [9, -63], [9, -63], [16, -42], [9, -63], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [13, -72], [13, -73], [13, -74], [13, -75], [13, -74], [13, -73], [13, -72], [13, -73], [13, -74], [13, -75], [13, -74], [13, -73], [-12, -72], [-12, -73], [-12, -74], [-12, -75], [-12, -74], [-12, -73], [-12, -72], [-12, -73], [-12, -74], [-12, -75], [-12, -74], [-12, -73], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [-1, -56], [-1, -57], [0, -59], [-30, -31], [-34, -27], [-1, -56], [-1, -57], [0, -59], [-30, -31], [-34, -27], [15, -69], [16, -70], [17, -71], [5, -59], [3, -57], [15, -69], [16, -70], [17, -71], [5, -59], [3, -57], [-14, -69], [-15, -70], [-16, -71], [-4, -59], [-2, -57], [-14, -69], [-15, -70], [-16, -71], [-4, -59], [-2, -57], [2, -56], [2, -57], [1, -59], [31, -31], [35, -27], [2, -56], [2, -57], [1, -59], [31, -31], [35, -27], [9, -65], [13, -65], [9, -65], [9, -65], [13, -65], [9, -65], [5, -72], [11, -71], [5, -72], [5, -72], [11, -71], [5, -72], [-4, -72], [-10, -71], [-4, -72], [-4, -72], [-10, -71], [-4, -72], [-8, -65], [-12, -65], [-8, -65], [-8, -65], [-12, -65], [-8, -65], [23, -66], [23, -66], [14, -69], [14, -69], [-13, -69], [-13, -69], [-22, -66], [-22, -66], [37, -15], [37, -15], [36, 24], [36, 24], [-35, 24], [-35, 24], [-36, -15], [-36, -15], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-24, -41], [-23, -40], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-24, -41], [-23, -40], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [15, -75], [-4, -69], [-4, -68], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [15, -75], [-4, -69], [-4, -68], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-14, -75], [5, -69], [5, -68], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-14, -75], [5, -69], [5, -68], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [25, -41], [24, -40], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [25, -41], [24, -40], [-4, -57], [-1, -56], [1, -57], [2, -58], [4, -59], [-26, -36], [-26, -32], [-26, -31], [-4, -57], [-1, -56], [1, -57], [2, -58], [4, -59], [-26, -36], [-26, -32], [-26, -31], [13, -72], [12, -71], [13, -72], [13, -73], [13, -74], [0, -63], [0, -62], [-1, -61], [13, -72], [12, -71], [13, -72], [13, -73], [13, -74], [0, -63], [0, -62], [-1, -61], [-12, -72], [-11, -71], [-12, -72], [-12, -73], [-12, -74], [1, -63], [1, -62], [2, -61], [-12, -72], [-11, -71], [-12, -72], [-12, -73], [-12, -74], [1, -63], [1, -62], [2, -61], [5, -57], [2, -56], [0, -57], [-1, -58], [-3, -59], [27, -36], [27, -32], [27, -31], [5, -57], [2, -56], [0, -57], [-1, -58], [-3, -59], [27, -36], [27, -32], [27, -31], [-6, -57], [-5, -57], [-6, -58], [-4, -56], [-3, -55], [-3, -54], [-6, -57], [-5, -57], [-6, -58], [-4, -56], [-3, -55], [-3, -54], [11, -73], [12, -74], [11, -75], [9, -71], [10, -70], [10, -69], [11, -73], [12, -74], [11, -75], [9, -71], [10, -70], [10, -69], [-10, -73], [-11, -74], [-10, -75], [-8, -71], [-9, -70], [-9, -69], [-10, -73], [-11, -74], [-10, -75], [-8, -71], [-9, -70], [-9, -69], [7, -57], [6, -57], [7, -58], [5, -56], [4, -55], [4, -54], [7, -57], [6, -57], [7, -58], [5, -56], [4, -55], [4, -54]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 1, 1, 1, 1, 1, 1, 1, 1, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 1, 114, 115, 116, 117, 118, 1, 114, 115, 116, 117, 118, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 3, 119, 120, 121, 122, 123, 1, 114, 115, 116, 117, 118, 1, 114, 115, 116, 117, 118]
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 45, 82, 112, 153, 197, 238, 278, 319, 359, 400, 440, 482, 522, 554, 591, 635, 672, 702, 738, 786, 829, 858, 888, 934, 974, 1007, 1041, 1089, 1129, 1161, 1196, 1240, 1280, 1312, 1346, 1384, 1418, 1459, 1497, 1535, 1573, 1614, 1653, 1692, 1731, 1776, 1830, 1888, 1952, 2001, 2034, 2070, 2111, 2155, 2196, 2236, 2275, 2314, 2354, 2395, 2432, 2468, 2503, 2537, 2572, 2608, 2652, 2706, 2769, 2832, 2876, 2926, 2986, 3046, 3090, 3135, 3179, 3226, 3280, 3329, 3385, 3448, 3496, 3549, 3607, 3668, 3729, 3790, 3825, 3862, 3906, 3971, 4036, 4101, 4145, 4193, 4246, 4298, 4358, 4418, 4478, 4512, 4547, 4584, 4621, 4669, 4716, 4763, 4804, 4852, 4890, 4929, 4974, 5019, 5056, 5105, 5149, 5195, 5240],
  widths: [45, 37, 30, 41, 44, 41, 40, 41, 40, 41, 40, 42, 40, 32, 37, 44, 37, 30, 36, 48, 43, 29, 30, 46, 40, 33, 34, 48, 40, 32, 35, 44, 40, 32, 34, 38, 34, 41, 38, 38, 38, 41, 39, 39, 39, 45, 54, 58, 64, 49, 33, 36, 41, 44, 41, 40, 39, 39, 40, 41, 37, 36, 35, 34, 35, 36, 44, 54, 63, 63, 44, 50, 60, 60, 44, 45, 44, 47, 54, 49, 56, 63, 48, 53, 58, 61, 61, 61, 35, 37, 44, 65, 65, 65, 44, 48, 53, 52, 60, 60, 60, 34, 35, 37, 37, 48, 47, 47, 41, 48, 38, 39, 45, 45, 37, 49, 44, 46, 45, 45],
  heights: [72, 72, 72, 70, 69, 73, 71, 71, 76, 73, 71, 71, 76, 71, 72, 71, 75, 75, 73, 70, 72, 71, 69, 68, 70, 72, 71, 69, 70, 70, 70, 69, 69, 75, 76, 73, 73, 72, 71, 66, 65, 72, 71, 66, 65, 64, 60, 41, 40, 40, 68, 62, 70, 61, 72, 73, 74, 75, 75, 74, 74, 75, 76, 77, 77, 76, 71, 86, 72, 72, 73, 84, 66, 65, 66, 65, 65, 60, 60, 52, 49, 44, 68, 68, 65, 61, 60, 59, 76, 79, 74, 66, 65, 65, 72, 72, 71, 69, 61, 60, 59, 76, 78, 80, 74, 66, 65, 65, 72, 66, 93, 99, 55, 55, 74, 67, 84, 92, 45, 45],
  bodyOffsets: [[0, -28], [0, -28], [0, -28], [-2, -28], [-2, -28], [-2, -28], [0, -28], [0, -28], [0, -28], [-4, -29], [-4, -29], [-4, -29], [-2, -29], [-2, -29], [-2, -29], [5, -29], [5, -29], [5, -29], [0, -28], [0, -28], [0, -28], [3, -28], [3, -28], [3, -28], [0, -30], [0, -30], [1, -28], [0, -27], [0, -30], [-1, -30], [-1, -28], [-1, -27], [-2, -30], [-1, -29], [-2, -27], [-1, -26], [-1, -28], [-3, -28], [-1, -28], [0, -28], [2, -29], [1, -29], [-4, -28], [-2, -28], [0, -29], [-1, -28], [-4, -27], [-1, -28], [-2, -30], [1, -29], [0, -27], [0, -28], [-2, -27], [-2, -26], [-1, -25], [-2, -26], [0, -29], [-1, -28], [-2, -29], [-1, -30], [0, -29], [0, -28], [1, -29], [0, -30], [2, -30], [0, -29], [0, -27], [0, -28], [2, -27], [2, -26], [1, -25], [2, -26], [-1, -29], [-1, -29], [4, -28], [2, -28], [1, -29], [1, -28], [4, -27], [1, -28], [2, -30], [2, -29], [2, -27], [2, -26], [1, -28], [3, -28], [1, -28], [1, -28], [0, -7], [0, -7], [0, -7], [-4, -9], [-4, -9], [-4, -9], [-12, -13], [-12, -13], [-12, -13], [-11, -16], [-11, -16], [-11, -16], [0, -17], [0, -17], [0, -17], [11, -16], [11, -16], [11, -16], [12, -13], [12, -13], [12, -13], [4, -9], [4, -9], [4, -9], [0, -23], [-3, -20], [0, -23], [0, -23], [-3, -20], [0, -23], [0, -24], [-2, -19], [0, -24], [0, -24], [-2, -19], [0, -24], [1, -24], [2, -19], [1, -24], [1, -24], [2, -19], [1, -24], [1, -23], [3, -20], [1, -23], [1, -23], [3, -20], [1, -23], [0, -27], [-1, -27], [-1, -28], [-1, -28], [-1, -28], [0, -28], [0, -27], [-1, -27], [-1, -28], [-1, -28], [-1, -28], [0, -28], [-2, -28], [-2, -28], [-1, -29], [-1, -29], [-1, -29], [-2, -29], [-2, -28], [-2, -28], [-1, -29], [-1, -29], [-1, -29], [-2, -29], [3, -28], [2, -28], [2, -29], [1, -29], [2, -29], [2, -29], [3, -28], [2, -28], [2, -29], [1, -29], [2, -29], [2, -29], [1, -27], [1, -27], [2, -28], [2, -28], [1, -28], [1, -28], [1, -27], [1, -27], [2, -28], [2, -28], [1, -28], [1, -28], [1, -40], [-6, -49], [-13, -28], [-13, -28], [-13, -28], [1, -40], [-6, -49], [-13, -28], [-13, -28], [-13, -28], [1, -28], [1, -34], [-10, -26], [-10, -25], [-10, -25], [1, -28], [1, -34], [-10, -26], [-10, -25], [-10, -25], [-1, -28], [-1, -34], [10, -26], [10, -25], [10, -25], [-1, -28], [-1, -34], [10, -26], [10, -25], [10, -25], [-1, -40], [6, -49], [14, -28], [14, -28], [14, -28], [-1, -40], [6, -49], [14, -28], [14, -28], [14, -28], [1, -22], [5, -22], [1, -22], [1, -22], [5, -22], [1, -22], [0, -21], [7, -18], [0, -21], [0, -21], [7, -18], [0, -21], [0, -21], [-6, -18], [0, -21], [0, -21], [-6, -18], [0, -21], [-1, -22], [-4, -22], [-1, -22], [-1, -22], [-4, -22], [-1, -22], [10, -18], [10, -18], [18, -16], [18, -16], [-17, -16], [-17, -16], [-10, -18], [-10, -18], [-1, -7], [-1, -7], [13, -8], [13, -8], [-12, -8], [-12, -8], [1, -7], [1, -7], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [0, -31], [-2, -31], [-4, -29], [-6, -14], [-6, -14], [-6, -13], [-6, -13], [-6, -13], [-6, -13], [0, -31], [-2, -31], [-4, -29], [-6, -14], [-6, -14], [-6, -13], [-6, -13], [-6, -13], [-6, -13], [2, -28], [1, -29], [-5, -27], [-15, -23], [-15, -22], [-15, -22], [-15, -22], [-15, -22], [-15, -22], [2, -28], [1, -29], [-5, -27], [-15, -23], [-15, -22], [-15, -22], [-15, -22], [-15, -22], [-15, -22], [-1, -28], [0, -29], [5, -27], [16, -23], [16, -22], [16, -22], [16, -22], [16, -22], [16, -22], [-1, -28], [0, -29], [5, -27], [16, -23], [16, -22], [16, -22], [16, -22], [16, -22], [16, -22], [0, -31], [3, -31], [4, -29], [7, -14], [7, -14], [7, -13], [7, -13], [7, -13], [7, -13], [0, -31], [3, -31], [4, -29], [7, -14], [7, -14], [7, -13], [7, -13], [7, -13], [7, -13], [0, -31], [-2, -35], [-4, -34], [-4, -32], [-7, -15], [-7, -15], [-7, -14], [-7, -14], [0, -31], [-2, -35], [-4, -34], [-4, -32], [-7, -15], [-7, -15], [-7, -14], [-7, -14], [4, -28], [4, -29], [3, -30], [-1, -27], [-7, -23], [-6, -22], [-6, -22], [-6, -22], [4, -28], [4, -29], [3, -30], [-1, -27], [-7, -23], [-6, -22], [-6, -22], [-6, -22], [-4, -28], [-3, -29], [-2, -30], [2, -27], [7, -23], [7, -22], [7, -22], [7, -22], [-4, -28], [-3, -29], [-2, -30], [2, -27], [7, -23], [7, -22], [7, -22], [7, -22], [0, -31], [2, -35], [5, -34], [4, -32], [7, -15], [7, -15], [7, -14], [7, -14], [0, -31], [2, -35], [5, -34], [4, -32], [7, -15], [7, -15], [7, -14], [7, -14], [0, -27], [0, -28], [6, -41], [10, -44], [2, -14], [2, -14], [0, -27], [0, -28], [6, -41], [10, -44], [2, -14], [2, -14], [0, -28], [0, -25], [5, -34], [7, -38], [3, -14], [3, -14], [0, -28], [0, -25], [5, -34], [7, -38], [3, -14], [3, -14], [1, -28], [1, -25], [-5, -34], [-7, -38], [-2, -14], [-2, -14], [1, -28], [1, -25], [-5, -34], [-7, -38], [-2, -14], [-2, -14], [1, -27], [0, -28], [-6, -41], [-9, -44], [-1, -14], [-1, -14], [1, -27], [0, -28], [-6, -41], [-9, -44], [-1, -14], [-1, -14]],
  anchorHead: [[-2, -60], [-7, -60], [3, -60], [-6, -61], [-5, -61], [-1, -60], [-7, -62], [9, -79], [-7, -61], [10, -78], [10, -77], [-6, -61], [10, -78], [-11, -79], [10, -79], [-10, -78], [6, -62], [11, -78], [7, -61], [8, -61], [-8, -78], [6, -60], [1, -59], [5, -60], [0, -63], [0, -62], [0, -60], [0, -61], [0, -63], [0, -62], [0, -60], [0, -61], [-5, -63], [-5, -62], [-5, -60], [-5, -61], [-5, -63], [-5, -62], [-5, -60], [-5, -61], [-5, -62], [-5, -61], [-5, -59], [-5, -60], [-5, -62], [-5, -61], [-5, -59], [-5, -60], [11, -78], [11, -77], [11, -75], [11, -76], [11, -78], [11, -77], [11, -75], [11, -76], [11, -78], [11, -77], [11, -75], [11, -76], [11, -78], [11, -77], [11, -75], [11, -76], [-10, -78], [-10, -77], [-10, -75], [-10, -76], [-10, -78], [-10, -77], [-10, -75], [-10, -76], [6, -62], [6, -61], [6, -59], [6, -60], [6, -62], [6, -61], [6, -59], [6, -60], [6, -63], [6, -62], [6, -60], [6, -61], [6, -63], [6, -62], [6, -60], [6, -61], [-1, -34], [-6, -35], [4, -35], [-4, -36], [-4, -36], [1, -34], [-4, -33], [12, -49], [-5, -33], [12, -49], [12, -48], [-5, -33], [11, -48], [-11, -49], [10, -49], [-11, -49], [5, -33], [11, -48], [5, -33], [6, -32], [-11, -49], [5, -34], [0, -34], [4, -35], [-12, -62], [-17, -43], [-12, -62], [-12, -62], [-17, -43], [-12, -62], [-9, -72], [-11, -47], [-9, -72], [-9, -72], [-11, -47], [-9, -72], [10, -72], [12, -47], [10, -72], [10, -72], [12, -47], [10, -72], [13, -62], [18, -43], [13, -62], [13, -62], [18, -43], [13, -62], [-4, -59], [-5, -60], [-6, -61], [-6, -62], [-5, -62], [-4, -61], [-4, -59], [-5, -60], [-6, -61], [-6, -62], [-5, -62], [-4, -61], [13, -78], [13, -79], [13, -80], [13, -81], [13, -81], [13, -80], [13, -78], [13, -79], [13, -80], [13, -81], [13, -81], [13, -80], [-12, -78], [-12, -79], [-12, -80], [-12, -81], [-12, -81], [-12, -80], [-12, -78], [-12, -79], [-12, -80], [-12, -81], [-12, -81], [-12, -80], [5, -59], [6, -60], [7, -61], [7, -62], [6, -62], [5, -61], [5, -59], [6, -60], [7, -61], [7, -62], [6, -62], [5, -61], [-4, -73], [-4, -74], [-24, -54], [-25, -53], [-25, -53], [-4, -73], [-4, -74], [-24, -54], [-25, -53], [-25, -53], [15, -79], [17, -79], [-3, -71], [-4, -70], [-4, -70], [15, -79], [17, -79], [-3, -71], [-4, -70], [-4, -70], [-14, -79], [-16, -79], [4, -71], [5, -70], [5, -70], [-14, -79], [-16, -79], [4, -71], [5, -70], [5, -70], [5, -73], [5, -74], [25, -54], [26, -53], [26, -53], [5, -73], [5, -74], [25, -54], [26, -53], [26, -53], [22, -65], [24, -63], [22, -65], [22, -65], [24, -63], [22, -65], [12, -72], [18, -66], [12, -72], [12, -72], [18, -66], [12, -72], [-11, -72], [-17, -66], [-11, -72], [-11, -72], [-17, -66], [-11, -72], [-21, -65], [-23, -63], [-21, -65], [-21, -65], [-23, -63], [-21, -65], [34, -58], [34, -58], [30, -60], [30, -60], [-29, -60], [-29, -60], [-33, -58], [-33, -58], [34, -26], [34, -26], [55, 9], [55, 9], [-54, 9], [-54, 9], [-33, -26], [-33, -26], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-1, -58], [-4, -61], [-2, -61], [-6, -58], [-29, -36], [-29, -35], [-29, -34], [-29, -34], [-29, -34], [-29, -34], [-4, -61], [-2, -61], [-6, -58], [-29, -36], [-29, -35], [-29, -34], [-29, -34], [-29, -34], [-29, -34], [13, -80], [14, -81], [3, -75], [-10, -67], [-10, -66], [-10, -66], [-10, -66], [-10, -66], [-10, -66], [13, -80], [14, -81], [3, -75], [-10, -67], [-10, -66], [-10, -66], [-10, -66], [-10, -66], [-10, -66], [-12, -80], [-13, -81], [-2, -75], [11, -67], [11, -66], [11, -66], [11, -66], [11, -66], [11, -66], [-12, -80], [-13, -81], [-2, -75], [11, -67], [11, -66], [11, -66], [11, -66], [11, -66], [11, -66], [5, -61], [3, -61], [7, -58], [30, -36], [30, -35], [30, -34], [30, -34], [30, -34], [30, -34], [5, -61], [3, -61], [7, -58], [30, -36], [30, -35], [30, -34], [30, -34], [30, -34], [30, -34], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -38], [-30, -36], [-30, -35], [-30, -35], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -38], [-30, -36], [-30, -35], [-30, -35], [15, -80], [16, -79], [18, -78], [5, -73], [-12, -66], [-12, -64], [-12, -63], [-12, -63], [15, -80], [16, -79], [18, -78], [5, -73], [-12, -66], [-12, -64], [-12, -63], [-12, -63], [-14, -80], [-15, -79], [-17, -78], [-4, -73], [13, -66], [13, -64], [13, -63], [13, -63], [-14, -80], [-15, -79], [-17, -78], [-4, -73], [13, -66], [13, -64], [13, -63], [13, -63], [6, -63], [6, -63], [5, -63], [11, -59], [30, -38], [31, -36], [31, -35], [31, -35], [6, -63], [6, -63], [5, -63], [11, -59], [30, -38], [31, -36], [31, -35], [31, -35], [-4, -59], [1, -58], [2, -61], [4, -67], [0, -36], [0, -36], [-4, -59], [1, -58], [2, -61], [4, -67], [0, -36], [0, -36], [14, -77], [15, -71], [20, -71], [23, -75], [9, -45], [9, -45], [14, -77], [15, -71], [20, -71], [23, -75], [9, -45], [9, -45], [-13, -77], [-14, -71], [-19, -71], [-22, -75], [-8, -45], [-8, -45], [-13, -77], [-14, -71], [-19, -71], [-22, -75], [-8, -45], [-8, -45], [5, -59], [0, -58], [-1, -61], [-3, -67], [1, -36], [1, -36], [5, -59], [0, -58], [-1, -61], [-3, -67], [1, -36], [1, -36]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 94, 95, 96, 97, 98, 99, 100, 100, 94, 95, 96, 97, 98, 99, 100, 100, 101, 102, 103, 104, 105, 106, 107, 107, 101, 102, 103, 104, 105, 106, 107, 107, 101, 102, 103, 104, 105, 106, 107, 107, 101, 102, 103, 104, 105, 106, 107, 107, 94, 95, 96, 97, 98, 99, 100, 100, 94, 95, 96, 97, 98, 99, 100, 100, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 114, 115, 116, 117, 118, 119, 108, 109, 110, 111, 112, 113, 108, 109, 110, 111, 112, 113]
};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 34, 66, 92, 125, 158, 195, 234, 272, 311, 350, 389, 427, 466, 498, 541, 586, 627, 659, 695, 732, 767, 791, 835, 876, 913, 938, 981, 1024, 1058, 1089, 1125, 1164, 1198, 1231, 1274, 1318, 1352, 1386, 1421, 1455, 1487, 1521, 1556, 1590, 1622, 1659, 1697, 1734, 1771, 1807, 1839, 1874, 1908, 1946, 1990, 2033, 2076, 2121, 2168, 2215, 2259, 2302, 2344, 2387, 2432, 2476, 2526, 2581, 2639, 2697, 2727, 2765, 2812, 2859, 2904, 2937, 2990, 3042, 3098, 3161, 3203, 3243, 3282, 3323, 3366, 3422, 3478, 3534, 3561, 3588, 3617, 3646, 3676, 3732, 3788, 3844, 3901, 3957, 4012, 4067, 4133, 4200, 4267, 4314, 4362, 4411, 4459, 4517, 4576, 4635, 4686, 4728, 4790, 4847, 4891, 4925, 4974],
  widths: [34, 32, 26, 33, 33, 37, 39, 38, 39, 39, 39, 38, 39, 32, 43, 45, 41, 32, 36, 37, 35, 24, 44, 41, 37, 25, 43, 43, 34, 31, 36, 39, 34, 33, 43, 44, 34, 34, 35, 34, 32, 34, 35, 34, 32, 37, 38, 37, 37, 36, 32, 35, 34, 38, 44, 43, 43, 45, 47, 47, 44, 43, 42, 43, 45, 44, 50, 55, 58, 58, 30, 38, 47, 47, 45, 33, 53, 52, 56, 63, 42, 40, 39, 41, 43, 56, 56, 56, 27, 27, 29, 29, 30, 56, 56, 56, 57, 56, 55, 55, 66, 67, 67, 47, 48, 49, 48, 58, 59, 59, 51, 42, 62, 57, 44, 34, 49, 51],
  heights: [74, 73, 69, 71, 70, 68, 65, 64, 68, 70, 67, 67, 68, 69, 67, 64, 67, 69, 65, 67, 72, 70, 69, 67, 67, 67, 66, 64, 67, 69, 68, 66, 62, 66, 64, 63, 65, 63, 64, 62, 60, 63, 64, 62, 60, 52, 52, 46, 51, 50, 64, 50, 63, 51, 67, 68, 70, 71, 70, 69, 71, 72, 73, 74, 73, 72, 73, 78, 59, 58, 70, 70, 66, 64, 71, 65, 65, 53, 48, 48, 71, 72, 73, 74, 73, 75, 75, 75, 71, 71, 71, 70, 69, 73, 73, 73, 76, 76, 74, 73, 65, 64, 64, 78, 78, 76, 72, 72, 71, 71, 51, 74, 59, 68, 52, 70, 80, 65],
  bodyOffsets: [[-1, -26], [-1, -26], [-1, -26], [-3, -26], [-3, -26], [-3, -26], [-1, -25], [-1, -25], [-1, -25], [1, -25], [1, -25], [1, -25], [3, -25], [3, -25], [3, -25], [4, -25], [4, -25], [4, -25], [2, -25], [2, -25], [2, -25], [2, -27], [2, -27], [2, -27], [0, -25], [1, -25], [0, -24], [1, -23], [0, -24], [-1, -25], [-1, -22], [-1, -23], [-2, -25], [-5, -25], [-2, -25], [-2, -24], [-2, -25], [-2, -26], [0, -23], [0, -22], [-1, -23], [-7, -22], [-1, -21], [1, -20], [-1, -23], [-5, -23], [-2, -21], [-1, -20], [0, -24], [0, -24], [1, -23], [-1, -26], [0, -26], [-1, -26], [-1, -24], [-2, -23], [0, -25], [1, -24], [1, -23], [2, -25], [1, -25], [1, -24], [0, -23], [-1, -25], [1, -24], [0, -24], [0, -23], [1, -26], [1, -26], [2, -26], [1, -24], [2, -23], [1, -23], [7, -22], [2, -21], [0, -20], [2, -23], [6, -23], [3, -21], [1, -20], [2, -25], [6, -25], [3, -25], [3, -24], [2, -25], [2, -26], [1, -23], [1, -22], [1, -13], [1, -13], [1, -13], [-3, -13], [-3, -13], [-3, -13], [-1, -13], [-1, -13], [-1, -13], [-1, -11], [-1, -11], [-1, -11], [2, -11], [2, -11], [2, -11], [2, -11], [2, -11], [2, -11], [2, -13], [2, -13], [2, -13], [3, -14], [3, -14], [3, -14], [-1, -21], [0, -14], [-1, -21], [-1, -21], [0, -14], [-1, -21], [1, -25], [-1, -19], [1, -25], [1, -25], [-1, -19], [1, -25], [-1, -25], [1, -19], [-1, -25], [-1, -25], [1, -19], [-1, -25], [1, -21], [1, -14], [1, -21], [1, -21], [1, -14], [1, -21], [1, -22], [2, -23], [2, -24], [1, -24], [0, -24], [0, -23], [1, -22], [2, -23], [2, -24], [1, -24], [0, -24], [0, -23], [-4, -22], [-3, -23], [-3, -23], [-3, -24], [-4, -23], [-4, -23], [-4, -22], [-3, -23], [-3, -23], [-3, -24], [-4, -23], [-4, -23], [4, -22], [4, -23], [3, -23], [4, -24], [5, -23], [4, -23], [4, -22], [4, -23], [3, -23], [4, -24], [5, -23], [4, -23], [-1, -22], [-1, -23], [-1, -24], [0, -24], [1, -24], [1, -23], [-1, -22], [-1, -23], [-1, -24], [0, -24], [1, -24], [1, -23], [-2, -27], [0, -27], [-4, -30], [-6, -19], [-6, -19], [-2, -27], [0, -27], [-4, -30], [-6, -19], [-6, -19], [1, -25], [-1, -24], [-3, -26], [-2, -23], [-2, -22], [1, -25], [-1, -24], [-3, -26], [-2, -23], [-2, -22], [0, -25], [1, -24], [3, -26], [3, -23], [3, -22], [0, -25], [1, -24], [3, -26], [3, -23], [3, -22], [2, -27], [0, -27], [5, -30], [6, -19], [6, -19], [2, -27], [0, -27], [5, -30], [6, -19], [6, -19], [-7, -24], [-4, -24], [-7, -24], [-7, -24], [-4, -24], [-7, -24], [1, -22], [3, -21], [1, -22], [1, -22], [3, -21], [1, -22], [0, -22], [-2, -21], [0, -22], [0, -22], [-2, -21], [0, -22], [8, -24], [5, -24], [8, -24], [8, -24], [5, -24], [8, -24], [0, -22], [0, -22], [13, -16], [13, -16], [-13, -16], [-13, -16], [1, -22], [1, -22], [1, 1], [1, 1], [1, 1], [1, 1], [0, 1], [0, 1], [-1, 1], [-1, 1], [-3, -26], [-3, -26], [-3, -26], [-3, -26], [-3, -26], [-3, -26], [-3, -26], [-3, -26], [-3, -23], [-2, -24], [-4, -24], [-5, -25], [-6, -24], [-6, -24], [-13, -20], [-13, -20], [-13, -20], [-3, -23], [-2, -24], [-4, -24], [-5, -25], [-6, -24], [-6, -24], [-13, -20], [-13, -20], [-13, -20], [2, -23], [1, -24], [-1, -24], [-2, -24], [-3, -23], [-3, -23], [-13, -25], [-13, -25], [-13, -25], [2, -23], [1, -24], [-1, -24], [-2, -24], [-3, -23], [-3, -23], [-13, -25], [-13, -25], [-13, -25], [-1, -23], [0, -24], [2, -24], [3, -24], [3, -23], [3, -23], [13, -25], [13, -25], [13, -25], [-1, -23], [0, -24], [2, -24], [3, -24], [3, -23], [3, -23], [13, -25], [13, -25], [13, -25], [3, -23], [2, -24], [5, -24], [6, -25], [7, -24], [7, -24], [13, -20], [13, -20], [13, -20], [3, -23], [2, -24], [5, -24], [6, -25], [7, -24], [7, -24], [13, -20], [13, -20], [13, -20], [-6, -25], [-6, -26], [-5, -27], [-5, -28], [-5, -28], [-11, -11], [-11, -11], [-11, -11], [-6, -25], [-6, -26], [-5, -27], [-5, -28], [-5, -28], [-11, -11], [-11, -11], [-11, -11], [-4, -26], [-3, -26], [-2, -25], [-3, -23], [-3, -23], [-11, -23], [-11, -22], [-11, -22], [-4, -26], [-3, -26], [-2, -25], [-3, -23], [-3, -23], [-11, -23], [-11, -22], [-11, -22], [5, -26], [3, -26], [3, -25], [3, -23], [3, -23], [11, -23], [12, -22], [12, -22], [5, -26], [3, -26], [3, -25], [3, -23], [3, -23], [11, -23], [12, -22], [12, -22], [7, -25], [6, -26], [6, -27], [6, -28], [6, -28], [11, -11], [12, -11], [12, -11], [7, -25], [6, -26], [6, -27], [6, -28], [6, -28], [11, -11], [12, -11], [12, -11], [0, -24], [-6, -25], [-3, -17], [-2, -28], [-22, -16], [-3, -24], [0, -24], [-6, -25], [-3, -17], [-2, -28], [-22, -16], [-3, -24], [-4, -23], [0, -26], [-3, -13], [0, -25], [-20, -28], [1, -22], [-4, -23], [0, -26], [-3, -13], [0, -25], [-20, -28], [1, -22], [5, -23], [1, -26], [3, -13], [0, -25], [21, -28], [0, -22], [5, -23], [1, -26], [3, -13], [0, -25], [21, -28], [0, -22], [1, -24], [7, -25], [4, -17], [2, -28], [22, -16], [4, -24], [1, -24], [7, -25], [4, -17], [2, -28], [22, -16], [4, -24]],
  anchorHead: [[1, -56], [-4, -56], [6, -56], [-5, -57], [-4, -57], [0, -56], [-3, -57], [13, -73], [-4, -57], [14, -73], [14, -72], [-2, -57], [13, -72], [-9, -73], [13, -73], [-9, -73], [6, -57], [13, -72], [5, -57], [5, -57], [-12, -73], [6, -57], [1, -56], [5, -57], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-6, -56], [-6, -55], [-6, -53], [-6, -54], [-6, -56], [-6, -55], [-6, -53], [-6, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [7, -56], [7, -55], [7, -53], [7, -54], [7, -56], [7, -55], [7, -53], [7, -54], [1, -32], [-4, -33], [7, -33], [-4, -33], [-3, -33], [2, -32], [-2, -33], [14, -49], [-3, -33], [13, -49], [13, -48], [-2, -33], [12, -48], [-10, -49], [12, -49], [-12, -49], [4, -33], [10, -48], [3, -33], [4, -33], [-13, -49], [5, -33], [-1, -32], [4, -33], [-10, -66], [-15, -39], [-10, -66], [-10, -66], [-15, -39], [-10, -66], [-7, -67], [-10, -46], [-7, -67], [-7, -67], [-10, -46], [-7, -67], [8, -67], [11, -46], [8, -67], [8, -67], [11, -46], [8, -67], [11, -66], [16, -39], [11, -66], [11, -66], [16, -39], [11, -66], [-5, -53], [-5, -54], [-5, -56], [-5, -57], [-5, -56], [-5, -54], [-5, -53], [-5, -54], [-5, -56], [-5, -57], [-5, -56], [-5, -54], [13, -69], [13, -70], [13, -72], [13, -73], [13, -72], [13, -70], [13, -69], [13, -70], [13, -72], [13, -73], [13, -72], [13, -70], [-12, -69], [-12, -70], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [-12, -69], [-12, -70], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [6, -53], [6, -54], [6, -56], [6, -57], [6, -56], [6, -54], [6, -53], [6, -54], [6, -56], [6, -57], [6, -56], [6, -54], [-5, -57], [-6, -58], [-9, -59], [-20, -43], [-21, -42], [-5, -57], [-6, -58], [-9, -59], [-20, -43], [-21, -42], [14, -73], [9, -71], [11, -74], [8, -70], [7, -68], [14, -73], [9, -71], [11, -74], [8, -70], [7, -68], [-13, -73], [-8, -71], [-10, -74], [-7, -70], [-6, -68], [-13, -73], [-8, -71], [-10, -74], [-7, -70], [-6, -68], [6, -57], [7, -58], [10, -59], [21, -43], [22, -42], [6, -57], [7, -58], [10, -59], [21, -43], [22, -42], [13, -69], [20, -67], [13, -69], [13, -69], [20, -67], [13, -69], [10, -73], [15, -71], [10, -73], [10, -73], [15, -71], [10, -73], [-9, -73], [-14, -71], [-9, -73], [-9, -73], [-14, -71], [-9, -73], [-12, -69], [-19, -67], [-12, -69], [-12, -69], [-19, -67], [-12, -69], [21, -64], [21, -64], [30, -61], [30, -61], [-29, -61], [-29, -61], [-20, -64], [-20, -64], [39, -18], [39, -18], [40, 24], [40, 24], [-39, 24], [-39, 24], [-38, -18], [-38, -18], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-2, -54], [-3, -55], [-5, -56], [-7, -57], [-8, -56], [-8, -56], [-14, -41], [-14, -41], [-14, -41], [-2, -54], [-3, -55], [-5, -56], [-7, -57], [-8, -56], [-8, -56], [-14, -41], [-14, -41], [-14, -41], [13, -69], [12, -70], [11, -71], [9, -72], [8, -71], [8, -71], [-1, -69], [-1, -69], [-1, -69], [13, -69], [12, -70], [11, -71], [9, -72], [8, -71], [8, -71], [-1, -69], [-1, -69], [-1, -69], [-12, -69], [-11, -70], [-10, -71], [-8, -72], [-7, -71], [-7, -71], [2, -69], [2, -69], [2, -69], [-12, -69], [-11, -70], [-10, -71], [-8, -72], [-7, -71], [-7, -71], [2, -69], [2, -69], [2, -69], [3, -54], [4, -55], [6, -56], [8, -57], [9, -56], [9, -56], [15, -41], [15, -41], [15, -41], [3, -54], [4, -55], [6, -56], [8, -57], [9, -56], [9, -56], [15, -41], [15, -41], [15, -41], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [-5, -56], [-6, -46], [-16, -27], [-5, -59], [-34, -37], [-11, -48], [-5, -56], [-6, -46], [-16, -27], [-5, -59], [-34, -37], [-11, -48], [13, -72], [13, -67], [3, -45], [16, -74], [-8, -71], [15, -67], [13, -72], [13, -67], [3, -45], [16, -74], [-8, -71], [15, -67], [-12, -72], [-12, -67], [-2, -45], [-15, -74], [9, -71], [-14, -67], [-12, -72], [-12, -67], [-2, -45], [-15, -74], [9, -71], [-14, -67], [6, -56], [7, -46], [17, -27], [6, -59], [35, -37], [12, -48], [6, -56], [7, -46], [17, -27], [6, -59], [35, -37], [12, -48]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 58, 96, 110, 111, 112, 113, 58, 96, 110, 111, 112, 113, 64, 103, 114, 115, 116, 117, 64, 103, 114, 115, 116, 117, 64, 103, 114, 115, 116, 117, 64, 103, 114, 115, 116, 117, 58, 96, 110, 111, 112, 113, 58, 96, 110, 111, 112, 113]
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 42, 84, 118, 159, 201, 241, 282, 324, 367, 409, 450, 492, 535, 569, 606, 649, 689, 726, 765, 804, 841, 873, 911, 955, 997, 1029, 1063, 1103, 1142, 1183, 1223, 1262, 1300, 1337, 1379, 1425, 1470, 1512, 1555, 1596, 1638, 1682, 1726, 1768, 1808, 1864, 1925, 1988, 2044, 2091, 2133, 2177, 2224, 2274, 2325, 2376, 2425, 2474, 2525, 2575, 2619, 2665, 2711, 2756, 2801, 2844, 2888, 2927, 2977, 3023, 3069, 3127, 3197, 3264, 3310, 3353, 3412, 3464, 3529, 3605, 3647, 3691, 3735, 3782, 3830, 3883, 3932, 3979, 4022, 4068, 4116, 4165, 4221, 4280, 4337, 4390, 4430, 4473, 4514, 4557, 4605, 4673, 4738, 4777, 4818, 4861, 4908, 4962, 5035, 5107, 5166],
  widths: [42, 42, 34, 41, 42, 40, 41, 42, 43, 42, 41, 42, 43, 34, 37, 43, 40, 37, 39, 39, 37, 32, 38, 44, 42, 32, 34, 40, 39, 41, 40, 39, 38, 37, 42, 46, 45, 42, 43, 41, 42, 44, 44, 42, 40, 56, 61, 63, 56, 47, 42, 44, 47, 50, 51, 51, 49, 49, 51, 50, 44, 46, 46, 45, 45, 43, 44, 39, 50, 46, 46, 58, 70, 67, 46, 43, 59, 52, 65, 76, 42, 44, 44, 47, 48, 53, 49, 47, 43, 46, 48, 49, 56, 59, 57, 53, 40, 43, 41, 43, 48, 68, 65, 39, 41, 43, 47, 54, 73, 72, 59, 53],
  heights: [75, 74, 71, 73, 72, 73, 71, 72, 75, 75, 71, 72, 77, 75, 72, 69, 70, 70, 72, 71, 76, 72, 71, 69, 70, 68, 68, 68, 70, 72, 72, 72, 71, 68, 69, 70, 71, 70, 74, 74, 72, 71, 74, 74, 73, 56, 51, 52, 56, 53, 66, 55, 65, 58, 75, 76, 77, 78, 78, 77, 74, 75, 76, 77, 76, 75, 73, 80, 68, 68, 75, 83, 60, 59, 72, 65, 69, 59, 56, 48, 70, 69, 66, 68, 70, 79, 78, 78, 69, 68, 65, 65, 66, 76, 76, 76, 72, 68, 69, 68, 67, 67, 67, 74, 74, 74, 73, 73, 71, 71, 71, 81],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [2, -26], [2, -26], [2, -26], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [1, -27], [1, -27], [1, -27], [-1, -25], [-1, -25], [-1, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [1, -25], [1, -25], [0, -23], [1, -22], [0, -24], [1, -25], [1, -23], [1, -21], [1, -23], [3, -24], [0, -23], [1, -24], [4, -26], [3, -24], [2, -22], [2, -21], [4, -23], [0, -22], [-2, -21], [0, -22], [3, -25], [0, -24], [-2, -22], [1, -22], [2, -24], [1, -23], [1, -21], [1, -22], [3, -26], [2, -24], [2, -22], [2, -22], [0, -26], [0, -23], [0, -21], [1, -23], [2, -25], [2, -23], [1, -21], [1, -21], [-1, -24], [-1, -23], [0, -21], [-1, -22], [-2, -26], [-2, -24], [-2, -22], [-1, -22], [-4, -23], [0, -22], [2, -21], [0, -22], [-3, -25], [0, -24], [2, -22], [0, -22], [-1, -23], [-2, -24], [1, -23], [-1, -24], [-3, -26], [-2, -24], [-1, -22], [-1, -21], [0, -19], [0, -19], [0, -19], [-1, -21], [-1, -21], [-1, -21], [-2, -21], [-2, -21], [-2, -21], [3, -19], [3, -19], [3, -19], [1, -20], [1, -20], [1, -20], [-3, -19], [-3, -19], [-3, -19], [3, -21], [3, -21], [3, -21], [2, -21], [2, -21], [2, -21], [0, -22], [-1, -16], [0, -22], [0, -22], [-1, -16], [0, -22], [1, -20], [-1, -16], [1, -20], [1, -20], [-1, -16], [1, -20], [0, -20], [1, -16], [0, -20], [0, -20], [1, -16], [0, -20], [0, -22], [1, -16], [0, -22], [0, -22], [1, -16], [0, -22], [0, -23], [0, -24], [1, -24], [1, -25], [1, -25], [1, -24], [0, -23], [0, -24], [1, -24], [1, -25], [1, -25], [1, -24], [-1, -24], [-1, -24], [-1, -25], [1, -25], [1, -25], [1, -24], [-1, -24], [-1, -24], [-1, -25], [1, -25], [1, -25], [1, -24], [1, -24], [1, -24], [1, -25], [0, -25], [0, -25], [0, -24], [1, -24], [1, -24], [1, -25], [0, -25], [0, -25], [0, -24], [1, -23], [1, -24], [0, -24], [0, -25], [0, -25], [-1, -24], [1, -23], [1, -24], [0, -24], [0, -25], [0, -25], [-1, -24], [2, -26], [-2, -27], [2, -37], [-1, -19], [-2, -19], [2, -26], [-2, -27], [2, -37], [-1, -19], [-2, -19], [2, -25], [1, -25], [4, -32], [-6, -28], [-6, -27], [2, -25], [1, -25], [4, -32], [-6, -28], [-6, -27], [-1, -25], [-1, -25], [-4, -32], [6, -28], [7, -27], [-1, -25], [-1, -25], [-4, -32], [6, -28], [7, -27], [-2, -26], [2, -27], [-1, -37], [1, -19], [2, -19], [-2, -26], [2, -27], [-1, -37], [1, -19], [2, -19], [6, -25], [9, -25], [6, -25], [6, -25], [9, -25], [6, -25], [3, -21], [6, -21], [3, -21], [3, -21], [6, -21], [3, -21], [-2, -21], [-5, -21], [-2, -21], [-2, -21], [-5, -21], [-2, -21], [-6, -25], [-9, -25], [-6, -25], [-6, -25], [-9, -25], [-6, -25], [10, -23], [10, -23], [6, -14], [6, -14], [-6, -14], [-6, -14], [-9, -23], [-9, -23], [-5, 3], [-5, 3], [-2, 0], [-2, 0], [2, 0], [2, 0], [6, 3], [6, 3], [2, -26], [2, -26], [2, -26], [2, -26], [2, -26], [2, -26], [2, -26], [2, -26], [-1, -26], [1, -25], [1, -24], [1, -24], [0, -25], [-1, -26], [2, -30], [0, -30], [-1, -30], [-1, -26], [1, -25], [1, -24], [1, -24], [0, -25], [-1, -26], [2, -30], [0, -30], [-1, -30], [0, -22], [1, -21], [2, -19], [2, -19], [3, -19], [-4, -20], [5, -25], [4, -25], [2, -25], [0, -22], [1, -21], [2, -19], [2, -19], [3, -19], [-4, -20], [5, -25], [4, -25], [2, -25], [1, -22], [-1, -21], [-2, -19], [-2, -19], [-2, -19], [4, -20], [-4, -25], [-3, -25], [-1, -25], [1, -22], [-1, -21], [-2, -19], [-2, -19], [-2, -19], [4, -20], [-4, -25], [-3, -25], [-1, -25], [1, -26], [-1, -25], [-1, -24], [-1, -24], [1, -25], [1, -26], [-1, -30], [1, -30], [2, -30], [1, -26], [-1, -25], [-1, -24], [-1, -24], [1, -25], [1, -26], [-1, -30], [1, -30], [2, -30], [0, -27], [3, -31], [4, -32], [4, -32], [3, -31], [-2, -29], [-6, -24], [-7, -24], [0, -27], [3, -31], [4, -32], [4, -32], [3, -31], [-2, -29], [-6, -24], [-7, -24], [-2, -24], [-1, -24], [1, -24], [1, -24], [-1, -23], [-2, -23], [-4, -22], [-4, -22], [-2, -24], [-1, -24], [1, -24], [1, -24], [-1, -23], [-2, -23], [-4, -22], [-4, -22], [3, -24], [2, -24], [0, -24], [0, -24], [2, -23], [2, -23], [5, -22], [4, -22], [3, -24], [2, -24], [0, -24], [0, -24], [2, -23], [2, -23], [5, -22], [4, -22], [0, -27], [-2, -31], [-3, -32], [-3, -32], [-2, -31], [2, -29], [6, -24], [8, -24], [0, -27], [-2, -31], [-3, -32], [-3, -32], [-2, -31], [2, -29], [6, -24], [8, -24], [-9, -20], [-1, -26], [1, -24], [0, -25], [2, -30], [-1, -30], [-9, -20], [-1, -26], [1, -24], [0, -25], [2, -30], [-1, -30], [-7, -27], [0, -22], [2, -19], [3, -19], [5, -25], [2, -25], [-7, -27], [0, -22], [2, -19], [3, -19], [5, -25], [2, -25], [8, -27], [1, -22], [-2, -19], [-2, -19], [-4, -25], [-1, -25], [8, -27], [1, -22], [-2, -19], [-2, -19], [-4, -25], [-1, -25], [10, -20], [1, -26], [-1, -24], [1, -25], [-1, -30], [2, -30], [10, -20], [1, -26], [-1, -24], [1, -25], [-1, -30], [2, -30]],
  anchorHead: [[1, -57], [-3, -58], [5, -58], [-3, -58], [-3, -58], [1, -57], [-4, -58], [12, -74], [-4, -58], [14, -74], [14, -73], [-3, -58], [12, -73], [-10, -74], [12, -74], [-13, -74], [3, -58], [9, -73], [5, -58], [5, -58], [-11, -74], [4, -58], [-1, -57], [4, -58], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [13, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [4, -56], [4, -55], [4, -53], [4, -54], [4, -56], [4, -55], [4, -53], [4, -54], [1, -41], [-4, -42], [5, -42], [-4, -42], [-4, -42], [0, -41], [-2, -42], [14, -58], [-2, -42], [11, -58], [11, -57], [-5, -42], [12, -57], [-10, -58], [12, -58], [-11, -58], [5, -42], [11, -57], [3, -42], [3, -42], [-13, -58], [4, -42], [0, -41], [4, -42], [-4, -67], [-13, -42], [-4, -67], [-4, -67], [-13, -42], [-4, -67], [-10, -67], [-12, -45], [-10, -67], [-10, -67], [-12, -45], [-10, -67], [11, -67], [13, -45], [11, -67], [11, -67], [13, -45], [11, -67], [5, -67], [14, -42], [5, -67], [5, -67], [14, -42], [5, -67], [-3, -54], [-3, -55], [-3, -56], [-3, -58], [-3, -58], [-3, -56], [-3, -54], [-3, -55], [-3, -56], [-3, -58], [-3, -58], [-3, -56], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [4, -54], [4, -55], [4, -56], [4, -58], [4, -58], [4, -56], [4, -54], [4, -55], [4, -56], [4, -58], [4, -58], [4, -56], [-4, -58], [-7, -58], [-5, -60], [-11, -45], [-11, -45], [-4, -58], [-7, -58], [-5, -60], [-11, -45], [-11, -45], [13, -74], [15, -75], [18, -75], [-13, -64], [-13, -63], [13, -74], [15, -75], [18, -75], [-13, -64], [-13, -63], [-12, -74], [-14, -75], [-17, -75], [14, -64], [14, -63], [-12, -74], [-14, -75], [-17, -75], [14, -64], [14, -63], [5, -58], [8, -58], [6, -60], [12, -45], [12, -45], [5, -58], [8, -58], [6, -60], [12, -45], [12, -45], [21, -69], [28, -68], [21, -69], [21, -69], [28, -68], [21, -69], [14, -71], [20, -70], [14, -71], [14, -71], [20, -70], [14, -71], [-13, -71], [-19, -70], [-13, -71], [-13, -71], [-19, -70], [-13, -71], [-20, -69], [-27, -68], [-20, -69], [-20, -69], [-27, -68], [-20, -69], [30, -66], [30, -66], [26, -61], [26, -61], [-25, -61], [-25, -61], [-29, -66], [-29, -66], [35, -19], [35, -19], [42, 23], [42, 23], [-41, 23], [-41, 23], [-34, -19], [-34, -19], [-3, -58], [-3, -58], [-3, -58], [-3, -58], [-3, -58], [-3, -58], [-3, -58], [-3, -58], [-5, -56], [-3, -55], [-2, -52], [-2, -52], [-6, -54], [-6, -57], [-8, -57], [-9, -57], [-9, -57], [-5, -56], [-3, -55], [-2, -52], [-2, -52], [-6, -54], [-6, -57], [-8, -57], [-9, -57], [-9, -57], [11, -69], [13, -67], [14, -64], [14, -64], [12, -64], [5, -65], [7, -66], [8, -66], [8, -66], [11, -69], [13, -67], [14, -64], [14, -64], [12, -64], [5, -65], [7, -66], [8, -66], [8, -66], [-10, -69], [-12, -67], [-13, -64], [-13, -64], [-11, -64], [-4, -65], [-6, -66], [-7, -66], [-7, -66], [-10, -69], [-12, -67], [-13, -64], [-13, -64], [-11, -64], [-4, -65], [-6, -66], [-7, -66], [-7, -66], [6, -56], [4, -55], [3, -52], [3, -52], [7, -54], [7, -57], [9, -57], [10, -57], [10, -57], [6, -56], [4, -55], [3, -52], [3, -52], [7, -54], [7, -57], [9, -57], [10, -57], [10, -57], [-4, -55], [-2, -57], [-2, -60], [-2, -60], [-3, -58], [-7, -56], [-23, -49], [-22, -49], [-4, -55], [-2, -57], [-2, -60], [-2, -60], [-3, -58], [-7, -56], [-23, -49], [-22, -49], [9, -71], [13, -71], [16, -71], [16, -71], [12, -70], [8, -70], [-1, -69], [0, -69], [9, -71], [13, -71], [16, -71], [16, -71], [12, -70], [8, -70], [-1, -69], [0, -69], [-8, -71], [-12, -71], [-15, -71], [-15, -71], [-11, -70], [-7, -70], [2, -69], [1, -69], [-8, -71], [-12, -71], [-15, -71], [-15, -71], [-11, -70], [-7, -70], [2, -69], [1, -69], [5, -55], [3, -57], [3, -60], [3, -60], [4, -58], [8, -56], [24, -49], [23, -49], [5, -55], [3, -57], [3, -60], [3, -60], [4, -58], [8, -56], [24, -49], [23, -49], [-12, -50], [-5, -56], [-2, -52], [-6, -54], [-8, -57], [-9, -57], [-12, -50], [-5, -56], [-2, -52], [-6, -54], [-8, -57], [-9, -57], [6, -74], [11, -69], [14, -64], [12, -64], [7, -66], [8, -66], [6, -74], [11, -69], [14, -64], [12, -64], [7, -66], [8, -66], [-5, -74], [-10, -69], [-13, -64], [-11, -64], [-6, -66], [-7, -66], [-5, -74], [-10, -69], [-13, -64], [-11, -64], [-6, -66], [-7, -66], [13, -50], [6, -56], [3, -52], [7, -54], [9, -57], [10, -57], [13, -50], [6, -56], [3, -52], [7, -54], [9, -57], [10, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87]
};

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 73, 114, 145, 185, 225, 266, 307, 349, 389, 430, 471, 513, 557, 600, 641, 681, 721, 761, 801, 846, 896, 936, 977, 1032, 1082, 1122, 1173, 1231, 1266, 1309, 1356, 1410, 1464, 1508, 1547, 1584, 1622, 1661, 1698, 1734, 1772, 1811, 1849, 1885, 1928, 1972, 2015, 2060, 2110, 2145, 2185, 2223, 2262, 2300, 2339, 2380, 2420, 2458, 2495, 2530, 2564, 2597, 2632, 2668, 2705, 2740, 2800, 2853, 2913, 2967, 2998, 3032, 3071, 3131, 3182, 3218, 3254, 3289, 3326, 3368, 3410, 3464, 3522, 3565, 3609, 3654, 3696, 3745, 3794, 3843, 3882, 3921, 3957, 4002, 4049, 4097, 4145, 4189, 4237, 4288, 4344, 4398, 4454, 4492, 4531, 4568, 4610, 4653, 4695, 4744, 4790, 4834, 4875, 4909, 4944, 4993, 5030, 5074, 5112, 5143],
  widths: [38, 35, 41, 31, 40, 40, 41, 41, 42, 40, 41, 41, 42, 44, 43, 41, 40, 40, 40, 40, 45, 50, 40, 41, 55, 50, 40, 51, 58, 35, 43, 47, 54, 54, 44, 39, 37, 38, 39, 37, 36, 38, 39, 38, 36, 43, 44, 43, 45, 50, 35, 40, 38, 39, 38, 39, 41, 40, 38, 37, 35, 34, 33, 35, 36, 37, 35, 60, 53, 60, 54, 31, 34, 39, 60, 51, 36, 36, 35, 37, 42, 42, 54, 58, 43, 44, 45, 42, 49, 49, 49, 39, 39, 36, 45, 47, 48, 48, 44, 48, 51, 56, 54, 56, 38, 39, 37, 42, 43, 42, 49, 46, 44, 41, 34, 35, 49, 37, 44, 38, 31, 31],
  heights: [73, 72, 70, 71, 71, 77, 71, 69, 70, 77, 72, 69, 69, 74, 71, 69, 68, 75, 73, 66, 66, 68, 68, 66, 65, 69, 68, 67, 65, 76, 70, 69, 72, 72, 74, 75, 77, 74, 71, 69, 73, 71, 68, 67, 69, 43, 45, 47, 51, 44, 62, 56, 67, 55, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 72, 70, 66, 69, 71, 72, 71, 68, 72, 69, 69, 66, 67, 66, 61, 62, 49, 45, 73, 73, 73, 70, 83, 86, 87, 74, 75, 75, 70, 82, 82, 80, 70, 70, 77, 68, 68, 68, 72, 73, 79, 77, 72, 75, 61, 74, 72, 73, 72, 70, 68, 76, 72, 72, 71, 71],
  bodyOffsets: [[-2, -24], [-2, -24], [-2, -24], [-3, -25], [-3, -25], [-3, -25], [-5, -26], [-5, -26], [-5, -26], [-1, -25], [-1, -25], [-1, -25], [0, -25], [0, -25], [0, -25], [-1, -25], [-1, -25], [-1, -25], [3, -26], [3, -26], [3, -26], [1, -25], [1, -25], [1, -25], [-3, -22], [-1, -24], [0, -23], [3, -24], [4, -22], [3, -24], [0, -23], [-2, -24], [0, -23], [1, -24], [2, -23], [1, -25], [2, -23], [1, -23], [-2, -25], [-4, -26], [-1, -25], [2, -24], [-1, -23], [1, -24], [7, -24], [7, -24], [-1, -22], [-2, -24], [2, -23], [6, -25], [8, -23], [5, -23], [6, -25], [5, -23], [4, -20], [3, -20], [1, -24], [0, -24], [0, -23], [-2, -22], [-1, -25], [0, -26], [0, -24], [1, -24], [-1, -23], [-5, -25], [-7, -23], [-5, -23], [-6, -25], [-5, -23], [-3, -20], [-2, -20], [1, -25], [-2, -24], [2, -23], [0, -24], [-7, -24], [-7, -24], [2, -22], [2, -24], [0, -23], [0, -24], [-1, -23], [-1, -25], [-2, -23], [-1, -23], [2, -25], [5, -26], [2, -8], [2, -8], [2, -8], [1, -8], [1, -8], [1, -8], [-1, -8], [-1, -8], [-1, -8], [-2, -5], [-2, -5], [-2, -5], [-6, -8], [-6, -8], [-6, -8], [2, -5], [2, -5], [2, -5], [0, -8], [0, -8], [0, -8], [0, -8], [0, -8], [0, -8], [-1, -13], [-4, -10], [-1, -13], [-1, -13], [-4, -10], [-1, -13], [-3, -15], [-3, -9], [-3, -15], [-3, -15], [-3, -9], [-3, -15], [3, -15], [4, -9], [3, -15], [3, -15], [4, -9], [3, -15], [2, -13], [4, -10], [2, -13], [2, -13], [4, -10], [2, -13], [-8, -25], [-8, -25], [-8, -25], [-8, -25], [-8, -25], [-7, -25], [-8, -25], [-8, -25], [-8, -25], [-8, -25], [-8, -25], [-7, -25], [-4, -26], [-6, -26], [-7, -26], [-8, -26], [-8, -26], [-7, -26], [-4, -26], [-6, -26], [-7, -26], [-8, -26], [-8, -26], [-7, -26], [5, -26], [6, -26], [8, -26], [9, -26], [8, -26], [8, -26], [5, -26], [6, -26], [8, -26], [9, -26], [8, -26], [8, -26], [8, -25], [9, -25], [9, -25], [8, -25], [8, -25], [8, -25], [8, -25], [9, -25], [9, -25], [8, -25], [8, -25], [8, -25], [-1, -25], [3, -25], [2, -28], [-2, -18], [-3, -19], [-1, -25], [3, -25], [2, -28], [-2, -18], [-3, -19], [1, -26], [0, -25], [3, -24], [-10, -26], [-10, -24], [1, -26], [0, -25], [3, -24], [-10, -26], [-10, -24], [0, -26], [0, -25], [-2, -24], [10, -26], [11, -24], [0, -26], [0, -25], [-2, -24], [10, -26], [11, -24], [2, -25], [-3, -25], [-1, -28], [2, -18], [3, -19], [2, -25], [-3, -25], [-1, -28], [2, -18], [3, -19], [-4, -23], [-4, -22], [-4, -23], [-4, -23], [-4, -22], [-4, -23], [2, -21], [2, -22], [2, -21], [2, -21], [2, -22], [2, -21], [-1, -21], [-1, -22], [-1, -21], [-1, -21], [-1, -22], [-1, -21], [4, -23], [4, -22], [4, -23], [4, -23], [4, -22], [4, -23], [-3, -19], [-3, -19], [3, -19], [3, -19], [-3, -19], [-3, -19], [3, -19], [3, -19], [-1, -12], [-1, -12], [-4, -11], [-4, -11], [4, -11], [4, -11], [1, -12], [1, -12], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-9, -25], [2, -25], [2, -25], [2, -25], [-10, -24], [-12, -30], [-12, -32], [-12, -32], [-12, -32], [-9, -25], [2, -25], [2, -25], [2, -25], [-10, -24], [-12, -30], [-12, -32], [-12, -32], [-12, -32], [-7, -26], [-9, -26], [-8, -26], [-8, -26], [-12, -24], [-14, -30], [-14, -31], [-14, -31], [-14, -31], [-7, -26], [-9, -26], [-8, -26], [-8, -26], [-12, -24], [-14, -30], [-14, -31], [-14, -31], [-14, -31], [8, -26], [10, -26], [8, -26], [8, -26], [13, -24], [15, -30], [14, -31], [14, -31], [14, -31], [8, -26], [10, -26], [8, -26], [8, -26], [13, -24], [15, -30], [14, -31], [14, -31], [14, -31], [10, -25], [-2, -25], [-1, -25], [-1, -25], [10, -24], [13, -30], [13, -32], [13, -32], [13, -32], [10, -25], [-2, -25], [-1, -25], [-1, -25], [10, -24], [13, -30], [13, -32], [13, -32], [13, -32], [-6, -24], [-4, -24], [1, -27], [7, -23], [8, -23], [8, -23], [8, -23], [7, -23], [-6, -24], [-4, -24], [1, -27], [7, -23], [8, -23], [8, -23], [8, -23], [7, -23], [-8, -25], [-7, -24], [-2, -28], [0, -22], [0, -20], [0, -20], [0, -20], [0, -21], [-8, -25], [-7, -24], [-2, -28], [0, -22], [0, -20], [0, -20], [0, -20], [0, -21], [8, -25], [8, -24], [3, -28], [0, -22], [1, -20], [1, -20], [1, -20], [0, -21], [8, -25], [8, -24], [3, -28], [0, -22], [1, -20], [1, -20], [1, -20], [0, -21], [6, -24], [4, -24], [0, -27], [-7, -23], [-8, -23], [-8, -23], [-8, -23], [-7, -23], [6, -24], [4, -24], [0, -27], [-7, -23], [-8, -23], [-8, -23], [-8, -23], [-7, -23], [1, -29], [-2, -25], [-4, -24], [-5, -24], [-4, -25], [-3, -24], [1, -29], [-2, -25], [-4, -24], [-5, -24], [-4, -25], [-3, -24], [5, -30], [1, -26], [1, -24], [1, -24], [-1, -26], [-1, -25], [5, -30], [1, -26], [1, -24], [1, -24], [-1, -26], [-1, -25], [-4, -30], [0, -26], [-1, -24], [-1, -24], [2, -26], [2, -25], [-4, -30], [0, -26], [-1, -24], [-1, -24], [2, -26], [2, -25], [0, -29], [2, -25], [4, -24], [6, -24], [4, -25], [4, -24], [0, -29], [2, -25], [4, -24], [6, -24], [4, -25], [4, -24]],
  anchorHead: [[0, -56], [-4, -57], [4, -57], [-6, -57], [-6, -57], [-1, -56], [-6, -57], [10, -73], [-6, -57], [10, -73], [10, -72], [-6, -57], [10, -72], [-12, -73], [10, -73], [-12, -73], [4, -57], [10, -72], [4, -57], [4, -57], [-12, -73], [4, -57], [0, -56], [4, -57], [0, -56], [0, -55], [0, -53], [0, -54], [0, -56], [0, -55], [0, -53], [0, -54], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [11, -72], [11, -71], [11, -69], [11, -70], [11, -72], [11, -71], [11, -69], [11, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [0, -25], [-4, -26], [4, -26], [-5, -26], [-5, -26], [0, -25], [-6, -26], [10, -42], [-6, -26], [11, -42], [11, -41], [-5, -26], [11, -41], [-11, -42], [11, -42], [-11, -42], [5, -26], [10, -41], [6, -26], [6, -26], [-10, -42], [7, -26], [3, -25], [7, -26], [-9, -59], [-18, -38], [-9, -59], [-9, -59], [-18, -38], [-9, -59], [-11, -62], [-10, -36], [-11, -62], [-11, -62], [-10, -36], [-11, -62], [12, -62], [11, -36], [12, -62], [12, -62], [11, -36], [12, -62], [10, -59], [19, -38], [10, -59], [10, -59], [19, -38], [10, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [3, -76], [4, -76], [5, -76], [4, -76], [3, -76], [2, -76], [3, -76], [4, -76], [5, -76], [4, -76], [3, -76], [2, -76], [-2, -76], [-3, -76], [-4, -76], [-3, -76], [-2, -76], [-1, -76], [-2, -76], [-3, -76], [-4, -76], [-3, -76], [-2, -76], [-1, -76], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [-4, -57], [-2, -56], [-3, -56], [-16, -45], [-17, -43], [-4, -57], [-2, -56], [-3, -56], [-16, -45], [-17, -43], [12, -73], [14, -73], [17, -72], [-2, -69], [-4, -68], [12, -73], [14, -73], [17, -72], [-2, -69], [-4, -68], [-11, -73], [-13, -73], [-16, -72], [3, -69], [5, -68], [-11, -73], [-13, -73], [-16, -72], [3, -69], [5, -68], [5, -57], [3, -56], [4, -56], [17, -45], [18, -43], [5, -57], [3, -56], [4, -56], [17, -45], [18, -43], [10, -68], [13, -66], [10, -68], [10, -68], [13, -66], [10, -68], [8, -76], [10, -76], [8, -76], [8, -76], [10, -76], [8, -76], [-7, -76], [-9, -76], [-7, -76], [-7, -76], [-9, -76], [-7, -76], [-9, -68], [-12, -66], [-9, -68], [-9, -68], [-12, -66], [-9, -68], [16, -61], [16, -61], [15, -71], [15, -71], [-14, -71], [-14, -71], [-15, -61], [-15, -61], [35, -33], [35, -33], [34, 8], [34, 8], [-33, 8], [-33, 8], [-34, -33], [-34, -33], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-21, -59], [-22, -61], [-23, -61], [-23, -61], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-21, -59], [-22, -61], [-23, -61], [-23, -61], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -72], [-8, -74], [-9, -74], [-9, -74], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -72], [-8, -74], [-9, -74], [-9, -74], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -72], [9, -74], [10, -74], [10, -74], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -72], [9, -74], [10, -74], [10, -74], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [22, -59], [23, -61], [24, -61], [24, -61], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [22, -59], [23, -61], [24, -61], [24, -61], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [17, -66], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [17, -66], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [-16, -66], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-16, -66], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 1, 1, 1, 1, 1, 1, 1, 1, 84, 85, 86, 86, 87, 88, 89, 90, 90, 84, 85, 86, 86, 87, 88, 89, 90, 90, 91, 92, 93, 93, 94, 95, 96, 97, 97, 91, 92, 93, 93, 94, 95, 96, 97, 97, 91, 92, 93, 93, 94, 95, 96, 97, 97, 91, 92, 93, 93, 94, 95, 96, 97, 97, 84, 85, 86, 86, 87, 88, 89, 90, 90, 84, 85, 86, 86, 87, 88, 89, 90, 90, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 104, 105, 106, 107, 108, 108, 108, 109, 104, 105, 106, 107, 108, 108, 108, 109, 104, 105, 106, 107, 108, 108, 108, 109, 104, 105, 106, 107, 108, 108, 108, 109, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115]
};

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 87, 128, 164, 212, 251, 290, 327, 365, 405, 445, 484, 523, 559, 606, 650, 691, 725, 767, 810, 848, 878, 924, 971, 1008, 1037, 1083, 1135, 1175, 1213, 1252, 1291, 1327, 1366, 1413, 1460, 1496, 1539, 1583, 1625, 1667, 1709, 1753, 1793, 1835, 1883, 1927, 1968, 2016, 2064, 2104, 2145, 2188, 2235, 2287, 2337, 2384, 2429, 2475, 2524, 2573, 2622, 2669, 2713, 2756, 2803, 2855, 2911, 2969, 3024, 3080, 3125, 3177, 3231, 3291, 3346, 3393, 3441, 3476, 3518, 3567, 3609, 3682, 3752, 3790, 3827, 3863, 3904, 3948, 3994, 4053, 4108, 4148, 4190, 4230, 4273, 4316, 4369, 4434, 4489, 4536, 4578, 4621, 4671, 4720, 4769, 4818, 4864, 4910, 4960, 5016, 5073, 5126, 5176, 5219, 5264, 5308, 5378, 5418, 5463, 5519],
  widths: [44, 43, 41, 36, 48, 39, 39, 37, 38, 40, 40, 39, 39, 36, 47, 44, 41, 34, 42, 43, 38, 30, 46, 47, 37, 29, 46, 52, 40, 38, 39, 39, 36, 39, 47, 47, 36, 43, 44, 42, 42, 42, 44, 40, 42, 48, 44, 41, 48, 48, 40, 41, 43, 47, 52, 50, 47, 45, 46, 49, 49, 49, 47, 44, 43, 47, 52, 56, 58, 55, 56, 45, 52, 54, 60, 55, 47, 48, 35, 42, 49, 42, 73, 70, 38, 37, 36, 41, 44, 46, 59, 55, 40, 42, 40, 43, 43, 53, 65, 55, 47, 42, 43, 50, 49, 49, 49, 46, 46, 50, 56, 57, 53, 50, 43, 45, 44, 70, 40, 45, 56, 78],
  heights: [78, 75, 72, 75, 76, 73, 70, 68, 72, 73, 69, 68, 71, 71, 68, 65, 67, 68, 67, 68, 71, 69, 68, 66, 65, 66, 63, 66, 67, 75, 72, 69, 65, 70, 70, 69, 71, 74, 71, 69, 70, 74, 72, 70, 70, 48, 48, 49, 51, 51, 61, 56, 65, 57, 73, 75, 75, 76, 75, 74, 71, 73, 73, 74, 73, 72, 73, 73, 79, 65, 59, 69, 70, 73, 57, 56, 69, 67, 67, 65, 66, 66, 54, 60, 73, 74, 69, 69, 70, 68, 67, 66, 73, 73, 73, 73, 74, 75, 69, 67, 74, 71, 72, 74, 75, 65, 55, 72, 72, 71, 71, 62, 61, 60, 75, 75, 75, 74, 76, 76, 77, 71],
  bodyOffsets: [[0, -24], [0, -24], [0, -24], [-3, -25], [-3, -25], [-3, -25], [-5, -24], [-5, -24], [-5, -24], [-3, -24], [-3, -24], [-3, -24], [-1, -25], [-1, -25], [-1, -25], [2, -24], [2, -24], [2, -24], [4, -24], [4, -24], [4, -24], [3, -25], [3, -25], [3, -25], [-1, -24], [1, -25], [2, -24], [1, -23], [-2, -25], [-3, -24], [-3, -23], [-3, -22], [0, -26], [-3, -27], [-1, -25], [1, -25], [-1, -27], [0, -25], [4, -23], [1, -23], [1, -24], [-4, -24], [-2, -22], [0, -23], [1, -25], [-4, -25], [-1, -22], [-1, -22], [0, -23], [3, -23], [4, -22], [1, -25], [-2, -26], [-3, -25], [-2, -23], [-2, -23], [2, -23], [4, -23], [5, -22], [3, -23], [0, -23], [-3, -23], [-4, -22], [-1, -23], [0, -23], [-2, -23], [-3, -22], [-1, -25], [3, -26], [4, -25], [3, -23], [2, -23], [-1, -24], [4, -24], [3, -22], [1, -23], [0, -25], [4, -25], [1, -22], [1, -22], [0, -26], [4, -27], [1, -25], [0, -25], [1, -27], [0, -25], [-3, -23], [-1, -23], [1, -13], [1, -13], [1, -13], [-1, -13], [-1, -13], [-1, -13], [0, -11], [0, -11], [0, -11], [0, -10], [0, -10], [0, -10], [-5, -10], [-5, -10], [-5, -10], [0, -10], [0, -10], [0, -10], [1, -11], [1, -11], [1, -11], [1, -13], [1, -13], [1, -13], [-3, -20], [-3, -18], [-3, -20], [-3, -20], [-3, -18], [-3, -20], [-2, -19], [-4, -15], [-2, -19], [-2, -19], [-4, -15], [-2, -19], [3, -19], [5, -15], [3, -19], [3, -19], [5, -15], [3, -19], [3, -20], [4, -18], [3, -20], [3, -20], [4, -18], [3, -20], [1, -27], [1, -28], [1, -28], [1, -29], [0, -28], [1, -28], [1, -27], [1, -28], [1, -28], [1, -29], [0, -28], [1, -28], [3, -27], [4, -28], [4, -28], [2, -29], [2, -28], [2, -28], [3, -27], [4, -28], [4, -28], [2, -29], [2, -28], [2, -28], [-2, -27], [-3, -28], [-3, -28], [-2, -29], [-1, -28], [-1, -28], [-2, -27], [-3, -28], [-3, -28], [-2, -29], [-1, -28], [-1, -28], [-1, -27], [-1, -28], [0, -28], [0, -29], [0, -28], [0, -28], [-1, -27], [-1, -28], [0, -28], [0, -29], [0, -28], [0, -28], [2, -30], [3, -32], [0, -35], [-10, -17], [-14, -14], [2, -30], [3, -32], [0, -35], [-10, -17], [-14, -14], [5, -22], [5, -23], [6, -26], [0, -19], [0, -19], [5, -22], [5, -23], [6, -26], [0, -19], [0, -19], [-4, -22], [-5, -23], [-6, -26], [0, -19], [1, -19], [-4, -22], [-5, -23], [-6, -26], [0, -19], [1, -19], [-2, -30], [-3, -32], [0, -35], [11, -17], [14, -14], [-2, -30], [-3, -32], [0, -35], [11, -17], [14, -14], [-6, -27], [-4, -27], [-6, -27], [-6, -27], [-4, -27], [-6, -27], [2, -23], [4, -21], [2, -23], [2, -23], [4, -21], [2, -23], [-1, -23], [-4, -21], [-1, -23], [-1, -23], [-4, -21], [-1, -23], [7, -27], [4, -27], [7, -27], [7, -27], [4, -27], [7, -27], [4, -28], [4, -28], [7, -21], [7, -21], [-7, -21], [-7, -21], [-3, -28], [-3, -28], [1, 1], [1, 1], [-2, 0], [-2, 0], [2, 0], [2, 0], [0, 1], [0, 1], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -25], [-3, -22], [-2, -23], [-1, -27], [4, -28], [5, -29], [5, -29], [2, -28], [-12, -16], [-11, -16], [-3, -22], [-2, -23], [-1, -27], [4, -28], [5, -29], [5, -29], [2, -28], [-12, -16], [-11, -16], [-1, -26], [0, -26], [3, -26], [4, -26], [5, -27], [5, -27], [6, -27], [-7, -23], [-10, -21], [-1, -26], [0, -26], [3, -26], [4, -26], [5, -27], [5, -27], [6, -27], [-7, -23], [-10, -21], [1, -26], [0, -26], [-3, -26], [-3, -26], [-4, -27], [-4, -27], [-5, -27], [8, -23], [11, -21], [1, -26], [0, -26], [-3, -26], [-3, -26], [-4, -27], [-4, -27], [-5, -27], [8, -23], [11, -21], [3, -22], [3, -23], [1, -27], [-3, -28], [-5, -29], [-5, -29], [-2, -28], [13, -16], [12, -16], [3, -22], [3, -23], [1, -27], [-3, -28], [-5, -29], [-5, -29], [-2, -28], [13, -16], [12, -16], [1, -27], [3, -28], [1, -27], [1, -28], [-1, -29], [-5, -25], [-5, -20], [-5, -15], [1, -27], [3, -28], [1, -27], [1, -28], [-1, -29], [-5, -25], [-5, -20], [-5, -15], [3, -27], [4, -22], [4, -22], [4, -23], [5, -24], [1, -22], [-1, -21], [-4, -21], [3, -27], [4, -22], [4, -22], [4, -23], [5, -24], [1, -22], [-1, -21], [-4, -21], [-2, -27], [-4, -22], [-4, -22], [-4, -23], [-5, -24], [0, -22], [2, -21], [4, -21], [-2, -27], [-4, -22], [-4, -22], [-4, -23], [-5, -24], [0, -22], [2, -21], [4, -21], [-1, -27], [-2, -28], [-1, -27], [0, -28], [1, -29], [6, -25], [6, -20], [6, -15], [-1, -27], [-2, -28], [-1, -27], [0, -28], [1, -29], [6, -25], [6, -20], [6, -15], [-3, -25], [-2, -25], [-1, -25], [-2, -29], [-3, -17], [-3, -17], [-3, -25], [-2, -25], [-1, -25], [-2, -29], [-3, -17], [-3, -17], [-3, -24], [4, -25], [7, -25], [2, -25], [7, -24], [7, -24], [-3, -24], [4, -25], [7, -25], [2, -25], [7, -24], [7, -24], [3, -24], [-4, -25], [-6, -25], [-2, -25], [-7, -24], [-7, -24], [3, -24], [-4, -25], [-6, -25], [-2, -25], [-7, -24], [-7, -24], [4, -25], [3, -25], [2, -25], [2, -29], [3, -17], [3, -17], [4, -25], [3, -25], [2, -25], [2, -29], [3, -17], [3, -17]],
  anchorHead: [[0, -56], [-4, -57], [6, -57], [-5, -57], [-5, -57], [0, -56], [-5, -57], [11, -73], [-5, -57], [11, -73], [11, -72], [-5, -57], [11, -72], [-11, -73], [11, -73], [-11, -73], [5, -57], [11, -72], [4, -57], [4, -57], [-12, -73], [5, -57], [0, -56], [5, -57], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [0, -30], [-5, -31], [5, -31], [-5, -31], [-5, -31], [0, -30], [-5, -31], [11, -47], [-5, -31], [12, -47], [12, -46], [-4, -31], [11, -46], [-11, -47], [11, -47], [-11, -47], [6, -31], [11, -46], [6, -31], [7, -31], [-11, -47], [6, -31], [1, -30], [5, -31], [-11, -60], [-16, -44], [-11, -60], [-11, -60], [-16, -44], [-11, -60], [-10, -64], [-11, -44], [-10, -64], [-10, -64], [-11, -44], [-10, -64], [11, -64], [12, -44], [11, -64], [11, -64], [12, -44], [11, -64], [12, -60], [17, -44], [12, -60], [12, -60], [17, -44], [12, -60], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -59], [-4, -58], [13, -72], [14, -73], [14, -74], [14, -75], [14, -74], [13, -73], [13, -72], [14, -73], [14, -74], [14, -75], [14, -74], [13, -73], [-12, -72], [-13, -73], [-13, -74], [-13, -75], [-13, -74], [-12, -73], [-12, -72], [-13, -73], [-13, -74], [-13, -75], [-13, -74], [-12, -73], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [5, -57], [5, -58], [5, -59], [5, -60], [5, -59], [5, -58], [-3, -60], [-2, -61], [0, -64], [-33, -37], [-37, -32], [-3, -60], [-2, -61], [0, -64], [-33, -37], [-37, -32], [15, -69], [16, -70], [16, -71], [4, -60], [1, -58], [15, -69], [16, -70], [16, -71], [4, -60], [1, -58], [-14, -69], [-15, -70], [-15, -71], [-3, -60], [0, -58], [-14, -69], [-15, -70], [-15, -71], [-3, -60], [0, -58], [4, -60], [3, -61], [1, -64], [34, -37], [38, -32], [4, -60], [3, -61], [1, -64], [34, -37], [38, -32], [9, -65], [15, -69], [9, -65], [9, -65], [15, -69], [9, -65], [10, -75], [11, -71], [10, -75], [10, -75], [11, -71], [10, -75], [-9, -75], [-10, -71], [-9, -75], [-9, -75], [-10, -71], [-9, -75], [-8, -65], [-14, -69], [-8, -65], [-8, -65], [-14, -69], [-8, -65], [23, -69], [23, -69], [19, -71], [19, -71], [-18, -71], [-18, -71], [-22, -69], [-22, -69], [37, -15], [37, -15], [36, 24], [36, 24], [-35, 24], [-35, 24], [-36, -15], [-36, -15], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-27, -43], [-26, -42], [-9, -53], [-8, -54], [-6, -56], [1, -57], [2, -58], [2, -58], [-7, -56], [-27, -43], [-26, -42], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [14, -75], [-1, -69], [0, -67], [13, -73], [15, -73], [18, -73], [21, -73], [22, -74], [22, -74], [14, -75], [-1, -69], [0, -67], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-13, -75], [2, -69], [1, -67], [-12, -73], [-14, -73], [-17, -73], [-20, -73], [-21, -74], [-21, -74], [-13, -75], [2, -69], [1, -67], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [28, -43], [27, -42], [10, -53], [9, -54], [7, -56], [0, -57], [-1, -58], [-1, -58], [8, -56], [28, -43], [27, -42], [-4, -57], [-2, -58], [-1, -57], [0, -58], [1, -60], [-24, -37], [-24, -35], [-24, -34], [-4, -57], [-2, -58], [-1, -57], [0, -58], [1, -60], [-24, -37], [-24, -35], [-24, -34], [13, -72], [13, -69], [14, -70], [14, -71], [14, -72], [-1, -69], [-1, -68], [-2, -67], [13, -72], [13, -69], [14, -70], [14, -71], [14, -72], [-1, -69], [-1, -68], [-2, -67], [-12, -72], [-12, -69], [-13, -70], [-13, -71], [-13, -72], [2, -69], [2, -68], [3, -67], [-12, -72], [-12, -69], [-13, -70], [-13, -71], [-13, -72], [2, -69], [2, -68], [3, -67], [5, -57], [3, -58], [2, -57], [1, -58], [0, -60], [25, -37], [25, -35], [25, -34], [5, -57], [3, -58], [2, -57], [1, -58], [0, -60], [25, -37], [25, -35], [25, -34], [-5, -57], [-4, -57], [-3, -57], [-3, -61], [-11, -39], [-11, -39], [-5, -57], [-4, -57], [-3, -57], [-3, -61], [-11, -39], [-11, -39], [11, -73], [15, -74], [16, -74], [17, -74], [10, -67], [10, -67], [11, -73], [15, -74], [16, -74], [17, -74], [10, -67], [10, -67], [-10, -73], [-14, -74], [-15, -74], [-16, -74], [-9, -67], [-9, -67], [-10, -73], [-14, -74], [-15, -74], [-16, -74], [-9, -67], [-9, -67], [6, -57], [5, -57], [4, -57], [4, -61], [12, -39], [12, -39], [6, -57], [5, -57], [4, -57], [4, -61], [12, -39], [12, -39]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 1, 1, 1, 1, 1, 1, 1, 1, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 92, 93, 94, 95, 96, 96, 97, 98, 99, 84, 85, 86, 87, 88, 88, 89, 90, 91, 84, 85, 86, 87, 88, 88, 89, 90, 91, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 60, 107, 108, 109, 110, 111, 112, 113, 54, 100, 101, 102, 103, 104, 105, 106, 54, 100, 101, 102, 103, 104, 105, 106, 1, 114, 115, 116, 117, 117, 1, 114, 115, 116, 117, 117, 3, 118, 119, 120, 121, 121, 3, 118, 119, 120, 121, 121, 3, 118, 119, 120, 121, 121, 3, 118, 119, 120, 121, 121, 1, 114, 115, 116, 117, 117, 1, 114, 115, 116, 117, 117]
};

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 42, 78, 109, 148, 190, 228, 272, 311, 348, 386, 430, 469, 506, 541, 579, 620, 658, 691, 730, 776, 812, 837, 882, 925, 960, 985, 1030, 1074, 1109, 1149, 1190, 1234, 1274, 1310, 1351, 1399, 1442, 1485, 1526, 1564, 1605, 1648, 1689, 1727, 1768, 1816, 1855, 1895, 1946, 2000, 2037, 2074, 2113, 2154, 2203, 2251, 2298, 2346, 2395, 2444, 2487, 2530, 2573, 2616, 2659, 2702, 2750, 2799, 2859, 2919, 2962, 3011, 3068, 3125, 3171, 3216, 3294, 3367, 3418, 3473, 3528, 3576, 3636, 3696, 3741, 3791, 3841, 3882, 3937, 3992, 4036, 4081, 4133, 4185, 4237, 4289, 4341, 4393, 4432, 4468, 4509, 4564, 4619, 4674, 4732, 4789, 4829, 4882, 4923, 4967, 5028, 5090, 5128, 5180, 5218, 5264, 5321],
  widths: [42, 36, 31, 39, 42, 38, 44, 39, 37, 38, 44, 39, 37, 35, 38, 41, 38, 33, 39, 46, 36, 25, 45, 43, 35, 25, 45, 44, 35, 40, 41, 44, 40, 36, 41, 48, 43, 43, 41, 38, 41, 43, 41, 38, 41, 48, 39, 40, 51, 54, 37, 37, 39, 41, 49, 48, 47, 48, 49, 49, 43, 43, 43, 43, 43, 43, 48, 49, 60, 60, 43, 49, 57, 57, 46, 45, 78, 73, 51, 55, 55, 48, 60, 60, 45, 50, 50, 41, 55, 55, 44, 45, 52, 52, 52, 52, 52, 52, 39, 36, 41, 55, 55, 55, 58, 57, 40, 53, 41, 44, 61, 62, 38, 52, 38, 46, 57, 58],
  heights: [76, 73, 71, 72, 73, 74, 71, 76, 77, 74, 71, 76, 77, 73, 70, 72, 76, 75, 72, 68, 74, 73, 72, 72, 70, 70, 69, 69, 71, 73, 75, 74, 69, 72, 73, 71, 72, 77, 74, 70, 73, 77, 73, 70, 73, 55, 56, 54, 51, 46, 69, 52, 71, 61, 69, 70, 71, 71, 70, 69, 73, 74, 74, 74, 74, 73, 65, 65, 61, 59, 68, 69, 65, 64, 73, 70, 50, 56, 72, 72, 73, 70, 64, 61, 80, 79, 79, 72, 67, 66, 70, 70, 66, 68, 67, 67, 66, 66, 68, 67, 68, 68, 67, 67, 68, 66, 69, 72, 71, 71, 65, 63, 71, 71, 70, 72, 75, 74],
  bodyOffsets: [[0, -25], [0, -25], [0, -25], [1, -25], [1, -25], [1, -25], [-1, -27], [-1, -27], [-1, -27], [-1, -26], [-1, -26], [-1, -26], [0, -26], [0, -26], [0, -26], [2, -26], [2, -26], [2, -26], [2, -27], [2, -27], [2, -27], [-1, -25], [-1, -25], [-1, -25], [1, -25], [-1, -25], [-1, -21], [-1, -22], [-2, -25], [0, -25], [1, -21], [1, -22], [2, -24], [1, -25], [1, -22], [2, -21], [2, -23], [-2, -24], [-2, -24], [1, -22], [-1, -25], [-5, -24], [-1, -23], [-1, -25], [0, -27], [-6, -26], [-6, -24], [-3, -24], [-3, -25], [-2, -23], [-2, -23], [-2, -25], [-2, -26], [-3, -24], [-4, -23], [-3, -24], [1, -23], [0, -24], [0, -24], [0, -23], [-1, -23], [0, -24], [0, -24], [0, -23], [3, -25], [3, -23], [2, -23], [2, -25], [2, -26], [4, -24], [4, -23], [4, -24], [2, -25], [6, -24], [2, -23], [2, -25], [1, -27], [7, -26], [6, -24], [4, -24], [-1, -24], [-1, -25], [0, -22], [-2, -21], [-1, -23], [3, -24], [2, -24], [-1, -22], [-1, -11], [-1, -11], [-1, -11], [-4, -10], [-4, -10], [-4, -10], [-6, -9], [-6, -9], [-6, -9], [-7, -12], [-7, -12], [-7, -12], [-4, -13], [-4, -13], [-4, -13], [8, -12], [8, -12], [8, -12], [6, -9], [6, -9], [6, -9], [5, -10], [5, -10], [5, -10], [-1, -23], [-1, -15], [-1, -23], [-1, -23], [-1, -15], [-1, -23], [0, -23], [-1, -18], [0, -23], [0, -23], [-1, -18], [0, -23], [1, -23], [2, -18], [1, -23], [1, -23], [2, -18], [1, -23], [2, -23], [2, -15], [2, -23], [2, -23], [2, -15], [2, -23], [1, -23], [1, -24], [2, -24], [1, -24], [1, -24], [1, -23], [1, -23], [1, -24], [2, -24], [1, -24], [1, -24], [1, -23], [-1, -23], [-1, -24], [-1, -24], [-1, -24], [-1, -24], [-1, -23], [-1, -23], [-1, -24], [-1, -24], [-1, -24], [-1, -24], [-1, -23], [2, -23], [2, -24], [2, -24], [2, -24], [2, -24], [2, -23], [2, -23], [2, -24], [2, -24], [2, -24], [2, -24], [2, -23], [0, -23], [-1, -24], [-1, -24], [-1, -24], [0, -24], [0, -23], [0, -23], [-1, -24], [-1, -24], [-1, -24], [0, -24], [0, -23], [2, -24], [6, -29], [9, -29], [1, -28], [-8, -16], [2, -24], [6, -29], [9, -29], [1, -28], [-8, -16], [4, -25], [6, -24], [7, -24], [-2, -21], [-9, -18], [4, -25], [6, -24], [7, -24], [-2, -21], [-9, -18], [-3, -25], [-6, -24], [-7, -24], [3, -21], [10, -18], [-3, -25], [-6, -24], [-7, -24], [3, -21], [10, -18], [-1, -24], [-5, -29], [-8, -29], [-1, -28], [8, -16], [-1, -24], [-5, -29], [-8, -29], [-1, -28], [8, -16], [0, -26], [2, -26], [0, -26], [0, -26], [2, -26], [0, -26], [4, -25], [6, -25], [4, -25], [4, -25], [6, -25], [4, -25], [-3, -25], [-5, -25], [-3, -25], [-3, -25], [-5, -25], [-3, -25], [0, -26], [-2, -26], [0, -26], [0, -26], [-2, -26], [0, -26], [3, -26], [3, -26], [7, -25], [7, -25], [-6, -25], [-6, -25], [-3, -26], [-3, -26], [0, -8], [0, -8], [8, -5], [8, -5], [-7, -5], [-7, -5], [0, -8], [0, -8], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [2, -24], [6, -29], [9, -29], [1, -28], [-8, -16], [-8, -14], [-8, -14], [-8, -14], [-8, -14], [2, -24], [6, -29], [9, -29], [1, -28], [-8, -16], [-8, -14], [-8, -14], [-8, -14], [-8, -14], [4, -25], [6, -24], [7, -24], [-2, -21], [-9, -18], [-9, -18], [-9, -18], [-9, -18], [-9, -18], [4, -25], [6, -24], [7, -24], [-2, -21], [-9, -18], [-9, -18], [-9, -18], [-9, -18], [-9, -18], [-3, -25], [-6, -24], [-7, -24], [3, -21], [10, -18], [10, -18], [10, -18], [10, -18], [10, -18], [-3, -25], [-6, -24], [-7, -24], [3, -21], [10, -18], [10, -18], [10, -18], [10, -18], [10, -18], [-1, -24], [-5, -29], [-8, -29], [-1, -28], [8, -16], [8, -14], [8, -14], [8, -14], [8, -14], [-1, -24], [-5, -29], [-8, -29], [-1, -28], [8, -16], [8, -14], [8, -14], [8, -14], [8, -14], [4, -29], [8, -29], [-5, -26], [-11, -20], [-11, -19], [-11, -19], [-11, -19], [-11, -19], [4, -29], [8, -29], [-5, -26], [-11, -20], [-11, -19], [-11, -19], [-11, -19], [-11, -19], [3, -24], [2, -23], [-1, -24], [-8, -29], [-8, -28], [-8, -28], [-10, -29], [-9, -28], [3, -24], [2, -23], [-1, -24], [-8, -29], [-8, -28], [-8, -28], [-10, -29], [-9, -28], [-2, -24], [-2, -23], [2, -24], [9, -29], [9, -28], [9, -28], [10, -29], [10, -28], [-2, -24], [-2, -23], [2, -24], [9, -29], [9, -28], [9, -28], [10, -29], [10, -28], [-4, -29], [-7, -29], [5, -26], [11, -20], [11, -19], [11, -19], [11, -19], [11, -19], [-4, -29], [-7, -29], [5, -26], [11, -20], [11, -19], [11, -19], [11, -19], [11, -19], [-1, -25], [-3, -22], [0, -21], [5, -26], [-10, -14], [-11, -13], [-1, -25], [-3, -22], [0, -21], [5, -26], [-10, -14], [-11, -13], [5, -24], [-2, -24], [2, -24], [5, -25], [-9, -26], [-10, -26], [5, -24], [-2, -24], [2, -24], [5, -25], [-9, -26], [-10, -26], [-5, -24], [2, -24], [-2, -24], [-5, -25], [10, -26], [10, -26], [-5, -24], [2, -24], [-2, -24], [-5, -25], [10, -26], [10, -26], [1, -25], [4, -22], [1, -21], [-5, -26], [11, -14], [11, -13], [1, -25], [4, -22], [1, -21], [-5, -26], [11, -14], [11, -13]],
  anchorHead: [[0, -58], [-5, -59], [6, -59], [-5, -59], [-4, -59], [0, -58], [-4, -59], [12, -75], [-5, -59], [11, -75], [11, -74], [-5, -59], [11, -75], [-11, -75], [11, -75], [-10, -75], [6, -59], [12, -75], [5, -59], [6, -59], [-11, -75], [6, -59], [0, -58], [5, -59], [0, -57], [0, -56], [0, -54], [0, -55], [0, -57], [0, -56], [0, -54], [0, -55], [-5, -58], [-5, -57], [-5, -55], [-5, -56], [-5, -58], [-5, -57], [-5, -55], [-5, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [-10, -74], [-10, -73], [-10, -71], [-10, -72], [-10, -74], [-10, -73], [-10, -71], [-10, -72], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [6, -58], [6, -57], [6, -55], [6, -56], [6, -58], [6, -57], [6, -55], [6, -56], [0, -33], [-5, -34], [5, -34], [-5, -34], [-4, -34], [0, -33], [-4, -34], [12, -50], [-5, -34], [11, -50], [11, -50], [-4, -34], [11, -50], [-11, -50], [11, -50], [-10, -50], [6, -34], [12, -50], [5, -34], [6, -34], [-11, -50], [6, -34], [0, -33], [5, -34], [-7, -53], [-14, -40], [-7, -53], [-3, -71], [-14, -40], [-3, -71], [9, -72], [-7, -49], [9, -72], [-5, -75], [-7, -49], [-5, -75], [-8, -72], [8, -49], [-8, -72], [6, -75], [8, -49], [6, -75], [8, -53], [15, -40], [8, -53], [3, -71], [15, -40], [3, -71], [-3, -54], [-3, -55], [-3, -56], [-3, -56], [-3, -55], [-3, -54], [-3, -54], [-3, -55], [-3, -56], [-3, -56], [-3, -55], [-3, -54], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [14, -70], [14, -71], [14, -72], [14, -73], [14, -72], [14, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [-13, -70], [-13, -71], [-13, -72], [-13, -73], [-13, -72], [-13, -71], [4, -54], [4, -55], [4, -56], [4, -56], [4, -55], [4, -54], [4, -54], [4, -55], [4, -56], [4, -56], [4, -55], [4, -54], [-2, -54], [1, -57], [3, -57], [-7, -57], [-23, -35], [-2, -54], [1, -57], [3, -57], [-7, -57], [-23, -35], [14, -69], [19, -70], [20, -70], [8, -66], [-2, -63], [14, -69], [19, -70], [20, -70], [8, -66], [-2, -63], [-13, -69], [-18, -70], [-19, -70], [-7, -66], [3, -63], [-13, -69], [-18, -70], [-19, -70], [-7, -66], [3, -63], [3, -54], [0, -57], [-2, -57], [8, -57], [24, -35], [3, -54], [0, -57], [-2, -57], [8, -57], [24, -35], [19, -72], [22, -72], [19, -72], [19, -72], [22, -72], [19, -72], [17, -80], [21, -79], [17, -80], [17, -80], [21, -79], [17, -80], [-16, -80], [-20, -79], [-16, -80], [-16, -80], [-20, -79], [-16, -80], [-18, -72], [-21, -72], [-18, -72], [-18, -72], [-21, -72], [-18, -72], [24, -72], [24, -72], [22, -79], [22, -79], [-21, -79], [-21, -79], [-23, -72], [-23, -72], [45, -27], [45, -27], [51, 14], [51, 14], [-50, 14], [-50, 14], [-44, -27], [-44, -27], [-5, -59], [-5, -59], [-5, -59], [-5, -59], [-5, -59], [-5, -59], [-5, -59], [-5, -59], [-2, -54], [1, -57], [3, -57], [-7, -57], [-23, -35], [-28, -30], [-28, -30], [-28, -30], [-28, -30], [-2, -54], [1, -57], [3, -57], [-7, -57], [-23, -35], [-28, -30], [-28, -30], [-28, -30], [-28, -30], [14, -69], [19, -70], [20, -70], [8, -66], [-2, -63], [-3, -62], [-3, -62], [-3, -62], [-3, -62], [14, -69], [19, -70], [20, -70], [8, -66], [-2, -63], [-3, -62], [-3, -62], [-3, -62], [-3, -62], [-13, -69], [-18, -70], [-19, -70], [-7, -66], [3, -63], [4, -62], [4, -62], [4, -62], [4, -62], [-13, -69], [-18, -70], [-19, -70], [-7, -66], [3, -63], [4, -62], [4, -62], [4, -62], [4, -62], [3, -54], [0, -57], [-2, -57], [8, -57], [24, -35], [29, -30], [29, -30], [29, -30], [29, -30], [3, -54], [0, -57], [-2, -57], [8, -57], [24, -35], [29, -30], [29, -30], [29, -30], [29, -30], [-1, -58], [1, -58], [-14, -53], [-27, -44], [-26, -44], [-26, -44], [-25, -43], [-24, -43], [-1, -58], [1, -58], [-14, -53], [-27, -44], [-26, -44], [-26, -44], [-25, -43], [-24, -43], [17, -72], [17, -71], [8, -73], [0, -76], [1, -75], [1, -75], [2, -74], [3, -73], [17, -72], [17, -71], [8, -73], [0, -76], [1, -75], [1, -75], [2, -74], [3, -73], [-16, -72], [-16, -71], [-7, -73], [1, -76], [0, -75], [0, -75], [-1, -74], [-2, -73], [-16, -72], [-16, -71], [-7, -73], [1, -76], [0, -75], [0, -75], [-1, -74], [-2, -73], [2, -58], [0, -58], [15, -53], [28, -44], [27, -44], [27, -44], [26, -43], [25, -43], [2, -58], [0, -58], [15, -53], [28, -44], [27, -44], [27, -44], [26, -43], [25, -43], [-2, -55], [-9, -49], [-4, -54], [4, -59], [-24, -39], [-26, -37], [-2, -55], [-9, -49], [-4, -54], [4, -59], [-24, -39], [-26, -37], [21, -74], [10, -72], [15, -72], [23, -74], [1, -69], [0, -68], [21, -74], [10, -72], [15, -72], [23, -74], [1, -69], [0, -68], [-20, -74], [-9, -72], [-14, -72], [-22, -74], [0, -69], [1, -68], [-20, -74], [-9, -72], [-14, -72], [-22, -74], [0, -69], [1, -68], [3, -55], [10, -49], [5, -54], [-3, -59], [25, -39], [27, -37], [3, -55], [10, -49], [5, -54], [-3, -59], [25, -39], [27, -37]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 78, 79, 80, 81, 82, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 84, 85, 86, 87, 88, 84, 85, 86, 87, 88, 84, 85, 86, 87, 88, 78, 79, 80, 81, 82, 78, 79, 80, 81, 82, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 1, 1, 1, 1, 1, 1, 1, 1, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111]
};

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 40, 78, 105, 138, 178, 221, 263, 304, 346, 389, 431, 472, 514, 549, 586, 629, 665, 698, 735, 785, 829, 857, 883, 925, 963, 991, 1020, 1065, 1104, 1136, 1170, 1214, 1253, 1286, 1322, 1358, 1392, 1434, 1475, 1514, 1554, 1595, 1635, 1673, 1713, 1755, 1804, 1847, 1889, 1929, 1968, 2007, 2044, 2082, 2128, 2173, 2219, 2263, 2308, 2354, 2393, 2432, 2471, 2510, 2549, 2588, 2658, 2722, 2786, 2844, 2900, 2956, 3002, 3037, 3094, 3131, 3190, 3256, 3301, 3349, 3397, 3445, 3491, 3539, 3587, 3626, 3675, 3726, 3777, 3829, 3880, 3929, 3980, 4032, 4084, 4136, 4188, 4240, 4292, 4334, 4375, 4416, 4456, 4497, 4537, 4578, 4655, 4708, 4765, 4822, 4875, 4932, 5005, 5055, 5099, 5153, 5192],
  widths: [40, 38, 27, 33, 40, 43, 42, 41, 42, 43, 42, 41, 42, 35, 37, 43, 36, 33, 37, 50, 44, 28, 26, 42, 38, 28, 29, 45, 39, 32, 34, 44, 39, 33, 36, 36, 34, 42, 41, 39, 40, 41, 40, 38, 40, 42, 49, 43, 42, 40, 39, 39, 37, 38, 46, 45, 46, 44, 45, 46, 39, 39, 39, 39, 39, 39, 70, 64, 64, 58, 56, 56, 46, 35, 57, 37, 59, 66, 45, 48, 48, 48, 46, 48, 48, 39, 49, 51, 51, 52, 51, 49, 51, 52, 52, 52, 52, 52, 52, 42, 41, 41, 40, 41, 40, 41, 77, 53, 57, 57, 53, 57, 73, 50, 44, 54, 39, 40],
  heights: [74, 75, 69, 67, 69, 73, 70, 70, 76, 73, 72, 72, 76, 76, 76, 77, 80, 80, 77, 74, 75, 70, 69, 68, 71, 73, 72, 68, 69, 70, 70, 69, 70, 76, 77, 72, 72, 72, 70, 68, 68, 73, 71, 68, 68, 52, 52, 48, 44, 42, 60, 56, 57, 52, 72, 74, 75, 76, 75, 74, 67, 68, 68, 69, 69, 68, 63, 63, 62, 60, 71, 70, 73, 64, 71, 63, 55, 46, 76, 71, 71, 70, 75, 71, 70, 69, 66, 66, 65, 71, 67, 64, 63, 64, 65, 65, 65, 65, 65, 60, 61, 62, 62, 62, 62, 62, 72, 71, 67, 72, 72, 74, 73, 65, 68, 74, 65, 67],
  bodyOffsets: [[1, -31], [1, -31], [1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -29], [-1, -29], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [-1, -29], [-1, -29], [-1, -29], [2, -30], [2, -30], [2, -30], [2, -29], [2, -29], [2, -29], [1, -31], [1, -31], [1, -31], [0, -29], [-1, -30], [-1, -28], [-1, -27], [0, -30], [0, -30], [1, -28], [0, -26], [-1, -31], [-2, -30], [-2, -27], [-2, -27], [-2, -29], [-3, -29], [-1, -29], [0, -29], [1, -29], [0, -28], [-3, -27], [0, -26], [-1, -27], [-2, -27], [-3, -27], [2, -27], [-3, -28], [0, -27], [0, -25], [1, -26], [-2, -25], [-2, -23], [-2, -24], [-3, -25], [1, -29], [1, -29], [1, -28], [1, -29], [1, -29], [1, -29], [1, -28], [1, -29], [3, -28], [0, -27], [0, -25], [0, -26], [3, -25], [2, -23], [2, -24], [3, -25], [-1, -29], [0, -28], [3, -27], [0, -26], [1, -27], [3, -27], [4, -27], [-1, -27], [2, -31], [3, -30], [3, -27], [2, -27], [3, -29], [4, -29], [1, -29], [0, -29], [0, -14], [0, -14], [0, -14], [-2, -15], [-2, -15], [-2, -15], [-6, -14], [-6, -14], [-6, -14], [-9, -15], [-9, -15], [-9, -15], [-2, -18], [-2, -18], [-2, -18], [9, -15], [9, -15], [9, -15], [7, -14], [7, -14], [7, -14], [3, -15], [3, -15], [3, -15], [-3, -24], [-3, -22], [-3, -24], [-3, -24], [-3, -22], [-3, -24], [-3, -25], [-4, -23], [-3, -25], [-3, -25], [-4, -23], [-3, -25], [4, -25], [4, -23], [4, -25], [4, -25], [4, -23], [4, -25], [4, -24], [4, -22], [4, -24], [4, -24], [4, -22], [4, -24], [0, -28], [0, -29], [0, -29], [-1, -30], [0, -29], [0, -29], [0, -28], [0, -29], [0, -29], [-1, -30], [0, -29], [0, -29], [3, -26], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -26], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [-2, -26], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [-2, -26], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [0, -28], [1, -29], [0, -29], [1, -30], [1, -29], [0, -29], [0, -28], [1, -29], [0, -29], [1, -30], [1, -29], [0, -29], [-4, -32], [-1, -33], [0, -35], [-1, -31], [-1, -31], [-4, -32], [-1, -33], [0, -35], [-1, -31], [-1, -31], [-3, -20], [4, -25], [6, -24], [-1, -30], [-1, -30], [-3, -20], [4, -25], [6, -24], [-1, -30], [-1, -30], [3, -20], [-4, -25], [-6, -24], [2, -30], [2, -30], [3, -20], [-4, -25], [-6, -24], [2, -30], [2, -30], [4, -32], [1, -33], [0, -35], [1, -31], [1, -31], [4, -32], [1, -33], [0, -35], [1, -31], [1, -31], [7, -30], [9, -30], [7, -30], [7, -30], [9, -30], [7, -30], [0, -29], [2, -29], [0, -29], [0, -29], [2, -29], [0, -29], [1, -29], [-1, -29], [1, -29], [1, -29], [-1, -29], [1, -29], [-7, -30], [-9, -30], [-7, -30], [-7, -30], [-9, -30], [-7, -30], [15, -29], [15, -29], [4, -25], [4, -25], [-3, -25], [-3, -25], [-14, -29], [-14, -29], [0, 0], [0, 0], [-2, -1], [-2, -1], [2, -1], [2, -1], [1, 0], [1, 0], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [0, -30], [-3, -28], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [0, -29], [-1, -28], [-1, -28], [0, -30], [-3, -28], [-2, -27], [-2, -27], [-2, -27], [-2, -27], [0, -29], [-1, -28], [-1, -28], [3, -28], [5, -26], [6, -26], [6, -25], [6, -25], [6, -25], [7, -28], [8, -26], [7, -25], [3, -28], [5, -26], [6, -26], [6, -25], [6, -25], [6, -25], [7, -28], [8, -26], [7, -25], [-2, -28], [-4, -26], [-5, -26], [-5, -25], [-5, -25], [-5, -25], [-7, -28], [-7, -26], [-6, -25], [-2, -28], [-4, -26], [-5, -26], [-5, -25], [-5, -25], [-5, -25], [-7, -28], [-7, -26], [-6, -25], [1, -30], [3, -28], [2, -27], [2, -27], [2, -27], [2, -27], [0, -29], [1, -28], [1, -28], [1, -30], [3, -28], [2, -27], [2, -27], [2, -27], [2, -27], [0, -29], [1, -28], [1, -28], [0, -30], [3, -31], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [0, -30], [3, -31], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -28], [6, -28], [8, -27], [8, -28], [8, -28], [8, -28], [8, -28], [8, -28], [3, -28], [6, -28], [8, -27], [8, -28], [8, -28], [8, -28], [8, -28], [8, -28], [-2, -28], [-6, -28], [-7, -27], [-7, -28], [-8, -28], [-7, -28], [-8, -28], [-7, -28], [-2, -28], [-6, -28], [-7, -27], [-7, -28], [-8, -28], [-7, -28], [-8, -28], [-7, -28], [1, -30], [-2, -31], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [1, -30], [-2, -31], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [5, -29], [4, -28], [-8, -28], [5, -26], [0, -34], [0, -35], [5, -29], [4, -28], [-8, -28], [5, -26], [0, -34], [0, -35], [-8, -27], [-5, -25], [-4, -25], [-10, -28], [-3, -32], [-5, -34], [-8, -27], [-5, -25], [-4, -25], [-10, -28], [-3, -32], [-5, -34], [9, -27], [5, -25], [4, -25], [10, -28], [4, -32], [5, -34], [9, -27], [5, -25], [4, -25], [10, -28], [4, -32], [5, -34], [-4, -29], [-3, -28], [9, -28], [-4, -26], [1, -34], [1, -35], [-4, -29], [-3, -28], [9, -28], [-4, -26], [1, -34], [1, -35]],
  anchorHead: [[0, -61], [-5, -62], [6, -62], [-5, -62], [-5, -62], [-1, -61], [-5, -62], [12, -78], [-5, -62], [12, -78], [12, -77], [-5, -62], [12, -77], [-11, -78], [12, -78], [-11, -78], [6, -62], [12, -77], [6, -62], [6, -62], [-11, -78], [6, -62], [0, -61], [6, -62], [0, -60], [0, -59], [0, -57], [0, -58], [0, -60], [0, -59], [0, -57], [0, -58], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [12, -76], [12, -75], [12, -73], [12, -74], [12, -76], [12, -75], [12, -73], [12, -74], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [0, -33], [-5, -34], [6, -34], [-5, -34], [-5, -34], [0, -33], [-5, -34], [12, -50], [-5, -34], [12, -50], [12, -49], [-5, -34], [12, -49], [-11, -50], [12, -50], [-11, -50], [6, -34], [12, -49], [6, -34], [6, -34], [-11, -50], [6, -34], [0, -33], [6, -34], [-14, -64], [-16, -46], [-14, -64], [-14, -64], [-16, -46], [-14, -64], [-11, -68], [-9, -49], [-11, -68], [-11, -68], [-9, -49], [-11, -68], [12, -68], [10, -49], [12, -68], [12, -68], [10, -49], [12, -68], [15, -64], [17, -46], [15, -64], [15, -64], [17, -46], [15, -64], [-3, -57], [-3, -59], [-3, -60], [-3, -61], [-3, -60], [-3, -59], [-3, -57], [-3, -59], [-3, -60], [-3, -61], [-3, -60], [-3, -59], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [4, -57], [4, -59], [4, -60], [4, -61], [4, -60], [4, -59], [4, -57], [4, -59], [4, -60], [4, -61], [4, -60], [4, -59], [4, -57], [8, -58], [9, -59], [-5, -62], [-5, -62], [4, -57], [8, -58], [9, -59], [-5, -62], [-5, -62], [20, -65], [26, -65], [28, -63], [12, -78], [12, -78], [20, -65], [26, -65], [28, -63], [12, -78], [12, -78], [-19, -65], [-25, -65], [-27, -63], [-11, -78], [-11, -78], [-19, -65], [-25, -65], [-27, -63], [-11, -78], [-11, -78], [-3, -57], [-7, -58], [-8, -59], [6, -62], [6, -62], [-3, -57], [-7, -58], [-8, -59], [6, -62], [6, -62], [19, -74], [22, -74], [19, -74], [19, -74], [22, -74], [19, -74], [11, -79], [15, -79], [11, -79], [11, -79], [15, -79], [11, -79], [-10, -79], [-14, -79], [-10, -79], [-10, -79], [-14, -79], [-10, -79], [-18, -74], [-21, -74], [-18, -74], [-18, -74], [-21, -74], [-18, -74], [34, -72], [34, -72], [19, -74], [19, -74], [-18, -74], [-18, -74], [-33, -72], [-33, -72], [36, -22], [36, -22], [39, 20], [39, 20], [-38, 20], [-38, 20], [-35, -22], [-35, -22], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-3, -61], [1, -57], [2, -56], [2, -55], [2, -55], [2, -55], [5, -56], [3, -58], [3, -57], [-3, -61], [1, -57], [2, -56], [2, -55], [2, -55], [2, -55], [5, -56], [3, -58], [3, -57], [14, -76], [24, -71], [26, -70], [26, -69], [26, -69], [26, -69], [28, -70], [28, -70], [26, -69], [14, -76], [24, -71], [26, -70], [26, -69], [26, -69], [26, -69], [28, -70], [28, -70], [26, -69], [-13, -76], [-23, -71], [-25, -70], [-25, -69], [-25, -69], [-25, -69], [-27, -70], [-27, -70], [-25, -69], [-13, -76], [-23, -71], [-25, -70], [-25, -69], [-25, -69], [-25, -69], [-27, -70], [-27, -70], [-25, -69], [4, -61], [0, -57], [-1, -56], [-1, -55], [-1, -55], [-1, -55], [-4, -56], [-2, -58], [-2, -57], [4, -61], [0, -57], [-1, -56], [-1, -55], [-1, -55], [-1, -55], [-4, -56], [-2, -58], [-2, -57], [-3, -61], [2, -56], [3, -57], [3, -58], [4, -58], [3, -58], [4, -58], [3, -58], [-3, -61], [2, -56], [3, -57], [3, -58], [4, -58], [3, -58], [4, -58], [3, -58], [14, -76], [23, -73], [27, -73], [27, -74], [29, -74], [28, -74], [29, -74], [28, -74], [14, -76], [23, -73], [27, -73], [27, -74], [29, -74], [28, -74], [29, -74], [28, -74], [-13, -76], [-22, -73], [-26, -73], [-26, -74], [-28, -74], [-27, -74], [-28, -74], [-27, -74], [-13, -76], [-22, -73], [-26, -73], [-26, -74], [-28, -74], [-27, -74], [-28, -74], [-27, -74], [4, -61], [-1, -56], [-2, -57], [-2, -58], [-3, -58], [-2, -58], [-3, -58], [-2, -58], [4, -61], [-1, -56], [-2, -57], [-2, -58], [-3, -58], [-2, -58], [-3, -58], [-2, -58], [-3, -58], [-4, -55], [-2, -56], [-3, -55], [-4, -63], [-4, -65], [-3, -58], [-4, -55], [-2, -56], [-3, -55], [-4, -63], [-4, -65], [11, -74], [11, -68], [12, -74], [14, -70], [14, -79], [13, -82], [11, -74], [11, -68], [12, -74], [14, -70], [14, -79], [13, -82], [-10, -74], [-10, -68], [-11, -74], [-13, -70], [-13, -79], [-12, -82], [-10, -74], [-10, -68], [-11, -74], [-13, -70], [-13, -79], [-12, -82], [4, -58], [5, -55], [3, -56], [4, -55], [5, -63], [5, -65], [4, -58], [5, -55], [3, -56], [4, -55], [5, -63], [5, -65]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 1, 1, 66, 67, 68, 1, 1, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 66, 67, 68, 1, 1, 66, 67, 68, 1, 1, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 74, 74, 75, 75, 75, 75, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 1, 1, 1, 1, 1, 1, 1, 1, 78, 79, 80, 81, 81, 81, 82, 83, 84, 78, 79, 80, 81, 81, 81, 82, 83, 84, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 78, 79, 80, 81, 81, 81, 82, 83, 84, 78, 79, 80, 81, 81, 81, 82, 83, 84, 78, 92, 93, 94, 95, 96, 97, 98, 78, 92, 93, 94, 95, 96, 97, 98, 85, 99, 100, 101, 102, 103, 104, 105, 85, 99, 100, 101, 102, 103, 104, 105, 85, 99, 100, 101, 102, 103, 104, 105, 85, 99, 100, 101, 102, 103, 104, 105, 78, 92, 93, 94, 95, 96, 97, 98, 78, 92, 93, 94, 95, 96, 97, 98, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111]
};

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 41, 78, 117, 147, 184, 229, 273, 317, 362, 406, 450, 494, 539, 578, 618, 658, 701, 742, 785, 827, 873, 923, 962, 996, 1049, 1090, 1122, 1160, 1217, 1252, 1284, 1323, 1371, 1415, 1452, 1481, 1514, 1553, 1590, 1627, 1663, 1701, 1739, 1777, 1814, 1864, 1924, 1987, 2041, 2096, 2130, 2169, 2204, 2243, 2283, 2323, 2364, 2403, 2442, 2480, 2511, 2543, 2575, 2610, 2645, 2680, 2740, 2793, 2842, 2888, 2918, 2949, 3002, 3050, 3086, 3122, 3159, 3202, 3241, 3289, 3343, 3402, 3445, 3489, 3532, 3583, 3635, 3692, 3751, 3788, 3827, 3863, 3912, 3958, 4004, 4052, 4096, 4144, 4195, 4251, 4305, 4359, 4415, 4452, 4491, 4528, 4570, 4613, 4656, 4698, 4753, 4799, 4842, 4884, 4917, 4950, 5007, 5038, 5074, 5105, 5135],
  widths: [41, 37, 39, 30, 37, 45, 44, 44, 45, 44, 44, 44, 45, 39, 40, 40, 43, 41, 43, 42, 46, 50, 39, 34, 53, 41, 32, 38, 57, 35, 32, 39, 48, 44, 37, 29, 33, 39, 37, 37, 36, 38, 38, 38, 37, 50, 60, 63, 54, 55, 34, 39, 35, 39, 40, 40, 41, 39, 39, 38, 31, 32, 32, 35, 35, 35, 60, 53, 49, 46, 30, 31, 53, 48, 36, 36, 37, 43, 39, 48, 54, 59, 43, 44, 43, 51, 52, 57, 59, 37, 39, 36, 49, 46, 46, 48, 44, 48, 51, 56, 54, 54, 56, 37, 39, 37, 42, 43, 43, 42, 55, 46, 43, 42, 33, 33, 57, 31, 36, 31, 30, 29],
  heights: [74, 74, 69, 71, 72, 76, 71, 69, 70, 76, 72, 69, 69, 75, 71, 72, 70, 75, 73, 69, 69, 67, 66, 63, 64, 68, 67, 66, 67, 75, 70, 70, 69, 73, 75, 76, 76, 75, 70, 70, 75, 72, 67, 68, 72, 58, 50, 44, 44, 39, 62, 58, 65, 55, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 70, 66, 69, 71, 71, 68, 72, 69, 70, 67, 68, 67, 62, 63, 49, 45, 73, 73, 73, 70, 83, 86, 87, 74, 75, 75, 70, 82, 82, 80, 70, 70, 77, 68, 68, 68, 68, 72, 73, 79, 77, 72, 72, 75, 63, 74, 72, 73, 72, 70, 69, 76, 72, 72, 72, 71],
  bodyOffsets: [[1, -25], [1, -25], [1, -25], [-1, -26], [-1, -26], [-1, -26], [-5, -25], [-5, -25], [-5, -25], [-3, -24], [-3, -24], [-3, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [0, -24], [4, -25], [4, -25], [4, -25], [-1, -26], [-1, -26], [-1, -26], [0, -24], [0, -25], [0, -24], [2, -25], [0, -24], [0, -25], [-1, -24], [-1, -25], [-1, -25], [-1, -25], [0, -24], [2, -25], [3, -23], [2, -24], [0, -25], [-3, -25], [-1, -26], [3, -26], [-5, -25], [0, -26], [2, -25], [3, -24], [-7, -23], [-2, -23], [2, -23], [1, -25], [2, -23], [2, -24], [1, -24], [2, -22], [-1, -20], [1, -21], [0, -22], [0, -24], [-1, -22], [-2, -20], [-2, -24], [-1, -25], [0, -23], [1, -22], [-1, -23], [-1, -25], [-1, -23], [-2, -24], [-1, -24], [-1, -22], [2, -20], [0, -21], [1, -26], [-2, -26], [5, -25], [1, -26], [-1, -25], [-3, -24], [7, -23], [3, -23], [2, -25], [1, -25], [0, -24], [-1, -25], [-2, -23], [-1, -24], [0, -25], [3, -25], [1, -2], [1, -2], [1, -2], [-6, -7], [-6, -7], [-6, -7], [-9, -10], [-9, -10], [-9, -10], [-8, -7], [-8, -7], [-8, -7], [1, -9], [1, -9], [1, -9], [7, -7], [7, -7], [7, -7], [9, -10], [9, -10], [9, -10], [7, -7], [7, -7], [7, -7], [-1, -13], [-3, -11], [-1, -13], [-1, -13], [-3, -11], [-1, -13], [-2, -15], [-4, -10], [-2, -15], [-2, -15], [-4, -10], [-2, -15], [3, -15], [5, -10], [3, -15], [3, -15], [5, -10], [3, -15], [1, -13], [4, -11], [1, -13], [1, -13], [4, -11], [1, -13], [-8, -26], [-9, -26], [-9, -26], [-9, -26], [-8, -26], [-8, -26], [-8, -26], [-9, -26], [-9, -26], [-9, -26], [-8, -26], [-8, -26], [-4, -26], [-5, -26], [-6, -26], [-6, -26], [-6, -26], [-6, -26], [-4, -26], [-5, -26], [-6, -26], [-6, -26], [-6, -26], [-6, -26], [5, -26], [5, -26], [6, -26], [7, -26], [7, -26], [7, -26], [5, -26], [5, -26], [6, -26], [7, -26], [7, -26], [7, -26], [8, -26], [9, -26], [10, -26], [10, -26], [9, -26], [8, -26], [8, -26], [9, -26], [10, -26], [10, -26], [9, -26], [8, -26], [0, -26], [2, -25], [1, -28], [-8, -18], [-8, -19], [0, -26], [2, -25], [1, -28], [-8, -18], [-8, -19], [-3, -24], [-3, -24], [-2, -24], [-14, -26], [-12, -24], [-3, -24], [-3, -24], [-2, -24], [-14, -26], [-12, -24], [3, -24], [3, -24], [3, -24], [15, -26], [12, -24], [3, -24], [3, -24], [3, -24], [15, -26], [12, -24], [1, -26], [-2, -25], [0, -28], [9, -18], [8, -19], [1, -26], [-2, -25], [0, -28], [9, -18], [8, -19], [-4, -23], [-4, -22], [-4, -23], [-4, -23], [-4, -22], [-4, -23], [2, -21], [-1, -21], [2, -21], [2, -21], [-1, -21], [2, -21], [-1, -21], [2, -21], [-1, -21], [-1, -21], [2, -21], [-1, -21], [4, -23], [4, -22], [4, -23], [4, -23], [4, -22], [4, -23], [-3, -20], [-3, -20], [2, -18], [2, -18], [-2, -18], [-2, -18], [4, -20], [4, -20], [-1, -12], [-1, -12], [-4, -11], [-4, -11], [5, -11], [5, -11], [1, -12], [1, -12], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-9, -26], [2, -26], [3, -26], [3, -26], [-6, -25], [-14, -31], [-17, -33], [-17, -33], [-17, -33], [-9, -26], [2, -26], [3, -26], [3, -26], [-6, -25], [-14, -31], [-17, -33], [-17, -33], [-17, -33], [-8, -26], [-9, -26], [-8, -26], [-8, -26], [-10, -24], [-12, -32], [-12, -33], [-12, -33], [-12, -33], [-8, -26], [-9, -26], [-8, -26], [-8, -26], [-10, -24], [-12, -32], [-12, -33], [-12, -33], [-12, -33], [9, -26], [10, -26], [8, -26], [8, -26], [11, -24], [12, -32], [12, -33], [12, -33], [12, -33], [9, -26], [10, -26], [8, -26], [8, -26], [11, -24], [12, -32], [12, -33], [12, -33], [12, -33], [10, -26], [-2, -26], [-2, -26], [-2, -26], [7, -25], [14, -31], [18, -33], [18, -33], [18, -33], [10, -26], [-2, -26], [-2, -26], [-2, -26], [7, -25], [14, -31], [18, -33], [18, -33], [18, -33], [-6, -24], [-4, -24], [1, -27], [7, -23], [8, -23], [8, -23], [8, -23], [7, -23], [-6, -24], [-4, -24], [1, -27], [7, -23], [8, -23], [8, -23], [8, -23], [7, -23], [-8, -25], [-7, -24], [-2, -28], [0, -22], [0, -20], [0, -20], [0, -20], [0, -21], [-8, -25], [-7, -24], [-2, -28], [0, -22], [0, -20], [0, -20], [0, -20], [0, -21], [9, -25], [8, -24], [3, -28], [0, -22], [1, -20], [1, -20], [1, -20], [0, -21], [9, -25], [8, -24], [3, -28], [0, -22], [1, -20], [1, -20], [1, -20], [0, -21], [6, -24], [4, -24], [0, -27], [-7, -23], [-8, -23], [-8, -23], [-8, -23], [-7, -23], [6, -24], [4, -24], [0, -27], [-7, -23], [-8, -23], [-8, -23], [-8, -23], [-7, -23], [5, -29], [-1, -26], [-3, -25], [-5, -25], [-4, -25], [-4, -24], [5, -29], [-1, -26], [-3, -25], [-5, -25], [-4, -25], [-4, -24], [-1, -28], [-3, -26], [-4, -24], [-3, -24], [-2, -26], [-1, -25], [-1, -28], [-3, -26], [-4, -24], [-3, -24], [-2, -26], [-1, -25], [2, -28], [4, -26], [4, -24], [4, -24], [2, -26], [2, -25], [2, -28], [4, -26], [4, -24], [4, -24], [2, -26], [2, -25], [-4, -29], [1, -26], [4, -25], [5, -25], [5, -25], [5, -24], [-4, -29], [1, -26], [4, -25], [5, -25], [5, -25], [5, -24]],
  anchorHead: [[0, -56], [-5, -57], [5, -57], [-6, -57], [-5, -57], [-1, -56], [-5, -57], [11, -73], [-6, -57], [10, -73], [10, -72], [-6, -57], [10, -72], [-12, -73], [10, -73], [-12, -73], [4, -57], [10, -72], [4, -57], [5, -57], [-12, -73], [4, -57], [0, -56], [4, -57], [0, -56], [0, -55], [0, -53], [0, -54], [0, -56], [0, -55], [0, -53], [0, -54], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [11, -72], [11, -71], [11, -69], [11, -70], [11, -72], [11, -71], [11, -69], [11, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [0, -25], [-5, -26], [5, -26], [-5, -26], [-4, -26], [0, -25], [-6, -26], [10, -42], [-7, -26], [11, -42], [11, -41], [-4, -26], [11, -41], [-11, -42], [11, -42], [-11, -42], [5, -26], [10, -41], [6, -26], [7, -26], [-10, -42], [7, -26], [3, -25], [6, -26], [-9, -59], [-18, -38], [-9, -59], [-9, -59], [-18, -38], [-9, -59], [-11, -62], [-10, -36], [-11, -62], [-11, -62], [-10, -36], [-11, -62], [12, -62], [11, -36], [12, -62], [12, -62], [11, -36], [12, -62], [10, -59], [19, -38], [10, -59], [10, -59], [19, -38], [10, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [5, -76], [6, -76], [7, -76], [6, -76], [5, -76], [4, -76], [5, -76], [6, -76], [7, -76], [6, -76], [5, -76], [4, -76], [-4, -76], [-5, -76], [-6, -76], [-5, -76], [-4, -76], [-3, -76], [-4, -76], [-5, -76], [-6, -76], [-5, -76], [-4, -76], [-3, -76], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [-6, -57], [-4, -55], [-6, -55], [-19, -44], [-19, -42], [-6, -57], [-4, -55], [-6, -55], [-19, -44], [-19, -42], [10, -73], [13, -72], [15, -73], [-5, -71], [-5, -70], [10, -73], [13, -72], [15, -73], [-5, -71], [-5, -70], [-9, -73], [-12, -72], [-14, -73], [6, -71], [6, -70], [-9, -73], [-12, -72], [-14, -73], [6, -71], [6, -70], [7, -57], [5, -55], [7, -55], [20, -44], [20, -42], [7, -57], [5, -55], [7, -55], [20, -44], [20, -42], [10, -68], [13, -66], [10, -68], [10, -68], [13, -66], [10, -68], [8, -76], [10, -76], [8, -76], [8, -76], [10, -76], [8, -76], [-7, -76], [-9, -76], [-7, -76], [-7, -76], [-9, -76], [-7, -76], [-9, -68], [-12, -66], [-9, -68], [-9, -68], [-12, -66], [-9, -68], [16, -61], [16, -61], [15, -71], [15, -71], [-14, -71], [-14, -71], [-15, -61], [-15, -61], [35, -33], [35, -33], [34, 8], [34, 8], [-33, 8], [-33, 8], [-34, -33], [-34, -33], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-23, -58], [-23, -60], [-24, -60], [-24, -60], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-23, -58], [-23, -60], [-24, -60], [-24, -60], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -74], [-8, -76], [-9, -76], [-9, -76], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -74], [-8, -76], [-9, -76], [-9, -76], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -74], [9, -76], [10, -76], [10, -76], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -74], [9, -76], [10, -76], [10, -76], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [24, -58], [24, -60], [25, -60], [25, -60], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [24, -58], [24, -60], [25, -60], [25, -60], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [17, -66], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [17, -66], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [-16, -66], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-16, -66], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 84, 84, 85, 86, 87, 88, 88, 82, 83, 84, 84, 85, 86, 87, 88, 88, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 82, 83, 84, 84, 85, 86, 87, 88, 88, 82, 83, 84, 84, 85, 86, 87, 88, 88, 96, 97, 98, 99, 100, 101, 101, 102, 96, 97, 98, 99, 100, 101, 101, 102, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 96, 97, 98, 99, 100, 101, 101, 102, 96, 97, 98, 99, 100, 101, 101, 102, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115]
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 75, 106, 141, 179, 218, 255, 289, 326, 365, 403, 439, 476, 508, 546, 588, 628, 663, 697, 735, 769, 800, 837, 883, 924, 955, 991, 1039, 1081, 1115, 1149, 1186, 1219, 1252, 1291, 1334, 1374, 1411, 1448, 1484, 1521, 1558, 1595, 1630, 1667, 1718, 1769, 1818, 1861, 1906, 1948, 1988, 2030, 2072, 2110, 2148, 2186, 2224, 2263, 2302, 2338, 2373, 2409, 2446, 2485, 2522, 2563, 2610, 2662, 2712, 2742, 2777, 2822, 2866, 2912, 2959, 2998, 3043, 3105, 3178, 3219, 3257, 3297, 3338, 3393, 3443, 3491, 3522, 3553, 3586, 3620, 3679, 3734, 3784, 3823, 3866, 3900, 3934, 3970, 4004, 4040, 4077, 4110, 4144, 4178],
  widths: [38, 37, 31, 35, 38, 39, 37, 34, 37, 39, 38, 36, 37, 32, 38, 42, 40, 35, 34, 38, 34, 31, 37, 46, 41, 31, 36, 48, 42, 34, 34, 37, 33, 33, 39, 43, 40, 37, 37, 36, 37, 37, 37, 35, 37, 51, 51, 49, 43, 45, 42, 40, 42, 42, 38, 38, 38, 38, 39, 39, 36, 35, 36, 37, 39, 37, 41, 47, 52, 50, 30, 35, 45, 44, 46, 47, 39, 45, 62, 73, 41, 38, 40, 41, 55, 50, 48, 31, 31, 33, 34, 59, 55, 50, 39, 43, 34, 34, 36, 34, 36, 37, 33, 34, 34, 34],
  heights: [73, 73, 72, 73, 72, 70, 70, 71, 74, 70, 70, 71, 74, 71, 68, 65, 66, 66, 64, 66, 70, 68, 67, 65, 65, 65, 63, 64, 65, 71, 71, 67, 68, 65, 65, 63, 66, 68, 71, 70, 70, 68, 72, 68, 68, 53, 51, 50, 57, 54, 62, 59, 65, 61, 74, 74, 73, 72, 71, 73, 71, 71, 70, 69, 68, 70, 71, 69, 62, 61, 71, 71, 65, 65, 65, 66, 63, 61, 49, 49, 69, 69, 69, 70, 63, 62, 62, 71, 70, 69, 70, 65, 65, 65, 72, 73, 74, 74, 71, 70, 69, 69, 70, 70, 68, 67],
  bodyOffsets: [[3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [2, -28], [2, -28], [2, -28], [3, -27], [3, -27], [3, -27], [2, -28], [2, -28], [2, -28], [-2, -27], [-2, -27], [-2, -27], [-1, -28], [-1, -28], [-1, -28], [-2, -27], [-2, -27], [-2, -27], [0, -29], [0, -28], [-1, -25], [0, -25], [0, -29], [-1, -28], [-1, -25], [0, -25], [0, -27], [-2, -28], [-2, -27], [-1, -28], [1, -30], [-1, -30], [-2, -27], [-1, -26], [-2, -28], [-3, -27], [-5, -26], [-1, -27], [-3, -29], [-4, -29], [-5, -27], [-2, -27], [0, -27], [0, -26], [-1, -26], [-1, -27], [-1, -30], [-2, -29], [-2, -28], [-2, -28], [1, -27], [1, -24], [1, -23], [1, -24], [1, -27], [1, -24], [1, -23], [1, -24], [0, -27], [0, -26], [2, -26], [2, -27], [2, -30], [3, -29], [3, -28], [2, -28], [3, -28], [4, -27], [5, -26], [2, -27], [4, -29], [4, -29], [5, -27], [2, -27], [0, -27], [2, -28], [2, -27], [1, -28], [0, -30], [1, -30], [2, -27], [1, -26], [0, -11], [0, -11], [0, -11], [-1, -12], [-1, -12], [-1, -12], [-2, -13], [-2, -13], [-2, -13], [3, -9], [3, -9], [3, -9], [1, -12], [1, -12], [1, -12], [-2, -9], [-2, -9], [-2, -9], [3, -13], [3, -13], [3, -13], [2, -12], [2, -12], [2, -12], [-2, -22], [-2, -20], [-2, -22], [-2, -22], [-2, -20], [-2, -22], [-2, -18], [-3, -16], [-2, -18], [-2, -18], [-3, -16], [-2, -18], [2, -18], [3, -16], [2, -18], [2, -18], [3, -16], [2, -18], [2, -22], [2, -20], [2, -22], [2, -22], [2, -20], [2, -22], [2, -26], [2, -25], [2, -26], [2, -26], [2, -27], [2, -27], [2, -26], [2, -25], [2, -26], [2, -26], [2, -27], [2, -27], [-1, -28], [1, -27], [0, -27], [0, -28], [-1, -28], [-1, -28], [-1, -28], [1, -27], [0, -27], [0, -28], [-1, -28], [-1, -28], [1, -28], [0, -27], [1, -27], [1, -28], [2, -28], [1, -28], [1, -28], [0, -27], [1, -27], [1, -28], [2, -28], [1, -28], [-2, -26], [-1, -25], [-2, -26], [-1, -26], [-2, -27], [-2, -27], [-2, -26], [-1, -25], [-2, -26], [-1, -26], [-2, -27], [-2, -27], [3, -27], [3, -26], [0, -25], [-5, -22], [-6, -21], [3, -27], [3, -26], [0, -25], [-5, -22], [-6, -21], [3, -27], [2, -26], [5, -26], [-2, -25], [-4, -25], [3, -27], [2, -26], [5, -26], [-2, -25], [-4, -25], [-2, -27], [-2, -26], [-4, -26], [3, -25], [4, -25], [-2, -27], [-2, -26], [-4, -26], [3, -25], [4, -25], [-2, -27], [-2, -26], [1, -25], [5, -22], [6, -21], [-2, -27], [-2, -26], [1, -25], [5, -22], [6, -21], [6, -27], [10, -29], [6, -27], [6, -27], [10, -29], [6, -27], [11, -20], [15, -18], [11, -20], [11, -20], [15, -18], [11, -20], [-10, -20], [-14, -18], [-10, -20], [-10, -20], [-14, -18], [-10, -20], [-6, -27], [-9, -29], [-6, -27], [-6, -27], [-9, -29], [-6, -27], [13, -24], [13, -24], [24, -15], [24, -15], [-23, -15], [-23, -15], [-12, -24], [-12, -24], [7, -6], [7, -6], [13, -7], [13, -7], [-12, -7], [-12, -7], [-7, -6], [-7, -6], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [0, -26], [-1, -25], [0, -26], [1, -27], [-4, -20], [-5, -20], [-5, -20], [-5, -20], [-5, -20], [0, -26], [-1, -25], [0, -26], [1, -27], [-4, -20], [-5, -20], [-5, -20], [-5, -20], [-5, -20], [4, -26], [7, -27], [9, -27], [9, -28], [-3, -26], [-2, -26], [-4, -26], [-4, -26], [-4, -26], [4, -26], [7, -27], [9, -27], [9, -28], [-3, -26], [-2, -26], [-4, -26], [-4, -26], [-4, -26], [-3, -26], [-6, -27], [-8, -27], [-9, -28], [4, -26], [3, -26], [4, -26], [4, -26], [4, -26], [-3, -26], [-6, -27], [-8, -27], [-9, -28], [4, -26], [3, -26], [4, -26], [4, -26], [4, -26], [1, -26], [1, -25], [0, -26], [0, -27], [5, -20], [5, -20], [5, -20], [5, -20], [5, -20], [1, -26], [1, -25], [0, -26], [0, -27], [5, -20], [5, -20], [5, -20], [5, -20], [5, -20], [0, -26], [-1, -25], [0, -26], [1, -27], [-4, -20], [-5, -20], [-5, -20], [-5, -20], [0, -26], [-1, -25], [0, -26], [1, -27], [-4, -20], [-5, -20], [-5, -20], [-5, -20], [4, -26], [7, -27], [9, -27], [9, -28], [-3, -26], [-2, -26], [-4, -26], [-4, -26], [4, -26], [7, -27], [9, -27], [9, -28], [-3, -26], [-2, -26], [-4, -26], [-4, -26], [-3, -26], [-6, -27], [-8, -27], [-9, -28], [4, -26], [3, -26], [4, -26], [4, -26], [-3, -26], [-6, -27], [-8, -27], [-9, -28], [4, -26], [3, -26], [4, -26], [4, -26], [1, -26], [1, -25], [0, -26], [0, -27], [5, -20], [5, -20], [5, -20], [5, -20], [1, -26], [1, -25], [0, -26], [0, -27], [5, -20], [5, -20], [5, -20], [5, -20], [0, -27], [-3, -27], [-2, -28], [-2, -28], [-2, -26], [-2, -26], [0, -27], [-3, -27], [-2, -28], [-2, -28], [-2, -26], [-2, -26], [1, -23], [0, -24], [1, -25], [1, -25], [1, -24], [1, -23], [1, -23], [0, -24], [1, -25], [1, -25], [1, -24], [1, -23], [-1, -23], [1, -24], [0, -25], [-1, -25], [-1, -24], [-1, -23], [-1, -23], [1, -24], [0, -25], [-1, -25], [-1, -24], [-1, -23], [1, -27], [4, -27], [2, -28], [2, -28], [2, -26], [2, -26], [1, -27], [4, -27], [2, -28], [2, -28], [2, -26], [2, -26]],
  anchorHead: [[3, -60], [-3, -60], [7, -60], [-3, -61], [-2, -61], [3, -60], [-3, -61], [14, -75], [-4, -61], [13, -77], [13, -76], [-3, -61], [12, -76], [-10, -77], [12, -77], [-12, -77], [4, -61], [10, -76], [4, -61], [5, -61], [-12, -77], [4, -61], [-2, -60], [3, -61], [0, -59], [0, -58], [0, -56], [0, -57], [0, -59], [0, -58], [0, -56], [0, -57], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [12, -76], [12, -75], [12, -73], [12, -74], [12, -76], [12, -75], [12, -73], [12, -74], [12, -75], [12, -74], [12, -72], [12, -73], [12, -75], [12, -74], [12, -72], [12, -73], [-11, -76], [-11, -75], [-11, -73], [-11, -74], [-11, -76], [-11, -75], [-11, -73], [-11, -74], [6, -60], [6, -59], [6, -57], [6, -58], [6, -60], [6, -59], [6, -57], [6, -58], [6, -60], [6, -59], [6, -57], [6, -58], [6, -60], [6, -59], [6, -57], [6, -58], [0, -34], [-6, -35], [6, -35], [-6, -35], [-5, -35], [0, -34], [-6, -35], [10, -51], [-7, -35], [11, -51], [11, -50], [-5, -35], [11, -50], [-11, -51], [12, -51], [-10, -51], [6, -35], [12, -50], [7, -35], [8, -35], [-9, -51], [7, -35], [2, -34], [7, -35], [-17, -60], [-19, -43], [-17, -60], [-17, -60], [-19, -43], [-17, -60], [-13, -61], [-13, -45], [-13, -61], [-13, -61], [-13, -45], [-13, -61], [14, -61], [14, -45], [14, -61], [14, -61], [14, -45], [14, -61], [18, -60], [20, -43], [18, -60], [18, -60], [20, -43], [18, -60], [-4, -59], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -60], [-4, -59], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -60], [11, -76], [11, -74], [11, -75], [11, -76], [11, -77], [11, -77], [11, -76], [11, -74], [11, -75], [11, -76], [11, -77], [11, -77], [-10, -76], [-10, -74], [-10, -75], [-10, -76], [-10, -77], [-10, -77], [-10, -76], [-10, -74], [-10, -75], [-10, -76], [-10, -77], [-10, -77], [5, -59], [5, -57], [5, -58], [5, -59], [5, -60], [5, -60], [5, -59], [5, -57], [5, -58], [5, -59], [5, -60], [5, -60], [-3, -61], [-4, -57], [-6, -57], [-17, -47], [-17, -46], [-3, -61], [-4, -57], [-6, -57], [-17, -47], [-17, -46], [13, -77], [11, -77], [12, -77], [-2, -71], [-2, -71], [13, -77], [11, -77], [12, -77], [-2, -71], [-2, -71], [-12, -77], [-10, -77], [-11, -77], [3, -71], [3, -71], [-12, -77], [-10, -77], [-11, -77], [3, -71], [3, -71], [4, -61], [5, -57], [7, -57], [18, -47], [18, -46], [4, -61], [5, -57], [7, -57], [18, -47], [18, -46], [25, -69], [29, -71], [25, -69], [25, -69], [29, -71], [25, -69], [24, -71], [33, -68], [24, -71], [24, -71], [33, -68], [24, -71], [-23, -71], [-32, -68], [-23, -71], [-23, -71], [-32, -68], [-23, -71], [-24, -69], [-28, -71], [-24, -69], [-24, -69], [-28, -71], [-24, -69], [40, -63], [40, -63], [48, -58], [48, -58], [-47, -58], [-47, -58], [-39, -63], [-39, -63], [48, -24], [48, -24], [55, 14], [55, 14], [-54, 14], [-54, 14], [-47, -24], [-47, -24], [3, -60], [3, -60], [3, -60], [3, -60], [3, -60], [3, -60], [3, -60], [3, -60], [-6, -56], [-5, -56], [-4, -57], [-3, -58], [-18, -44], [-19, -42], [-20, -41], [-20, -41], [-20, -41], [-6, -56], [-5, -56], [-4, -57], [-3, -58], [-18, -44], [-19, -42], [-20, -41], [-20, -41], [-20, -41], [15, -74], [17, -75], [18, -75], [18, -76], [1, -70], [0, -69], [0, -69], [0, -69], [0, -69], [15, -74], [17, -75], [18, -75], [18, -76], [1, -70], [0, -69], [0, -69], [0, -69], [0, -69], [-14, -74], [-16, -75], [-17, -75], [-17, -76], [0, -70], [1, -69], [1, -69], [1, -69], [1, -69], [-14, -74], [-16, -75], [-17, -75], [-17, -76], [0, -70], [1, -69], [1, -69], [1, -69], [1, -69], [7, -56], [6, -56], [5, -57], [4, -58], [19, -44], [20, -42], [21, -41], [21, -41], [21, -41], [7, -56], [6, -56], [5, -57], [4, -58], [19, -44], [20, -42], [21, -41], [21, -41], [21, -41], [-6, -56], [-5, -56], [-4, -57], [-3, -58], [-18, -44], [-19, -42], [-20, -41], [-20, -41], [-6, -56], [-5, -56], [-4, -57], [-3, -58], [-18, -44], [-19, -42], [-20, -41], [-20, -41], [15, -74], [17, -75], [18, -75], [18, -76], [1, -70], [0, -69], [0, -69], [0, -69], [15, -74], [17, -75], [18, -75], [18, -76], [1, -70], [0, -69], [0, -69], [0, -69], [-14, -74], [-16, -75], [-17, -75], [-17, -76], [0, -70], [1, -69], [1, -69], [1, -69], [-14, -74], [-16, -75], [-17, -75], [-17, -76], [0, -70], [1, -69], [1, -69], [1, -69], [7, -56], [6, -56], [5, -57], [4, -58], [19, -44], [20, -42], [21, -41], [21, -41], [7, -56], [6, -56], [5, -57], [4, -58], [19, -44], [20, -42], [21, -41], [21, -41], [-6, -59], [-6, -60], [-6, -61], [-6, -61], [-6, -58], [-6, -57], [-6, -59], [-6, -60], [-6, -61], [-6, -61], [-6, -58], [-6, -57], [13, -71], [13, -72], [13, -73], [13, -73], [12, -71], [12, -70], [13, -71], [13, -72], [13, -73], [13, -73], [12, -71], [12, -70], [-12, -71], [-12, -72], [-12, -73], [-12, -73], [-11, -71], [-11, -70], [-12, -71], [-12, -72], [-12, -73], [-12, -73], [-11, -71], [-11, -70], [7, -59], [7, -60], [7, -61], [7, -61], [7, -58], [7, -57], [7, -59], [7, -60], [7, -61], [7, -61], [7, -58], [7, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 56, 58, 57, 59, 54, 55, 56, 58, 57, 59, 54, 55, 62, 64, 63, 65, 61, 60, 62, 64, 63, 65, 61, 60, 62, 64, 63, 65, 61, 60, 62, 64, 63, 65, 61, 60, 56, 58, 57, 59, 54, 55, 56, 58, 57, 59, 54, 55, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99]
};

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 41, 80, 117, 155, 192, 231, 270, 308, 346, 384, 420, 457, 495, 531, 570, 611, 650, 686, 720, 754, 787, 817, 858, 904, 948, 979, 1018, 1063, 1104, 1137, 1170, 1202, 1236, 1269, 1309, 1351, 1393, 1432, 1470, 1507, 1545, 1582, 1621, 1659, 1698, 1746, 1789, 1826, 1869, 1920, 1964, 2011, 2058, 2108, 2150, 2192, 2234, 2279, 2321, 2362, 2401, 2439, 2479, 2521, 2561, 2600, 2641, 2683, 2722, 2762, 2828, 2894, 2936, 2978, 3020, 3062, 3121, 3179, 3215, 3252, 3289, 3321, 3371, 3419, 3458, 3497, 3535, 3574, 3627, 3675, 3714, 3754, 3794, 3833, 3877, 3920, 3975, 4031, 4087, 4142, 4194, 4241, 4288, 4338, 4386, 4440, 4496, 4552, 4595, 4640, 4684, 4727, 4771, 4816, 4857],
  widths: [41, 39, 37, 38, 37, 39, 39, 38, 38, 38, 36, 37, 38, 36, 39, 41, 39, 36, 34, 34, 33, 30, 41, 46, 44, 31, 39, 45, 41, 33, 33, 32, 34, 33, 40, 42, 42, 39, 38, 37, 38, 37, 39, 38, 39, 48, 43, 37, 43, 51, 44, 47, 47, 50, 42, 42, 42, 45, 42, 41, 39, 38, 40, 42, 40, 39, 41, 42, 39, 40, 66, 66, 42, 42, 42, 42, 59, 58, 36, 37, 37, 32, 50, 48, 39, 39, 38, 39, 53, 48, 39, 40, 40, 39, 44, 43, 55, 56, 56, 55, 52, 47, 47, 50, 48, 54, 56, 56, 43, 45, 44, 43, 44, 45, 41, 41],
  heights: [73, 73, 72, 71, 69, 70, 69, 70, 74, 69, 67, 70, 74, 71, 67, 64, 67, 67, 69, 70, 73, 70, 69, 67, 67, 67, 66, 67, 68, 70, 71, 69, 70, 66, 66, 65, 66, 68, 71, 69, 69, 68, 71, 69, 70, 48, 47, 50, 49, 43, 60, 58, 63, 62, 73, 74, 74, 73, 72, 72, 71, 72, 72, 70, 69, 70, 67, 66, 70, 67, 46, 52, 68, 68, 68, 68, 70, 69, 72, 72, 72, 72, 67, 68, 75, 75, 76, 76, 67, 67, 75, 75, 76, 76, 73, 72, 73, 74, 75, 72, 70, 69, 72, 72, 73, 74, 73, 72, 72, 72, 67, 66, 76, 73, 64, 63],
  bodyOffsets: [[3, -27], [3, -27], [3, -27], [2, -27], [2, -27], [2, -27], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [1, -27], [1, -27], [1, -27], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [-2, -27], [-2, -27], [-2, -27], [1, -27], [1, -26], [1, -24], [1, -23], [1, -27], [0, -27], [0, -24], [0, -23], [0, -26], [-1, -27], [-2, -27], [-1, -26], [0, -28], [0, -26], [-1, -24], [1, -23], [1, -30], [-2, -29], [-1, -28], [-1, -29], [0, -31], [-2, -31], [0, -28], [-1, -29], [1, -30], [1, -28], [0, -27], [0, -29], [1, -33], [-1, -32], [-1, -30], [0, -31], [1, -31], [1, -28], [1, -27], [1, -28], [1, -31], [1, -28], [1, -27], [1, -28], [0, -30], [0, -28], [0, -27], [0, -29], [0, -33], [1, -32], [1, -30], [0, -31], [-1, -30], [3, -29], [1, -28], [1, -29], [1, -31], [3, -31], [1, -28], [2, -29], [0, -26], [2, -27], [3, -27], [2, -26], [0, -28], [0, -26], [1, -24], [0, -23], [-1, -20], [-1, -20], [-1, -20], [0, -20], [0, -20], [0, -20], [-5, -19], [-5, -19], [-5, -19], [0, -19], [0, -19], [0, -19], [1, -22], [1, -22], [1, -22], [1, -19], [1, -19], [1, -19], [6, -19], [6, -19], [6, -19], [1, -20], [1, -20], [1, -20], [4, -21], [10, -20], [4, -21], [4, -21], [10, -20], [4, -21], [-2, -23], [-4, -22], [-2, -23], [-2, -23], [-4, -22], [-2, -23], [3, -23], [4, -22], [3, -23], [3, -23], [4, -22], [3, -23], [-4, -21], [-9, -20], [-4, -21], [-4, -21], [-9, -20], [-4, -21], [1, -27], [1, -28], [1, -28], [1, -27], [1, -27], [1, -27], [1, -27], [1, -28], [1, -28], [1, -27], [1, -27], [1, -27], [-1, -28], [-2, -29], [-1, -29], [0, -28], [-1, -27], [-1, -28], [-1, -28], [-2, -29], [-1, -29], [0, -28], [-1, -27], [-1, -28], [2, -28], [2, -29], [1, -29], [0, -28], [1, -27], [2, -28], [2, -28], [2, -29], [1, -29], [0, -28], [1, -27], [2, -28], [-1, -27], [-1, -28], [-1, -28], [0, -27], [-1, -27], [0, -27], [-1, -27], [-1, -28], [-1, -28], [0, -27], [-1, -27], [0, -27], [2, -27], [-5, -32], [-5, -33], [-11, -19], [-12, -19], [2, -27], [-5, -32], [-5, -33], [-11, -19], [-12, -19], [-2, -28], [0, -30], [2, -28], [-3, -24], [-4, -23], [-2, -28], [0, -30], [2, -28], [-3, -24], [-4, -23], [2, -28], [0, -30], [-1, -28], [4, -24], [5, -23], [2, -28], [0, -30], [-1, -28], [4, -24], [5, -23], [-1, -27], [6, -32], [6, -33], [11, -19], [13, -19], [-1, -27], [6, -32], [6, -33], [11, -19], [13, -19], [0, -26], [-1, -28], [0, -26], [0, -26], [-1, -28], [0, -26], [-2, -27], [-1, -23], [-2, -27], [-2, -27], [-1, -23], [-2, -27], [3, -27], [1, -23], [3, -27], [3, -27], [1, -23], [3, -27], [1, -26], [1, -28], [1, -26], [1, -26], [1, -28], [1, -26], [2, -27], [2, -27], [7, -23], [7, -23], [-7, -23], [-7, -23], [-2, -27], [-2, -27], [6, -12], [6, -12], [13, -7], [13, -7], [-13, -7], [-13, -7], [-6, -12], [-6, -12], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [0, -32], [-1, -32], [-1, -32], [-7, -32], [-13, -27], [-15, -26], [-15, -26], [-15, -26], [-15, -26], [0, -32], [-1, -32], [-1, -32], [-7, -32], [-13, -27], [-15, -26], [-15, -26], [-15, -26], [-15, -26], [-1, -29], [0, -29], [0, -29], [0, -29], [-13, -29], [-14, -31], [-14, -31], [-14, -31], [-14, -31], [-1, -29], [0, -29], [0, -29], [0, -29], [-13, -29], [-14, -31], [-14, -31], [-14, -31], [-14, -31], [1, -29], [1, -29], [1, -29], [0, -29], [13, -29], [14, -31], [14, -31], [14, -31], [14, -31], [1, -29], [1, -29], [1, -29], [0, -29], [13, -29], [14, -31], [14, -31], [14, -31], [14, -31], [0, -32], [1, -32], [1, -32], [7, -32], [14, -27], [15, -26], [15, -26], [15, -26], [15, -26], [0, -32], [1, -32], [1, -32], [7, -32], [14, -27], [15, -26], [15, -26], [15, -26], [15, -26], [1, -28], [1, -28], [1, -29], [1, -29], [-2, -18], [-6, -17], [-6, -17], [-6, -17], [1, -28], [1, -28], [1, -29], [1, -29], [-2, -18], [-6, -17], [-6, -17], [-6, -17], [-1, -29], [-2, -29], [-2, -30], [-2, -30], [-4, -10], [-4, -9], [-4, -9], [-4, -9], [-1, -29], [-2, -29], [-2, -30], [-2, -30], [-4, -10], [-4, -9], [-4, -9], [-4, -9], [2, -29], [2, -29], [2, -30], [3, -30], [4, -10], [5, -9], [5, -9], [5, -9], [2, -29], [2, -29], [2, -30], [3, -30], [4, -10], [5, -9], [5, -9], [5, -9], [0, -28], [0, -28], [-1, -29], [0, -29], [3, -18], [6, -17], [6, -17], [6, -17], [0, -28], [0, -28], [-1, -29], [0, -29], [3, -18], [6, -17], [6, -17], [6, -17], [0, -27], [2, -28], [1, -28], [-9, -23], [-12, -22], [-14, -21], [0, -27], [2, -28], [1, -28], [-9, -23], [-12, -22], [-14, -21], [-3, -29], [-3, -29], [-4, -29], [-12, -30], [-13, -29], [-13, -29], [-3, -29], [-3, -29], [-4, -29], [-12, -30], [-13, -29], [-13, -29], [4, -29], [3, -29], [4, -29], [12, -30], [13, -29], [13, -29], [4, -29], [3, -29], [4, -29], [12, -30], [13, -29], [13, -29], [1, -27], [-2, -28], [-1, -28], [10, -23], [12, -22], [15, -21], [1, -27], [-2, -28], [-1, -28], [10, -23], [12, -22], [15, -21]],
  anchorHead: [[1, -57], [-4, -58], [7, -58], [-5, -58], [-4, -58], [0, -57], [-4, -58], [12, -74], [-5, -58], [12, -74], [12, -73], [-4, -58], [12, -73], [-10, -74], [12, -74], [-11, -74], [5, -58], [11, -73], [5, -58], [6, -58], [-11, -74], [6, -58], [1, -57], [5, -58], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [0, -37], [-5, -38], [6, -38], [-5, -38], [-4, -38], [0, -37], [-5, -38], [11, -54], [-6, -38], [11, -54], [11, -53], [-4, -38], [11, -53], [-11, -54], [12, -54], [-10, -54], [6, -38], [12, -53], [6, -38], [7, -38], [-10, -54], [6, -38], [0, -36], [5, -38], [-3, -65], [-6, -49], [-3, -65], [-3, -65], [-6, -49], [-3, -65], [-14, -66], [-19, -53], [-14, -66], [-14, -66], [-19, -53], [-14, -66], [15, -66], [20, -53], [15, -66], [15, -66], [20, -53], [15, -66], [4, -65], [7, -49], [4, -65], [4, -65], [7, -49], [4, -65], [-5, -58], [-5, -59], [-5, -59], [-5, -58], [-5, -57], [-5, -57], [-5, -58], [-5, -59], [-5, -59], [-5, -58], [-5, -57], [-5, -57], [12, -74], [12, -75], [12, -75], [12, -74], [12, -73], [12, -73], [12, -74], [12, -75], [12, -75], [12, -74], [12, -73], [12, -73], [-11, -74], [-11, -75], [-11, -75], [-11, -74], [-11, -73], [-11, -73], [-11, -74], [-11, -75], [-11, -75], [-11, -74], [-11, -73], [-11, -73], [6, -58], [6, -59], [6, -59], [6, -58], [6, -57], [6, -57], [6, -58], [6, -59], [6, -59], [6, -58], [6, -57], [6, -57], [-5, -58], [-10, -55], [-9, -55], [-25, -44], [-26, -42], [-5, -58], [-10, -55], [-9, -55], [-25, -44], [-26, -42], [12, -74], [7, -74], [8, -74], [1, -66], [-1, -65], [12, -74], [7, -74], [8, -74], [1, -66], [-1, -65], [-11, -74], [-6, -74], [-7, -74], [0, -66], [2, -65], [-11, -74], [-6, -74], [-7, -74], [0, -66], [2, -65], [6, -58], [11, -55], [10, -55], [26, -44], [27, -42], [6, -58], [11, -55], [10, -55], [26, -44], [27, -42], [18, -67], [19, -68], [18, -67], [18, -67], [19, -68], [18, -67], [7, -76], [9, -72], [7, -76], [7, -76], [9, -72], [7, -76], [-6, -76], [-8, -72], [-6, -76], [-6, -76], [-8, -72], [-6, -76], [-17, -67], [-18, -68], [-17, -67], [-17, -67], [-18, -68], [-17, -67], [24, -66], [24, -66], [24, -69], [24, -69], [-23, -69], [-23, -69], [-23, -66], [-23, -66], [47, -29], [47, -29], [56, 15], [56, 15], [-55, 15], [-55, 15], [-46, -29], [-46, -29], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [0, -57], [2, -57], [2, -57], [-9, -57], [-23, -48], [-23, -47], [-23, -47], [-23, -47], [-23, -47], [0, -57], [2, -57], [2, -57], [-9, -57], [-23, -48], [-23, -47], [-23, -47], [-23, -47], [-23, -47], [11, -75], [11, -73], [11, -73], [10, -75], [-7, -71], [-9, -74], [-9, -74], [-9, -74], [-9, -74], [11, -75], [11, -73], [11, -73], [10, -75], [-7, -71], [-9, -74], [-9, -74], [-9, -74], [-9, -74], [-10, -75], [-10, -73], [-10, -73], [-9, -75], [8, -71], [10, -74], [10, -74], [10, -74], [10, -74], [-10, -75], [-10, -73], [-10, -73], [-9, -75], [8, -71], [10, -74], [10, -74], [10, -74], [10, -74], [1, -57], [-1, -57], [-1, -57], [10, -57], [24, -48], [24, -47], [24, -47], [24, -47], [24, -47], [1, -57], [-1, -57], [-1, -57], [10, -57], [24, -48], [24, -47], [24, -47], [24, -47], [24, -47], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-16, -40], [-17, -38], [-17, -38], [-17, -38], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-16, -40], [-17, -38], [-17, -38], [-17, -38], [12, -76], [12, -77], [12, -77], [10, -76], [-2, -51], [-2, -50], [-2, -50], [-2, -50], [12, -76], [12, -77], [12, -77], [10, -76], [-2, -51], [-2, -50], [-2, -50], [-2, -50], [-11, -76], [-11, -77], [-11, -77], [-9, -76], [3, -51], [3, -50], [3, -50], [3, -50], [-11, -76], [-11, -77], [-11, -77], [-9, -76], [3, -51], [3, -50], [3, -50], [3, -50], [5, -59], [5, -59], [5, -59], [5, -59], [17, -40], [18, -38], [18, -38], [18, -38], [5, -59], [5, -59], [5, -59], [5, -59], [17, -40], [18, -38], [18, -38], [18, -38], [-5, -58], [-4, -59], [-4, -60], [-17, -53], [-18, -51], [-18, -50], [-5, -58], [-4, -59], [-4, -60], [-17, -53], [-18, -51], [-18, -50], [12, -75], [13, -75], [13, -76], [3, -77], [1, -76], [1, -75], [12, -75], [13, -75], [13, -76], [3, -77], [1, -76], [1, -75], [-11, -75], [-12, -75], [-12, -76], [-2, -77], [0, -76], [0, -75], [-11, -75], [-12, -75], [-12, -76], [-2, -77], [0, -76], [0, -75], [6, -58], [5, -59], [5, -60], [18, -53], [19, -51], [19, -50], [6, -58], [5, -59], [5, -60], [18, -53], [19, -51], [19, -50]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 108, 109, 110, 111, 1, 108, 109, 110, 111, 3, 112, 113, 114, 115, 3, 112, 113, 114, 115, 3, 112, 113, 114, 115, 3, 112, 113, 114, 115, 1, 108, 109, 110, 111, 1, 108, 109, 110, 111, 66, 67, 66, 66, 67, 66, 68, 69, 68, 68, 69, 68, 68, 69, 68, 68, 69, 68, 66, 67, 66, 66, 67, 66, 67, 67, 69, 69, 69, 69, 67, 67, 70, 70, 71, 71, 71, 71, 70, 70, 0, 0, 0, 0, 0, 0, 0, 0, 72, 73, 74, 75, 76, 77, 77, 77, 77, 72, 73, 74, 75, 76, 77, 77, 77, 77, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 72, 73, 74, 75, 76, 77, 77, 77, 77, 72, 73, 74, 75, 76, 77, 77, 77, 77, 84, 85, 86, 87, 88, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 84, 85, 86, 87, 88, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 96, 97, 98, 99, 100, 101, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 102, 103, 104, 105, 106, 107, 102, 103, 104, 105, 106, 107, 102, 103, 104, 105, 106, 107, 96, 97, 98, 99, 100, 101, 96, 97, 98, 99, 100, 101]
};

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 71, 106, 146, 185, 223, 261, 298, 337, 375, 411, 445, 481, 514, 552, 598, 639, 672, 708, 748, 784, 813, 855, 903, 945, 971, 1012, 1060, 1100, 1131, 1166, 1200, 1235, 1266, 1304, 1351, 1395, 1430, 1464, 1495, 1529, 1564, 1597, 1628, 1661, 1700, 1748, 1804, 1857, 1894, 1928, 1966, 2009, 2058, 2097, 2136, 2175, 2216, 2258, 2298, 2337, 2376, 2415, 2454, 2493, 2532, 2578, 2636, 2692, 2746, 2787, 2844, 2888, 2931, 2975, 3021, 3077, 3141, 3176, 3208, 3240, 3306, 3370, 3430, 3469, 3508, 3550, 3598, 3646, 3692, 3732, 3774, 3821, 3870, 3924, 3979, 4034, 4084, 4120, 4161, 4205, 4252, 4305, 4359, 4413, 4464, 4515, 4570, 4613, 4658, 4710, 4755, 4802, 4839, 4873],
  widths: [38, 33, 35, 40, 39, 38, 38, 37, 39, 38, 36, 34, 36, 33, 38, 46, 41, 33, 36, 40, 36, 29, 42, 48, 42, 26, 41, 48, 40, 31, 35, 34, 35, 31, 38, 47, 44, 35, 34, 31, 34, 35, 33, 31, 33, 39, 48, 56, 53, 37, 34, 38, 43, 49, 39, 39, 39, 41, 42, 40, 39, 39, 39, 39, 39, 39, 46, 58, 56, 54, 41, 57, 44, 43, 44, 46, 56, 64, 35, 32, 32, 66, 64, 60, 39, 39, 42, 48, 48, 46, 40, 42, 47, 49, 54, 55, 55, 50, 36, 41, 44, 47, 53, 54, 54, 51, 51, 55, 43, 45, 52, 45, 47, 37, 34, 56],
  heights: [74, 73, 71, 71, 70, 73, 74, 78, 71, 67, 68, 73, 78, 73, 70, 68, 69, 69, 71, 73, 75, 68, 67, 66, 64, 65, 64, 65, 67, 68, 70, 67, 67, 63, 64, 63, 64, 65, 69, 67, 63, 65, 69, 66, 65, 59, 57, 42, 39, 38, 68, 62, 60, 52, 70, 73, 75, 75, 75, 73, 64, 66, 68, 69, 68, 66, 77, 72, 68, 64, 73, 76, 70, 65, 68, 59, 47, 41, 75, 77, 76, 66, 67, 67, 67, 67, 67, 68, 65, 63, 72, 72, 71, 71, 67, 66, 66, 71, 68, 66, 65, 67, 65, 65, 64, 65, 74, 77, 69, 67, 65, 68, 70, 65, 65, 68],
  bodyOffsets: [[0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [0, -29], [1, -28], [1, -25], [1, -28], [0, -32], [-1, -32], [-1, -27], [0, -26], [0, -28], [-3, -29], [-3, -29], [-1, -28], [0, -30], [0, -29], [-1, -26], [0, -25], [0, -27], [-1, -26], [-2, -26], [-1, -27], [1, -28], [-2, -28], [-2, -26], [-2, -26], [0, -29], [-2, -27], [-2, -27], [-2, -28], [-1, -31], [-4, -30], [-2, -28], [-2, -29], [0, -29], [0, -26], [1, -26], [0, -28], [0, -29], [0, -26], [0, -26], [0, -27], [1, -29], [3, -27], [2, -27], [3, -28], [2, -31], [4, -30], [3, -28], [2, -29], [1, -27], [1, -26], [2, -26], [1, -27], [-1, -28], [3, -28], [2, -26], [2, -26], [1, -28], [3, -29], [3, -29], [2, -28], [1, -30], [0, -29], [1, -26], [0, -25], [0, -10], [0, -10], [0, -10], [-3, -11], [-3, -11], [-3, -11], [-13, -18], [-13, -18], [-13, -18], [-11, -18], [-11, -18], [-11, -18], [-3, -19], [-3, -19], [-3, -19], [12, -18], [12, -18], [12, -18], [13, -18], [13, -18], [13, -18], [3, -11], [3, -11], [3, -11], [0, -23], [-2, -20], [0, -23], [0, -23], [-2, -20], [0, -23], [0, -20], [-5, -15], [0, -20], [0, -20], [-5, -15], [0, -20], [1, -20], [6, -15], [1, -20], [1, -20], [6, -15], [1, -20], [0, -23], [2, -20], [0, -23], [0, -23], [2, -20], [0, -23], [0, -25], [0, -26], [0, -27], [1, -27], [1, -27], [0, -26], [0, -25], [0, -26], [0, -27], [1, -27], [1, -27], [0, -26], [0, -22], [0, -23], [0, -24], [0, -24], [0, -24], [0, -23], [0, -22], [0, -23], [0, -24], [0, -24], [0, -24], [0, -23], [1, -22], [1, -23], [1, -24], [1, -24], [1, -24], [1, -23], [1, -22], [1, -23], [1, -24], [1, -24], [1, -24], [1, -23], [1, -25], [1, -26], [1, -27], [0, -27], [-1, -27], [0, -26], [1, -25], [1, -26], [1, -27], [0, -27], [-1, -27], [0, -26], [2, -36], [4, -42], [-10, -27], [-12, -26], [-12, -26], [2, -36], [4, -42], [-10, -27], [-12, -26], [-12, -26], [-4, -27], [3, -29], [-2, -29], [0, -29], [0, -29], [-4, -27], [3, -29], [-2, -29], [0, -29], [0, -29], [5, -27], [-2, -29], [2, -29], [1, -29], [1, -29], [5, -27], [-2, -29], [2, -29], [1, -29], [1, -29], [-2, -36], [-4, -42], [10, -27], [12, -26], [12, -26], [-2, -36], [-4, -42], [10, -27], [12, -26], [12, -26], [9, -28], [16, -31], [9, -28], [9, -28], [16, -31], [9, -28], [-6, -19], [2, -18], [-6, -19], [-6, -19], [2, -18], [-6, -19], [6, -19], [-2, -18], [6, -19], [6, -19], [-2, -18], [6, -19], [-9, -28], [-16, -31], [-9, -28], [-9, -28], [-16, -31], [-9, -28], [20, -32], [20, -32], [6, -20], [6, -20], [-6, -20], [-6, -20], [-20, -32], [-20, -32], [4, -9], [4, -9], [5, -6], [5, -6], [-5, -6], [-5, -6], [-4, -9], [-4, -9], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [8, -38], [9, -39], [9, -39], [-8, -23], [-8, -23], [-9, -23], [-9, -23], [-9, -23], [-9, -23], [8, -38], [9, -39], [9, -39], [-8, -23], [-8, -23], [-9, -23], [-9, -23], [-9, -23], [-9, -23], [10, -23], [10, -24], [8, -24], [-12, -28], [-13, -28], [-10, -26], [-10, -26], [-10, -26], [-10, -26], [10, -23], [10, -24], [8, -24], [-12, -28], [-13, -28], [-10, -26], [-10, -26], [-10, -26], [-10, -26], [-9, -23], [-9, -24], [-8, -24], [12, -28], [13, -28], [10, -26], [10, -26], [10, -26], [10, -26], [-9, -23], [-9, -24], [-8, -24], [12, -28], [13, -28], [10, -26], [10, -26], [10, -26], [10, -26], [-7, -38], [-9, -39], [-9, -39], [8, -23], [8, -23], [9, -23], [9, -23], [9, -23], [9, -23], [-7, -38], [-9, -39], [-9, -39], [8, -23], [8, -23], [9, -23], [9, -23], [9, -23], [9, -23], [0, -26], [-2, -26], [0, -25], [1, -25], [4, -23], [5, -23], [5, -23], [4, -25], [0, -26], [-2, -26], [0, -25], [1, -25], [4, -23], [5, -23], [5, -23], [4, -25], [0, -24], [-1, -24], [0, -25], [2, -26], [7, -22], [8, -22], [8, -22], [7, -24], [0, -24], [-1, -24], [0, -25], [2, -26], [7, -22], [8, -22], [8, -22], [7, -24], [0, -24], [2, -24], [0, -25], [-1, -26], [-6, -22], [-8, -22], [-8, -22], [-6, -24], [0, -24], [2, -24], [0, -25], [-1, -26], [-6, -22], [-8, -22], [-8, -22], [-6, -24], [0, -26], [2, -26], [1, -25], [0, -25], [-4, -23], [-4, -23], [-4, -23], [-4, -25], [0, -26], [2, -26], [1, -25], [0, -25], [-4, -23], [-4, -23], [-4, -23], [-4, -25], [0, -24], [1, -26], [0, -27], [0, -28], [-1, -28], [-11, -21], [0, -24], [1, -26], [0, -27], [0, -28], [-1, -28], [-11, -21], [-2, -22], [-4, -24], [-4, -25], [-1, -22], [0, -22], [-10, -29], [-2, -22], [-4, -24], [-4, -25], [-1, -22], [0, -22], [-10, -29], [3, -22], [5, -24], [5, -25], [2, -22], [0, -22], [10, -29], [3, -22], [5, -24], [5, -25], [2, -22], [0, -22], [10, -29], [1, -24], [0, -26], [1, -27], [1, -28], [2, -28], [11, -21], [1, -24], [0, -26], [1, -27], [1, -28], [2, -28], [11, -21]],
  anchorHead: [[0, -60], [-5, -61], [5, -61], [-5, -61], [-5, -61], [-1, -60], [-1, -60], [15, -76], [-2, -61], [14, -77], [14, -76], [-2, -60], [10, -76], [-11, -77], [10, -77], [-13, -76], [3, -60], [9, -75], [3, -60], [4, -60], [-13, -76], [6, -61], [2, -60], [6, -61], [-1, -61], [-1, -60], [-1, -58], [-1, -59], [-1, -61], [-1, -60], [-1, -58], [-1, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-3, -60], [-3, -59], [-3, -57], [-3, -58], [-3, -60], [-3, -59], [-3, -57], [-3, -58], [11, -78], [11, -77], [11, -75], [11, -76], [11, -78], [11, -77], [11, -75], [11, -76], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [-10, -78], [-10, -77], [-10, -75], [-10, -76], [-10, -78], [-10, -77], [-10, -75], [-10, -76], [4, -60], [4, -59], [4, -57], [4, -58], [4, -60], [4, -59], [4, -57], [4, -58], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [-1, -36], [-6, -36], [3, -36], [-5, -36], [-5, -36], [-2, -36], [-4, -36], [11, -52], [-5, -35], [13, -51], [13, -50], [-3, -35], [11, -50], [-11, -50], [11, -50], [-13, -51], [4, -35], [9, -50], [5, -35], [6, -35], [-11, -51], [6, -36], [2, -35], [6, -36], [-13, -67], [-18, -40], [-13, -67], [-13, -67], [-18, -40], [-13, -67], [-11, -63], [-17, -39], [-11, -63], [-11, -63], [-17, -39], [-11, -63], [12, -63], [18, -39], [12, -63], [12, -63], [18, -39], [12, -63], [14, -67], [19, -40], [14, -67], [14, -67], [19, -40], [14, -67], [-4, -55], [-4, -58], [-4, -60], [-4, -61], [-4, -60], [-4, -58], [-4, -55], [-4, -58], [-4, -60], [-4, -61], [-4, -60], [-4, -58], [13, -69], [13, -71], [13, -72], [13, -73], [13, -72], [13, -70], [13, -69], [13, -71], [13, -72], [13, -73], [13, -72], [13, -70], [-12, -69], [-12, -71], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [-12, -69], [-12, -71], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [5, -55], [5, -58], [5, -60], [5, -61], [5, -60], [5, -58], [5, -55], [5, -58], [5, -60], [5, -61], [5, -60], [5, -58], [-6, -71], [-3, -74], [-25, -57], [-29, -54], [-29, -54], [-6, -71], [-3, -74], [-25, -57], [-29, -54], [-29, -54], [13, -78], [18, -80], [3, -72], [1, -71], [1, -71], [13, -78], [18, -80], [3, -72], [1, -71], [1, -71], [-12, -78], [-17, -80], [-2, -72], [0, -71], [0, -71], [-12, -78], [-17, -80], [-2, -72], [0, -71], [0, -71], [7, -71], [4, -74], [26, -57], [30, -54], [30, -54], [7, -71], [4, -74], [26, -57], [30, -54], [30, -54], [29, -72], [39, -74], [29, -72], [29, -72], [39, -74], [29, -72], [12, -69], [23, -65], [12, -69], [12, -69], [23, -65], [12, -69], [-11, -69], [-22, -65], [-11, -69], [-11, -69], [-22, -65], [-11, -69], [-28, -72], [-38, -74], [-28, -72], [-28, -72], [-38, -74], [-28, -72], [46, -73], [46, -73], [31, -64], [31, -64], [-30, -64], [-30, -64], [-45, -73], [-45, -73], [40, -27], [40, -27], [45, 12], [45, 12], [-44, 12], [-44, 12], [-39, -27], [-39, -27], [0, -60], [0, -60], [0, -60], [0, -60], [0, -60], [0, -60], [0, -60], [0, -60], [8, -71], [9, -73], [6, -72], [-17, -43], [-18, -45], [-18, -46], [-18, -46], [-18, -46], [-18, -46], [8, -71], [9, -73], [6, -72], [-17, -43], [-18, -45], [-18, -46], [-18, -46], [-18, -46], [-18, -46], [24, -70], [25, -71], [17, -72], [-4, -72], [-6, -72], [-4, -71], [-4, -71], [-4, -71], [-4, -71], [24, -70], [25, -71], [17, -72], [-4, -72], [-6, -72], [-4, -71], [-4, -71], [-4, -71], [-4, -71], [-23, -70], [-24, -71], [-16, -72], [5, -72], [7, -72], [5, -71], [5, -71], [5, -71], [5, -71], [-23, -70], [-24, -71], [-16, -72], [5, -72], [7, -72], [5, -71], [5, -71], [5, -71], [5, -71], [-7, -71], [-8, -73], [-5, -72], [18, -43], [19, -45], [19, -46], [19, -46], [19, -46], [19, -46], [-7, -71], [-8, -73], [-5, -72], [18, -43], [19, -45], [19, -46], [19, -46], [19, -46], [19, -46], [-2, -57], [1, -57], [3, -56], [3, -54], [5, -51], [6, -50], [6, -50], [4, -54], [-2, -57], [1, -57], [3, -56], [3, -54], [5, -51], [6, -50], [6, -50], [4, -54], [14, -72], [15, -72], [17, -71], [19, -70], [24, -69], [26, -69], [26, -68], [26, -71], [14, -72], [15, -72], [17, -71], [19, -70], [24, -69], [26, -69], [26, -68], [26, -71], [-13, -72], [-14, -72], [-16, -71], [-18, -70], [-23, -69], [-25, -69], [-25, -68], [-25, -71], [-13, -72], [-14, -72], [-16, -71], [-18, -70], [-23, -69], [-25, -69], [-25, -68], [-25, -71], [3, -57], [0, -57], [-2, -56], [-2, -54], [-4, -51], [-5, -50], [-5, -50], [-3, -54], [3, -57], [0, -57], [-2, -56], [-2, -54], [-4, -51], [-5, -50], [-5, -50], [-3, -54], [-3, -54], [-3, -59], [-3, -61], [-4, -59], [-3, -58], [-19, -45], [-3, -54], [-3, -59], [-3, -61], [-4, -59], [-3, -58], [-19, -45], [11, -68], [13, -71], [14, -74], [11, -70], [10, -69], [2, -69], [11, -68], [13, -71], [14, -74], [11, -70], [10, -69], [2, -69], [-10, -68], [-12, -71], [-13, -74], [-10, -70], [-9, -69], [-1, -69], [-10, -68], [-12, -71], [-13, -74], [-10, -70], [-9, -69], [-1, -69], [4, -54], [4, -59], [4, -61], [5, -59], [4, -58], [20, -45], [4, -54], [4, -59], [4, -61], [5, -59], [4, -58], [20, -45]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110]
};

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 34, 74, 112, 144, 182, 219, 254, 288, 323, 360, 395, 428, 463, 497, 528, 563, 604, 641, 670, 704, 743, 772, 813, 861, 906, 934, 972, 1019, 1057, 1096, 1142, 1186, 1220, 1259, 1299, 1338, 1373, 1411, 1448, 1486, 1523, 1561, 1598, 1636, 1673, 1721, 1767, 1811, 1857, 1903, 1940, 1977, 2014, 2053, 2101, 2148, 2194, 2240, 2286, 2333, 2377, 2420, 2462, 2504, 2547, 2591, 2639, 2683, 2739, 2791, 2835, 2877, 2931, 2981, 3026, 3073, 3112, 3154, 3205, 3250, 3313, 3364, 3416, 3456, 3495, 3556, 3620, 3663, 3703, 3742, 3800, 3858, 3901, 3940, 3976, 4020, 4068, 4129, 4171, 4211, 4252, 4311, 4373, 4434, 4486, 4534, 4600],
  widths: [34, 40, 38, 32, 38, 37, 35, 34, 35, 37, 35, 33, 35, 34, 31, 35, 41, 37, 29, 34, 39, 29, 41, 48, 45, 28, 38, 47, 38, 39, 46, 44, 34, 39, 40, 39, 35, 38, 37, 38, 37, 38, 37, 38, 37, 48, 46, 44, 46, 46, 37, 37, 37, 39, 48, 47, 46, 46, 46, 47, 44, 43, 42, 42, 43, 44, 48, 44, 56, 52, 44, 42, 54, 50, 45, 47, 39, 42, 51, 45, 63, 51, 52, 40, 39, 61, 64, 43, 40, 39, 58, 58, 43, 39, 36, 44, 48, 61, 42, 40, 41, 59, 62, 61, 52, 48, 66, 58],
  heights: [70, 70, 68, 70, 67, 67, 64, 65, 67, 67, 64, 66, 67, 72, 70, 68, 67, 70, 68, 66, 68, 66, 65, 63, 63, 65, 64, 63, 64, 66, 63, 64, 70, 71, 69, 70, 67, 62, 63, 68, 65, 63, 63, 67, 64, 46, 48, 46, 49, 43, 62, 53, 63, 51, 68, 70, 71, 71, 70, 69, 64, 66, 67, 67, 66, 65, 83, 76, 65, 60, 72, 72, 56, 55, 57, 55, 54, 51, 51, 46, 37, 41, 67, 63, 60, 64, 62, 72, 71, 71, 61, 60, 64, 65, 65, 68, 69, 61, 63, 65, 65, 64, 62, 61, 68, 72, 61, 60],
  bodyOffsets: [[0, -25], [0, -25], [0, -25], [1, -26], [1, -26], [1, -26], [-2, -26], [-2, -26], [-2, -26], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [2, -26], [2, -26], [2, -26], [-1, -26], [-1, -26], [-1, -26], [2, -26], [2, -27], [1, -24], [2, -24], [2, -26], [2, -27], [2, -25], [2, -24], [1, -23], [1, -26], [2, -26], [1, -24], [2, -24], [2, -27], [1, -27], [1, -24], [2, -24], [-2, -23], [-3, -22], [0, -23], [1, -24], [-3, -24], [-2, -22], [1, -23], [-2, -27], [-3, -27], [-3, -25], [-3, -23], [-2, -24], [-2, -24], [-2, -22], [-2, -24], [0, -26], [0, -26], [-1, -23], [0, -22], [-1, -24], [0, -26], [0, -23], [0, -23], [3, -27], [3, -27], [3, -25], [3, -23], [3, -24], [2, -24], [3, -22], [3, -24], [-1, -24], [3, -23], [3, -22], [1, -23], [-1, -24], [3, -24], [3, -22], [-1, -23], [-1, -23], [0, -26], [-1, -26], [0, -24], [-1, -24], [-1, -27], [-1, -27], [0, -24], [0, -17], [0, -17], [0, -17], [0, -17], [0, -17], [0, -17], [1, -17], [1, -17], [1, -17], [0, -16], [0, -16], [0, -16], [-2, -19], [-2, -19], [-2, -19], [0, -16], [0, -16], [0, -16], [-1, -17], [-1, -17], [-1, -17], [0, -17], [0, -17], [0, -17], [0, -21], [0, -16], [0, -21], [0, -21], [0, -16], [0, -21], [0, -20], [0, -17], [0, -20], [0, -20], [0, -17], [0, -20], [1, -20], [1, -17], [1, -20], [1, -20], [1, -17], [1, -20], [1, -21], [1, -16], [1, -21], [1, -21], [1, -16], [1, -21], [0, -25], [1, -26], [1, -26], [1, -26], [1, -26], [1, -25], [0, -25], [1, -26], [1, -26], [1, -26], [1, -26], [1, -25], [0, -22], [1, -23], [1, -23], [1, -23], [1, -23], [0, -22], [0, -22], [1, -23], [1, -23], [1, -23], [1, -23], [0, -22], [0, -22], [0, -23], [-1, -23], [-1, -23], [0, -23], [0, -22], [0, -22], [0, -23], [-1, -23], [-1, -23], [0, -23], [0, -22], [0, -25], [0, -26], [-1, -26], [-1, -26], [-1, -26], [0, -25], [0, -25], [0, -26], [-1, -26], [-1, -26], [-1, -26], [0, -25], [0, -36], [2, -43], [-7, -21], [-7, -20], [-7, -20], [0, -36], [2, -43], [-7, -21], [-7, -20], [-7, -20], [0, -27], [1, -27], [-10, -21], [-10, -20], [-10, -20], [0, -27], [1, -27], [-10, -21], [-10, -20], [-10, -20], [0, -27], [-1, -27], [10, -21], [10, -20], [10, -20], [0, -27], [-1, -27], [10, -21], [10, -20], [10, -20], [0, -36], [-2, -43], [7, -21], [7, -20], [7, -20], [0, -36], [-2, -43], [7, -21], [7, -20], [7, -20], [14, -22], [19, -23], [14, -22], [14, -22], [19, -23], [14, -22], [10, -14], [19, -10], [10, -14], [10, -14], [19, -10], [10, -14], [-9, -14], [-19, -10], [-9, -14], [-9, -14], [-19, -10], [-9, -14], [-13, -22], [-18, -23], [-13, -22], [-13, -22], [-18, -23], [-13, -22], [31, -33], [31, -33], [30, -26], [30, -26], [-29, -26], [-29, -26], [-30, -33], [-30, -33], [10, -6], [10, -6], [8, -1], [8, -1], [-7, -1], [-7, -1], [-9, -6], [-9, -6], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [4, -25], [5, -29], [-4, -14], [-6, -13], [-7, -12], [-7, -12], [-7, -12], [-7, -12], [0, -25], [4, -25], [5, -29], [-4, -14], [-6, -13], [-7, -12], [-7, -12], [-7, -12], [-7, -12], [2, -27], [3, -27], [4, -27], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [2, -27], [3, -27], [4, -27], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-1, -27], [-3, -27], [-3, -27], [6, -24], [6, -24], [6, -24], [6, -24], [6, -24], [6, -24], [-1, -27], [-3, -27], [-3, -27], [6, -24], [6, -24], [6, -24], [6, -24], [6, -24], [6, -24], [0, -25], [-4, -25], [-4, -29], [5, -14], [6, -13], [7, -12], [7, -12], [7, -12], [7, -12], [0, -25], [-4, -25], [-4, -29], [5, -14], [6, -13], [7, -12], [7, -12], [7, -12], [7, -12], [1, -25], [6, -26], [7, -30], [-1, -29], [-7, -24], [-14, -20], [-14, -20], [-14, -20], [1, -25], [6, -26], [7, -30], [-1, -29], [-7, -24], [-14, -20], [-14, -20], [-14, -20], [2, -23], [3, -24], [3, -27], [-7, -28], [-8, -27], [-6, -26], [-6, -26], [-6, -26], [2, -23], [3, -24], [3, -27], [-7, -28], [-8, -27], [-6, -26], [-6, -26], [-6, -26], [-2, -23], [-3, -24], [-2, -27], [8, -28], [8, -27], [7, -26], [7, -26], [7, -26], [-2, -23], [-3, -24], [-2, -27], [8, -28], [8, -27], [7, -26], [7, -26], [7, -26], [0, -25], [-5, -26], [-7, -30], [1, -29], [7, -24], [15, -20], [15, -20], [15, -20], [0, -25], [-5, -26], [-7, -30], [1, -29], [7, -24], [15, -20], [15, -20], [15, -20], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25]],
  anchorHead: [[2, -57], [-2, -57], [7, -57], [-3, -57], [-3, -57], [1, -57], [-4, -57], [12, -73], [-4, -57], [11, -73], [11, -72], [-5, -57], [12, -72], [-10, -73], [11, -73], [-11, -73], [5, -57], [11, -73], [4, -57], [5, -57], [-11, -73], [4, -58], [0, -57], [4, -58], [1, -58], [1, -57], [1, -55], [1, -56], [1, -58], [1, -57], [1, -55], [1, -56], [-3, -56], [-3, -58], [-3, -57], [-3, -55], [-3, -56], [-3, -58], [-3, -57], [-3, -55], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [11, -72], [11, -73], [11, -72], [11, -70], [11, -71], [11, -73], [11, -72], [11, -70], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [4, -56], [4, -58], [4, -57], [4, -55], [4, -56], [4, -58], [4, -57], [4, -55], [-1, -37], [-5, -38], [4, -38], [-6, -37], [-6, -38], [-1, -37], [-4, -38], [12, -54], [-5, -38], [11, -54], [11, -53], [-5, -38], [10, -55], [-11, -56], [10, -56], [-10, -54], [6, -38], [11, -53], [5, -38], [6, -38], [-11, -54], [6, -38], [2, -37], [6, -38], [-9, -60], [-11, -42], [-9, -60], [-9, -60], [-11, -42], [-9, -60], [-7, -65], [-7, -42], [-7, -65], [-7, -65], [-7, -42], [-7, -65], [8, -65], [8, -42], [8, -65], [8, -65], [8, -42], [8, -65], [10, -60], [12, -42], [10, -60], [10, -60], [12, -42], [10, -60], [-4, -56], [-4, -58], [-4, -59], [-4, -60], [-4, -58], [-4, -57], [-4, -56], [-4, -58], [-4, -59], [-4, -60], [-4, -58], [-4, -57], [9, -68], [9, -70], [9, -71], [9, -72], [9, -70], [9, -69], [9, -68], [9, -70], [9, -71], [9, -72], [9, -70], [9, -69], [-8, -68], [-8, -70], [-8, -71], [-8, -72], [-8, -70], [-8, -69], [-8, -68], [-8, -70], [-8, -71], [-8, -72], [-8, -70], [-8, -69], [5, -56], [5, -58], [5, -59], [5, -60], [5, -58], [5, -57], [5, -56], [5, -58], [5, -59], [5, -60], [5, -58], [5, -57], [-4, -61], [-3, -63], [-23, -44], [-26, -40], [-26, -40], [-4, -61], [-3, -63], [-23, -44], [-26, -40], [-26, -40], [7, -70], [6, -70], [-3, -60], [-4, -60], [-4, -60], [7, -70], [6, -70], [-3, -60], [-4, -60], [-4, -60], [-6, -70], [-5, -70], [4, -60], [5, -60], [5, -60], [-6, -70], [-5, -70], [4, -60], [5, -60], [5, -60], [5, -61], [4, -63], [24, -44], [27, -40], [27, -40], [5, -61], [4, -63], [24, -44], [27, -40], [27, -40], [26, -61], [33, -61], [26, -61], [26, -61], [33, -61], [26, -61], [27, -60], [32, -56], [27, -60], [27, -60], [32, -56], [27, -60], [-26, -60], [-31, -56], [-26, -60], [-26, -60], [-31, -56], [-26, -60], [-25, -61], [-32, -61], [-25, -61], [-25, -61], [-32, -61], [-25, -61], [46, -71], [46, -71], [44, -67], [44, -67], [-43, -67], [-43, -67], [-45, -71], [-45, -71], [48, -20], [48, -20], [45, 14], [45, 14], [-44, 14], [-44, 14], [-47, -20], [-47, -20], [2, -56], [2, -56], [2, -56], [2, -56], [2, -56], [2, -56], [2, -56], [2, -56], [-4, -56], [0, -56], [1, -57], [-25, -36], [-27, -35], [-28, -35], [-28, -35], [-28, -35], [-28, -35], [-4, -56], [0, -56], [1, -57], [-25, -36], [-27, -35], [-28, -35], [-28, -35], [-28, -35], [-28, -35], [8, -68], [7, -68], [9, -68], [-4, -66], [-6, -65], [-7, -65], [-7, -65], [-7, -65], [-7, -65], [8, -68], [7, -68], [9, -68], [-4, -66], [-6, -65], [-7, -65], [-7, -65], [-7, -65], [-7, -65], [-7, -68], [-6, -68], [-8, -68], [5, -66], [7, -65], [8, -65], [8, -65], [8, -65], [8, -65], [-7, -68], [-6, -68], [-8, -68], [5, -66], [7, -65], [8, -65], [8, -65], [8, -65], [8, -65], [5, -56], [1, -56], [0, -57], [26, -36], [28, -35], [29, -35], [29, -35], [29, -35], [29, -35], [5, -56], [1, -56], [0, -57], [26, -36], [28, -35], [29, -35], [29, -35], [29, -35], [29, -35], [-6, -55], [-3, -57], [1, -60], [-10, -58], [-20, -54], [-32, -44], [-32, -44], [-32, -44], [-6, -55], [-3, -57], [1, -60], [-10, -58], [-20, -54], [-32, -44], [-32, -44], [-32, -44], [7, -69], [11, -71], [12, -74], [7, -74], [3, -72], [0, -70], [0, -70], [0, -70], [7, -69], [11, -71], [12, -74], [7, -74], [3, -72], [0, -70], [0, -70], [0, -70], [-6, -69], [-10, -71], [-11, -74], [-6, -74], [-2, -72], [1, -70], [1, -70], [1, -70], [-6, -69], [-10, -71], [-11, -74], [-6, -74], [-2, -72], [1, -70], [1, -70], [1, -70], [7, -55], [4, -57], [0, -60], [11, -58], [21, -54], [33, -44], [33, -44], [33, -44], [7, -55], [4, -57], [0, -60], [11, -58], [21, -54], [33, -44], [33, -44], [33, -44], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [-2, -57], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57], [3, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 84, 85, 86, 106, 106, 106, 106, 82, 83, 84, 85, 86, 106, 106, 106, 106, 87, 88, 89, 90, 91, 107, 107, 107, 107, 87, 88, 89, 90, 91, 107, 107, 107, 107, 87, 88, 89, 90, 91, 107, 107, 107, 107, 87, 88, 89, 90, 91, 107, 107, 107, 107, 82, 83, 84, 85, 86, 106, 106, 106, 106, 82, 83, 84, 85, 86, 106, 106, 106, 106, 92, 93, 94, 95, 96, 97, 97, 97, 92, 93, 94, 95, 96, 97, 97, 97, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 92, 93, 94, 95, 96, 97, 97, 97, 92, 93, 94, 95, 96, 97, 97, 97, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104]
};

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 40, 84, 125, 165, 206, 250, 291, 332, 373, 417, 458, 499, 540, 573, 610, 653, 692, 726, 763, 806, 843, 870, 913, 961, 1006, 1035, 1074, 1122, 1161, 1202, 1246, 1290, 1333, 1374, 1416, 1462, 1507, 1548, 1590, 1631, 1673, 1714, 1756, 1797, 1839, 1888, 1936, 1985, 2035, 2082, 2120, 2159, 2199, 2237, 2287, 2336, 2383, 2429, 2476, 2525, 2572, 2618, 2663, 2708, 2753, 2799, 2853, 2897, 2957, 3018, 3065, 3108, 3167, 3225, 3265, 3314, 3357, 3401, 3450, 3494, 3552, 3619, 3673, 3716, 3756, 3816, 3877, 3938, 3982, 4025, 4067, 4125, 4183, 4241, 4284, 4329, 4374, 4420, 4470, 4534, 4579, 4625, 4672, 4737, 4800, 4865, 4917],
  widths: [40, 44, 41, 40, 41, 44, 41, 41, 41, 44, 41, 41, 41, 33, 37, 43, 39, 34, 37, 43, 37, 27, 43, 48, 45, 29, 39, 48, 39, 41, 44, 44, 43, 41, 42, 46, 45, 41, 42, 41, 42, 41, 42, 41, 42, 49, 48, 49, 50, 47, 38, 39, 40, 38, 50, 49, 47, 46, 47, 49, 47, 46, 45, 45, 45, 46, 54, 44, 60, 61, 47, 43, 59, 58, 40, 49, 43, 44, 49, 44, 58, 67, 54, 43, 40, 60, 61, 61, 44, 43, 42, 58, 58, 58, 43, 45, 45, 46, 50, 64, 45, 46, 47, 65, 63, 65, 52, 48],
  heights: [73, 72, 70, 71, 70, 69, 66, 67, 69, 69, 66, 67, 69, 72, 70, 69, 72, 70, 68, 69, 73, 70, 69, 67, 67, 69, 68, 68, 68, 72, 74, 71, 72, 69, 68, 65, 67, 68, 72, 69, 67, 68, 72, 70, 68, 49, 49, 48, 52, 50, 63, 54, 63, 51, 71, 73, 74, 74, 73, 72, 66, 68, 69, 69, 68, 67, 83, 85, 64, 63, 71, 71, 64, 63, 69, 66, 67, 64, 66, 64, 55, 48, 72, 69, 64, 64, 63, 63, 71, 71, 71, 64, 63, 63, 64, 65, 66, 69, 70, 61, 67, 68, 68, 67, 65, 65, 70, 72],
  bodyOffsets: [[-1, -26], [-1, -26], [-1, -26], [1, -28], [1, -28], [1, -28], [1, -29], [1, -29], [1, -29], [1, -28], [1, -28], [1, -28], [0, -29], [0, -29], [0, -29], [-1, -28], [-1, -28], [-1, -28], [0, -28], [0, -28], [0, -28], [-1, -27], [-1, -27], [-1, -27], [1, -26], [2, -27], [2, -24], [2, -24], [1, -26], [1, -27], [1, -24], [1, -24], [3, -26], [4, -26], [3, -24], [4, -24], [3, -27], [2, -27], [2, -24], [2, -23], [2, -27], [-1, -26], [-3, -25], [0, -26], [2, -27], [-2, -27], [-1, -25], [2, -26], [0, -28], [-1, -26], [0, -25], [0, -26], [0, -29], [1, -29], [-2, -28], [0, -28], [1, -30], [1, -27], [1, -25], [1, -28], [1, -30], [0, -27], [1, -25], [0, -28], [1, -28], [1, -26], [0, -25], [1, -26], [1, -29], [-1, -29], [2, -28], [1, -28], [-1, -27], [2, -26], [3, -25], [1, -26], [-1, -27], [3, -27], [1, -25], [-1, -26], [-2, -26], [-3, -26], [-2, -24], [-3, -24], [-3, -27], [-1, -27], [-1, -24], [-1, -23], [1, -17], [1, -17], [1, -17], [1, -18], [1, -18], [1, -18], [3, -19], [3, -19], [3, -19], [3, -16], [3, -16], [3, -16], [-1, -17], [-1, -17], [-1, -17], [-3, -16], [-3, -16], [-3, -16], [-2, -19], [-2, -19], [-2, -19], [-1, -18], [-1, -18], [-1, -18], [-1, -22], [0, -18], [-1, -22], [-1, -22], [0, -18], [-1, -22], [0, -20], [0, -17], [0, -20], [0, -20], [0, -17], [0, -20], [0, -20], [0, -17], [0, -20], [0, -20], [0, -17], [0, -20], [1, -22], [1, -18], [1, -22], [1, -22], [1, -18], [1, -22], [-1, -26], [0, -27], [1, -28], [1, -28], [1, -27], [0, -27], [-1, -26], [0, -27], [1, -28], [1, -28], [1, -27], [0, -27], [-2, -23], [-2, -24], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [-2, -23], [-2, -24], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [3, -23], [2, -24], [2, -24], [2, -24], [2, -24], [2, -23], [3, -23], [2, -24], [2, -24], [2, -24], [2, -24], [2, -23], [1, -26], [1, -27], [0, -28], [-1, -28], [0, -27], [1, -27], [1, -26], [1, -27], [0, -28], [-1, -28], [0, -27], [1, -27], [-1, -26], [-3, -33], [-3, -34], [-8, -13], [-8, -12], [-1, -26], [-3, -33], [-3, -34], [-8, -13], [-8, -12], [1, -28], [2, -25], [1, -25], [-6, -27], [-6, -26], [1, -28], [2, -25], [1, -25], [-6, -27], [-6, -26], [-1, -28], [-1, -25], [0, -25], [7, -27], [6, -26], [-1, -28], [-1, -25], [0, -25], [7, -27], [6, -26], [1, -26], [3, -33], [3, -34], [8, -13], [9, -12], [1, -26], [3, -33], [3, -34], [8, -13], [9, -12], [9, -27], [13, -24], [9, -27], [9, -27], [13, -24], [9, -27], [7, -20], [15, -18], [7, -20], [7, -20], [15, -18], [7, -20], [-6, -20], [-15, -18], [-6, -20], [-6, -20], [-15, -18], [-6, -20], [-9, -27], [-12, -24], [-9, -27], [-9, -27], [-12, -24], [-9, -27], [14, -23], [14, -23], [17, -17], [17, -17], [-17, -17], [-17, -17], [-13, -23], [-13, -23], [10, -6], [10, -6], [3, -7], [3, -7], [-2, -7], [-2, -7], [-10, -6], [-10, -6], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-2, -27], [-2, -25], [-1, -29], [-10, -15], [-10, -14], [-10, -14], [-10, -14], [-10, -14], [-10, -14], [-2, -27], [-2, -25], [-1, -29], [-10, -15], [-10, -14], [-10, -14], [-10, -14], [-10, -14], [-10, -14], [-1, -29], [0, -29], [0, -29], [-9, -29], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [-1, -29], [0, -29], [0, -29], [-9, -29], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [1, -29], [1, -29], [0, -29], [9, -29], [9, -28], [9, -28], [9, -28], [9, -28], [9, -28], [1, -29], [1, -29], [0, -29], [9, -29], [9, -28], [9, -28], [9, -28], [9, -28], [9, -28], [2, -27], [3, -25], [1, -29], [10, -15], [11, -14], [11, -14], [11, -14], [11, -14], [11, -14], [2, -27], [3, -25], [1, -29], [10, -15], [11, -14], [11, -14], [11, -14], [11, -14], [11, -14], [0, -24], [7, -25], [9, -29], [-1, -28], [-7, -24], [-14, -18], [-14, -18], [-14, -18], [0, -24], [7, -25], [9, -29], [-1, -28], [-7, -24], [-14, -18], [-14, -18], [-14, -18], [0, -23], [2, -24], [3, -27], [-7, -28], [-9, -26], [-10, -26], [-10, -26], [-10, -26], [0, -23], [2, -24], [3, -27], [-7, -28], [-9, -26], [-10, -26], [-10, -26], [-10, -26], [1, -23], [-2, -24], [-2, -27], [8, -28], [10, -26], [11, -26], [11, -26], [11, -26], [1, -23], [-2, -24], [-2, -27], [8, -28], [10, -26], [11, -26], [11, -26], [11, -26], [1, -24], [-6, -25], [-8, -29], [1, -28], [7, -24], [14, -18], [14, -18], [14, -18], [1, -24], [-6, -25], [-8, -29], [1, -28], [7, -24], [14, -18], [14, -18], [14, -18], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [2, -28], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25]],
  anchorHead: [[2, -57], [-3, -58], [7, -58], [-3, -58], [-3, -57], [2, -57], [-2, -58], [14, -74], [-3, -58], [13, -74], [13, -73], [-3, -58], [12, -73], [-10, -74], [12, -74], [-12, -74], [4, -58], [10, -73], [3, -58], [4, -58], [-13, -74], [4, -58], [-1, -57], [3, -58], [2, -57], [2, -56], [2, -54], [2, -55], [2, -57], [2, -56], [2, -54], [2, -55], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-3, -58], [-3, -57], [-3, -55], [-3, -56], [-3, -58], [-3, -57], [-3, -55], [-3, -56], [13, -74], [13, -73], [13, -71], [13, -72], [13, -74], [13, -73], [13, -71], [13, -72], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [-12, -74], [-12, -73], [-12, -71], [-12, -72], [-12, -74], [-12, -73], [-12, -71], [-12, -72], [4, -58], [4, -57], [4, -55], [4, -56], [4, -58], [4, -57], [4, -55], [4, -56], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [0, -36], [-5, -37], [5, -37], [-5, -37], [-4, -37], [0, -36], [-4, -37], [12, -53], [-5, -37], [11, -53], [11, -52], [-5, -37], [11, -52], [-11, -53], [11, -53], [-10, -53], [6, -37], [12, -52], [5, -37], [6, -37], [-11, -53], [6, -37], [1, -36], [5, -37], [-9, -60], [-11, -42], [-9, -60], [-9, -60], [-11, -42], [-9, -60], [-7, -65], [-7, -42], [-7, -65], [-7, -65], [-7, -42], [-7, -65], [8, -65], [8, -42], [8, -65], [8, -65], [8, -42], [8, -65], [10, -60], [12, -42], [10, -60], [10, -60], [12, -42], [10, -60], [-4, -56], [-4, -58], [-4, -59], [-4, -60], [-4, -58], [-4, -57], [-4, -56], [-4, -58], [-4, -59], [-4, -60], [-4, -58], [-4, -57], [9, -68], [9, -70], [9, -71], [9, -72], [9, -70], [9, -69], [9, -68], [9, -70], [9, -71], [9, -72], [9, -70], [9, -69], [-8, -68], [-8, -70], [-8, -71], [-8, -72], [-8, -70], [-8, -69], [-8, -68], [-8, -70], [-8, -71], [-8, -72], [-8, -70], [-8, -69], [5, -56], [5, -58], [5, -59], [5, -60], [5, -58], [5, -57], [5, -56], [5, -58], [5, -59], [5, -60], [5, -58], [5, -57], [-4, -56], [-6, -57], [-8, -58], [-27, -38], [-28, -37], [-4, -56], [-6, -57], [-8, -58], [-27, -38], [-28, -37], [13, -74], [10, -66], [8, -66], [-3, -66], [-4, -65], [13, -74], [10, -66], [8, -66], [-3, -66], [-4, -65], [-12, -74], [-9, -66], [-7, -66], [4, -66], [5, -65], [-12, -74], [-9, -66], [-7, -66], [4, -66], [5, -65], [5, -56], [7, -57], [9, -58], [28, -38], [29, -37], [5, -56], [7, -57], [9, -58], [28, -38], [29, -37], [27, -67], [35, -63], [27, -67], [27, -67], [35, -63], [27, -67], [27, -60], [32, -56], [27, -60], [27, -60], [32, -56], [27, -60], [-26, -60], [-31, -56], [-26, -60], [-26, -60], [-31, -56], [-26, -60], [-26, -67], [-34, -63], [-26, -67], [-26, -67], [-34, -63], [-26, -67], [37, -62], [37, -62], [34, -63], [34, -63], [-33, -63], [-33, -63], [-36, -62], [-36, -62], [45, -29], [45, -29], [45, 14], [45, 14], [-44, 14], [-44, 14], [-44, -29], [-44, -29], [2, -57], [2, -57], [2, -57], [2, -57], [2, -57], [2, -57], [2, -57], [2, -57], [-4, -56], [-7, -57], [-4, -58], [-28, -38], [-30, -37], [-30, -37], [-30, -37], [-30, -37], [-30, -37], [-4, -56], [-7, -57], [-4, -58], [-28, -38], [-30, -37], [-30, -37], [-30, -37], [-30, -37], [-30, -37], [8, -68], [7, -68], [8, -69], [-7, -71], [-8, -70], [-8, -70], [-8, -70], [-8, -70], [-8, -70], [8, -68], [7, -68], [8, -69], [-7, -71], [-8, -70], [-8, -70], [-8, -70], [-8, -70], [-8, -70], [-7, -68], [-6, -68], [-7, -69], [8, -71], [9, -70], [9, -70], [9, -70], [9, -70], [9, -70], [-7, -68], [-6, -68], [-7, -69], [8, -71], [9, -70], [9, -70], [9, -70], [9, -70], [9, -70], [5, -56], [8, -57], [5, -58], [29, -38], [31, -37], [31, -37], [31, -37], [31, -37], [31, -37], [5, -56], [8, -57], [5, -58], [29, -38], [31, -37], [31, -37], [31, -37], [31, -37], [31, -37], [-7, -50], [-1, -51], [1, -53], [-9, -52], [-18, -48], [-29, -42], [-29, -42], [-29, -42], [-7, -50], [-1, -51], [1, -53], [-9, -52], [-18, -48], [-29, -42], [-29, -42], [-29, -42], [7, -69], [11, -71], [12, -74], [0, -73], [-1, -71], [-6, -72], [-6, -72], [-6, -72], [7, -69], [11, -71], [12, -74], [0, -73], [-1, -71], [-6, -72], [-6, -72], [-6, -72], [-6, -69], [-10, -71], [-11, -74], [1, -73], [2, -71], [7, -72], [7, -72], [7, -72], [-6, -69], [-10, -71], [-11, -74], [1, -73], [2, -71], [7, -72], [7, -72], [7, -72], [8, -50], [2, -51], [0, -53], [10, -52], [19, -48], [30, -42], [30, -42], [30, -42], [8, -50], [2, -51], [0, -53], [10, -52], [19, -48], [30, -42], [30, -42], [30, -42], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [-2, -54], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [11, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [-10, -70], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54], [3, -54]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106]
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 72, 103, 142, 180, 218, 255, 288, 325, 363, 400, 433, 470, 504, 542, 586, 624, 657, 693, 731, 766, 790, 832, 881, 924, 949, 991, 1040, 1082, 1111, 1143, 1178, 1209, 1237, 1274, 1319, 1360, 1398, 1435, 1468, 1505, 1543, 1580, 1613, 1650, 1682, 1719, 1762, 1804, 1838, 1870, 1900, 1943, 1988, 2024, 2059, 2095, 2133, 2171, 2208, 2247, 2286, 2325, 2364, 2403, 2442, 2499, 2561, 2606, 2650, 2691, 2732, 2767, 2802, 2846, 2892, 2934, 2976, 3025, 3073, 3124, 3176, 3210, 3245, 3284, 3321, 3355, 3393, 3433, 3481, 3529, 3577, 3610, 3640, 3670, 3721, 3767, 3808, 3849, 3890, 3945, 3998, 4034, 4068, 4103, 4157, 4206, 4245, 4283, 4323, 4382],
  widths: [38, 34, 31, 39, 38, 38, 37, 33, 37, 38, 37, 33, 37, 34, 38, 44, 38, 33, 36, 38, 35, 24, 42, 49, 43, 25, 42, 49, 42, 29, 32, 35, 31, 28, 37, 45, 41, 38, 37, 33, 37, 38, 37, 33, 37, 32, 37, 43, 42, 34, 32, 30, 43, 45, 36, 35, 36, 38, 38, 37, 39, 39, 39, 39, 39, 39, 57, 62, 45, 44, 41, 41, 35, 35, 44, 46, 42, 42, 49, 48, 51, 52, 34, 35, 39, 37, 34, 38, 40, 48, 48, 48, 33, 30, 30, 51, 46, 41, 41, 41, 55, 53, 36, 34, 35, 54, 49, 39, 38, 40, 59, 58],
  heights: [71, 70, 70, 66, 68, 71, 66, 66, 72, 70, 67, 67, 73, 72, 68, 65, 68, 68, 70, 70, 74, 69, 68, 66, 65, 66, 64, 64, 66, 70, 71, 70, 70, 66, 68, 67, 66, 65, 69, 66, 64, 65, 69, 66, 65, 52, 52, 46, 43, 45, 63, 55, 60, 54, 71, 72, 73, 73, 72, 70, 69, 70, 71, 71, 70, 68, 71, 77, 66, 64, 63, 72, 60, 59, 66, 66, 59, 59, 65, 52, 40, 38, 76, 76, 68, 72, 72, 71, 70, 61, 61, 61, 71, 72, 72, 74, 70, 69, 70, 70, 61, 59, 71, 76, 76, 74, 70, 69, 71, 70, 62, 60],
  bodyOffsets: [[0, -26], [0, -26], [0, -26], [0, -27], [0, -27], [0, -27], [-1, -27], [-1, -27], [-1, -27], [-1, -30], [-1, -30], [-1, -30], [0, -27], [0, -27], [0, -27], [2, -30], [2, -30], [2, -30], [2, -27], [2, -27], [2, -27], [0, -27], [0, -27], [0, -27], [0, -26], [0, -28], [0, -26], [0, -24], [0, -27], [1, -27], [1, -25], [1, -23], [-1, -26], [-2, -27], [-3, -26], [-1, -26], [0, -28], [-1, -26], [-1, -24], [0, -23], [-2, -27], [-2, -27], [-3, -26], [-3, -27], [-2, -29], [-3, -29], [-3, -27], [-4, -27], [-1, -28], [-2, -26], [-2, -25], [-1, -26], [-1, -30], [-2, -28], [-2, -26], [-1, -28], [0, -28], [0, -25], [0, -25], [0, -27], [0, -28], [1, -25], [1, -25], [1, -26], [2, -28], [2, -26], [3, -25], [2, -26], [1, -30], [3, -28], [3, -26], [2, -28], [2, -27], [2, -27], [4, -26], [4, -27], [3, -29], [3, -29], [4, -27], [4, -27], [1, -26], [2, -27], [3, -26], [1, -26], [1, -28], [1, -26], [1, -24], [1, -23], [0, -13], [0, -13], [0, -13], [-4, -13], [-4, -13], [-4, -13], [-7, -16], [-7, -16], [-7, -16], [-8, -18], [-8, -18], [-8, -18], [1, -17], [1, -17], [1, -17], [8, -18], [8, -18], [8, -18], [8, -16], [8, -16], [8, -16], [5, -13], [5, -13], [5, -13], [-4, -23], [-5, -19], [-4, -23], [-4, -23], [-5, -19], [-4, -23], [-3, -27], [-4, -24], [-3, -27], [-3, -27], [-4, -24], [-3, -27], [4, -27], [5, -24], [4, -27], [4, -27], [5, -24], [4, -27], [4, -23], [5, -19], [4, -23], [4, -23], [5, -19], [4, -23], [0, -27], [0, -28], [0, -28], [1, -28], [1, -28], [1, -27], [0, -27], [0, -28], [0, -28], [1, -28], [1, -28], [1, -27], [-1, -31], [-1, -32], [-1, -32], [-1, -32], [-1, -32], [-1, -31], [-1, -31], [-1, -32], [-1, -32], [-1, -32], [-1, -32], [-1, -31], [2, -31], [2, -32], [2, -32], [2, -32], [2, -32], [2, -31], [2, -31], [2, -32], [2, -32], [2, -32], [2, -32], [2, -31], [0, -27], [1, -28], [0, -28], [-1, -28], [-1, -28], [0, -27], [0, -27], [1, -28], [0, -28], [-1, -28], [-1, -28], [0, -27], [1, -27], [-3, -30], [-3, -30], [-8, -25], [-8, -24], [1, -27], [-3, -30], [-3, -30], [-8, -25], [-8, -24], [-2, -28], [-1, -33], [-1, -33], [-6, -28], [-7, -27], [-2, -28], [-1, -33], [-1, -33], [-6, -28], [-7, -27], [3, -28], [2, -33], [2, -33], [7, -28], [8, -27], [3, -28], [2, -33], [2, -33], [7, -28], [8, -27], [0, -27], [3, -30], [3, -30], [9, -25], [8, -24], [0, -27], [3, -30], [3, -30], [9, -25], [8, -24], [-5, -25], [-2, -27], [-5, -25], [-5, -25], [-2, -27], [-5, -25], [-4, -28], [-1, -25], [-4, -28], [-4, -28], [-1, -25], [-4, -28], [4, -28], [1, -25], [4, -28], [4, -28], [1, -25], [4, -28], [5, -25], [2, -27], [5, -25], [5, -25], [2, -27], [5, -25], [2, -27], [2, -27], [2, -24], [2, -24], [-2, -24], [-2, -24], [-1, -27], [-1, -27], [1, -9], [1, -9], [3, -12], [3, -12], [-3, -12], [-3, -12], [0, -9], [0, -9], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [0, -26], [-5, -32], [-5, -32], [-7, -34], [-4, -23], [-3, -25], [-6, -25], [-6, -25], [-6, -25], [-6, -25], [-5, -32], [-5, -32], [-7, -34], [-4, -23], [-3, -25], [-6, -25], [-6, -25], [-6, -25], [-6, -25], [-1, -32], [-1, -32], [-1, -32], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [-1, -32], [-1, -32], [-1, -32], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [-3, -27], [1, -32], [1, -32], [1, -32], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [1, -32], [1, -32], [1, -32], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [3, -27], [5, -32], [5, -32], [8, -34], [5, -23], [4, -25], [6, -25], [6, -25], [6, -25], [6, -25], [5, -32], [5, -32], [8, -34], [5, -23], [4, -25], [6, -25], [6, -25], [6, -25], [6, -25], [-1, -27], [0, -28], [0, -28], [0, -28], [-10, -19], [-11, -17], [-11, -17], [-11, -17], [-1, -27], [0, -28], [0, -28], [0, -28], [-10, -19], [-11, -17], [-11, -17], [-11, -17], [-1, -31], [-1, -32], [-1, -32], [-1, -32], [-11, -26], [-10, -25], [-10, -25], [-10, -25], [-1, -31], [-1, -32], [-1, -32], [-1, -32], [-11, -26], [-10, -25], [-10, -25], [-10, -25], [2, -31], [2, -32], [2, -32], [2, -32], [12, -26], [11, -25], [11, -25], [11, -25], [2, -31], [2, -32], [2, -32], [2, -32], [12, -26], [11, -25], [11, -25], [11, -25], [2, -27], [0, -28], [0, -28], [0, -28], [11, -19], [11, -17], [11, -17], [11, -17], [2, -27], [0, -28], [0, -28], [0, -28], [11, -19], [11, -17], [11, -17], [11, -17], [0, -27], [-5, -32], [-5, -32], [-9, -33], [-15, -22], [-15, -20], [0, -27], [-5, -32], [-5, -32], [-9, -33], [-15, -22], [-15, -20], [-1, -31], [-1, -32], [-1, -32], [-2, -32], [-10, -28], [-9, -27], [-1, -31], [-1, -32], [-1, -32], [-2, -32], [-10, -28], [-9, -27], [2, -31], [1, -32], [1, -32], [2, -32], [11, -28], [9, -27], [2, -31], [1, -32], [1, -32], [2, -32], [11, -28], [9, -27], [0, -27], [5, -32], [5, -32], [10, -33], [15, -22], [16, -20], [0, -27], [5, -32], [5, -32], [10, -33], [15, -22], [16, -20]],
  anchorHead: [[0, -57], [-3, -57], [4, -57], [-3, -58], [-4, -58], [0, -57], [-5, -58], [13, -73], [-3, -58], [13, -73], [12, -72], [-5, -58], [12, -72], [-11, -73], [12, -73], [-12, -73], [6, -58], [11, -72], [6, -58], [4, -58], [-12, -73], [4, -58], [1, -57], [5, -58], [0, -57], [0, -56], [0, -54], [0, -55], [0, -57], [0, -56], [0, -54], [0, -55], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-5, -58], [-5, -57], [-5, -55], [-5, -56], [-5, -58], [-5, -57], [-5, -55], [-5, -56], [13, -73], [13, -72], [13, -70], [13, -71], [13, -73], [13, -72], [13, -70], [13, -71], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [-12, -73], [-12, -72], [-12, -70], [-12, -71], [-12, -73], [-12, -72], [-12, -70], [-12, -71], [6, -58], [6, -57], [6, -55], [6, -56], [6, -58], [6, -57], [6, -55], [6, -56], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [0, -34], [-3, -34], [3, -34], [-3, -35], [-4, -35], [0, -34], [-6, -35], [13, -50], [-4, -34], [13, -49], [12, -48], [-5, -34], [13, -51], [-10, -52], [13, -52], [-12, -49], [6, -34], [11, -48], [7, -35], [5, -34], [-12, -50], [4, -35], [1, -34], [5, -35], [-16, -59], [-15, -48], [-16, -57], [-16, -59], [-15, -48], [-16, -57], [-12, -68], [-14, -49], [-12, -67], [-12, -68], [-14, -49], [-12, -67], [13, -68], [15, -49], [13, -67], [13, -68], [15, -49], [13, -67], [17, -59], [16, -48], [17, -57], [17, -59], [16, -48], [17, -57], [-4, -59], [-4, -60], [-4, -61], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -60], [-4, -61], [-4, -61], [-4, -60], [-4, -58], [13, -75], [13, -76], [13, -77], [13, -77], [13, -76], [13, -74], [13, -75], [13, -76], [13, -77], [13, -77], [13, -76], [13, -74], [-12, -75], [-12, -76], [-12, -77], [-12, -77], [-12, -76], [-12, -74], [-12, -75], [-12, -76], [-12, -77], [-12, -77], [-12, -76], [-12, -74], [5, -59], [5, -60], [5, -61], [5, -61], [5, -60], [5, -58], [5, -59], [5, -60], [5, -61], [5, -61], [5, -60], [5, -58], [-3, -58], [-1, -58], [0, -58], [-8, -51], [-9, -48], [-3, -58], [-1, -58], [0, -58], [-8, -51], [-9, -48], [14, -72], [17, -72], [18, -72], [5, -68], [3, -66], [14, -72], [17, -72], [18, -72], [5, -68], [3, -66], [-13, -72], [-16, -72], [-17, -72], [-4, -68], [-2, -66], [-13, -72], [-16, -72], [-17, -72], [-4, -68], [-2, -66], [4, -58], [2, -58], [1, -58], [9, -51], [10, -48], [4, -58], [2, -58], [1, -58], [9, -51], [10, -48], [15, -66], [21, -68], [15, -66], [15, -66], [21, -68], [15, -66], [10, -74], [14, -69], [10, -74], [10, -74], [14, -69], [10, -74], [-9, -74], [-13, -69], [-9, -74], [-9, -74], [-13, -69], [-9, -74], [-14, -66], [-20, -68], [-14, -66], [-14, -66], [-20, -68], [-14, -66], [28, -66], [28, -66], [22, -66], [22, -66], [-21, -66], [-21, -66], [-27, -66], [-27, -66], [38, -21], [38, -21], [40, 9], [40, 9], [-39, 9], [-39, 9], [-37, -21], [-37, -21], [0, -57], [0, -57], [0, -57], [0, -57], [0, -57], [0, -57], [0, -57], [0, -57], [-3, -59], [-3, -59], [-5, -59], [-14, -49], [-15, -45], [-16, -44], [-16, -43], [-16, -43], [-16, -43], [-3, -59], [-3, -59], [-5, -59], [-14, -49], [-15, -45], [-16, -44], [-16, -43], [-16, -43], [-16, -43], [17, -76], [17, -76], [12, -76], [3, -69], [1, -67], [-1, -65], [-1, -64], [-1, -64], [-1, -64], [17, -76], [17, -76], [12, -76], [3, -69], [1, -67], [-1, -65], [-1, -64], [-1, -64], [-1, -64], [-16, -76], [-16, -76], [-11, -76], [-2, -69], [0, -67], [2, -65], [2, -64], [2, -64], [2, -64], [-16, -76], [-16, -76], [-11, -76], [-2, -69], [0, -67], [2, -65], [2, -64], [2, -64], [2, -64], [4, -59], [4, -59], [6, -59], [15, -49], [16, -45], [17, -44], [17, -43], [17, -43], [17, -43], [4, -59], [4, -59], [6, -59], [15, -49], [16, -45], [17, -44], [17, -43], [17, -43], [17, -43], [-3, -59], [-3, -60], [-2, -60], [-1, -60], [-13, -38], [-14, -37], [-14, -36], [-14, -36], [-3, -59], [-3, -60], [-2, -60], [-1, -60], [-13, -38], [-14, -37], [-14, -36], [-14, -36], [13, -75], [14, -76], [16, -75], [17, -75], [-5, -66], [-4, -64], [-4, -64], [-4, -64], [13, -75], [14, -76], [16, -75], [17, -75], [-5, -66], [-4, -64], [-4, -64], [-4, -64], [-12, -75], [-13, -76], [-15, -75], [-16, -75], [6, -66], [5, -64], [5, -64], [5, -64], [-12, -75], [-13, -76], [-15, -75], [-16, -75], [6, -66], [5, -64], [5, -64], [5, -64], [4, -59], [4, -60], [3, -60], [2, -60], [14, -38], [15, -37], [15, -36], [15, -36], [4, -59], [4, -60], [3, -60], [2, -60], [14, -38], [15, -37], [15, -36], [15, -36], [-4, -59], [-3, -59], [-3, -59], [-7, -57], [-16, -41], [-16, -40], [-4, -59], [-3, -59], [-3, -59], [-7, -57], [-16, -41], [-16, -40], [13, -75], [15, -77], [15, -77], [11, -76], [2, -69], [3, -67], [13, -75], [15, -77], [15, -77], [11, -76], [2, -69], [3, -67], [-12, -75], [-14, -77], [-14, -77], [-10, -76], [-1, -69], [-2, -67], [-12, -75], [-14, -77], [-14, -77], [-10, -76], [-1, -69], [-2, -67], [5, -59], [4, -59], [4, -59], [8, -57], [17, -41], [17, -40], [5, -59], [4, -59], [4, -59], [8, -57], [17, -41], [17, -40]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 0, 0, 0, 0, 0, 0, 0, 0, 82, 82, 83, 84, 85, 86, 86, 86, 86, 82, 82, 83, 84, 85, 86, 86, 86, 86, 87, 87, 88, 89, 90, 91, 91, 91, 91, 87, 87, 88, 89, 90, 91, 91, 91, 91, 87, 87, 88, 89, 90, 91, 91, 91, 91, 87, 87, 88, 89, 90, 91, 91, 91, 91, 82, 82, 83, 84, 85, 86, 86, 86, 86, 82, 82, 83, 84, 85, 86, 86, 86, 86, 92, 93, 94, 94, 95, 96, 96, 96, 92, 93, 94, 94, 95, 96, 96, 96, 97, 98, 99, 99, 100, 101, 101, 101, 97, 98, 99, 99, 100, 101, 101, 101, 97, 98, 99, 99, 100, 101, 101, 101, 97, 98, 99, 99, 100, 101, 101, 101, 92, 93, 94, 94, 95, 96, 96, 96, 92, 93, 94, 94, 95, 96, 96, 96, 102, 103, 103, 104, 105, 106, 102, 103, 103, 104, 105, 106, 107, 108, 108, 109, 110, 111, 107, 108, 108, 109, 110, 111, 107, 108, 108, 109, 110, 111, 107, 108, 108, 109, 110, 111, 102, 103, 103, 104, 105, 106, 102, 103, 103, 104, 105, 106]
};

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 82, 112, 154, 197, 232, 266, 298, 332, 367, 402, 434, 468, 500, 533, 565, 597, 638, 688, 735, 772, 803, 850, 892, 923, 951, 999, 1042, 1070, 1105, 1149, 1188, 1218, 1248, 1278, 1308, 1338, 1368, 1396, 1426, 1458, 1488, 1516, 1546, 1578, 1611, 1654, 1704, 1750, 1782, 1817, 1853, 1895, 1938, 1982, 2025, 2067, 2109, 2152, 2196, 2234, 2270, 2305, 2340, 2376, 2414, 2461, 2512, 2565, 2626, 2687, 2722, 2757, 2793, 2838, 2882, 2927, 2974, 3015, 3058, 3114, 3161, 3219, 3281, 3330, 3383, 3442, 3507, 3571, 3635, 3670, 3707, 3751, 3816, 3882, 3948, 4002, 4063, 4100, 4145, 4183, 4233, 4273, 4313, 4390, 4466, 4508, 4556, 4599, 4642, 4706],
  widths: [44, 38, 30, 42, 43, 35, 34, 32, 34, 35, 35, 32, 34, 32, 33, 32, 32, 41, 50, 47, 37, 31, 47, 42, 31, 28, 48, 43, 28, 35, 44, 39, 30, 30, 30, 30, 30, 30, 28, 30, 32, 30, 28, 30, 32, 33, 43, 50, 46, 32, 35, 36, 42, 43, 44, 43, 42, 42, 43, 44, 38, 36, 35, 35, 36, 38, 47, 51, 53, 61, 61, 35, 35, 36, 45, 44, 45, 47, 41, 43, 56, 47, 58, 62, 49, 53, 59, 65, 64, 64, 35, 37, 44, 65, 66, 66, 54, 61, 37, 45, 38, 50, 40, 40, 77, 76, 42, 48, 43, 43, 64, 64],
  heights: [72, 74, 75, 70, 71, 70, 74, 73, 70, 70, 74, 73, 70, 70, 69, 73, 73, 71, 68, 70, 70, 69, 68, 71, 72, 71, 69, 71, 68, 70, 69, 69, 75, 76, 73, 71, 70, 71, 70, 68, 70, 71, 70, 68, 70, 51, 49, 42, 40, 40, 66, 59, 62, 57, 72, 73, 74, 75, 75, 74, 75, 76, 77, 78, 78, 77, 74, 73, 69, 65, 63, 75, 77, 72, 64, 63, 68, 68, 65, 62, 64, 52, 49, 43, 68, 68, 65, 65, 64, 63, 75, 79, 74, 67, 66, 66, 72, 64, 78, 63, 74, 66, 96, 102, 62, 62, 70, 68, 87, 93, 63, 62],
  bodyOffsets: [[1, -28], [1, -28], [1, -28], [-4, -27], [-4, -27], [-4, -27], [-2, -25], [-2, -25], [-2, -25], [-4, -28], [-4, -28], [-4, -28], [0, -28], [0, -28], [0, -28], [3, -28], [3, -28], [3, -28], [0, -25], [0, -25], [0, -25], [2, -26], [2, -26], [2, -26], [0, -29], [-1, -26], [-2, -24], [-1, -27], [0, -29], [1, -26], [0, -24], [0, -27], [-2, -29], [-2, -28], [-2, -24], [-3, -25], [-5, -28], [-3, -29], [-1, -26], [-3, -27], [-4, -29], [-4, -29], [-2, -25], [-2, -26], [-1, -28], [-4, -27], [0, -25], [0, -28], [2, -29], [1, -28], [2, -26], [0, -24], [0, -26], [0, -26], [0, -25], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [-1, -29], [-1, -28], [-1, -26], [0, -24], [0, -26], [0, -26], [0, -25], [0, -27], [5, -29], [5, -29], [2, -25], [3, -26], [1, -28], [4, -27], [1, -25], [0, -28], [2, -29], [3, -28], [2, -24], [3, -25], [6, -28], [3, -29], [2, -26], [4, -27], [-1, -17], [-1, -17], [-1, -17], [-9, -18], [-9, -18], [-9, -18], [-12, -21], [-12, -21], [-12, -21], [-10, -22], [-10, -22], [-10, -22], [-1, -22], [-1, -22], [-1, -22], [10, -22], [10, -22], [10, -22], [10, -21], [10, -21], [10, -21], [7, -18], [7, -18], [7, -18], [-6, -23], [-6, -19], [-6, -23], [-6, -23], [-6, -19], [-6, -23], [-4, -25], [-3, -22], [-4, -25], [-4, -25], [-3, -22], [-4, -25], [4, -25], [4, -22], [4, -25], [4, -25], [4, -22], [4, -25], [7, -23], [6, -19], [7, -23], [7, -23], [6, -19], [7, -23], [0, -26], [0, -26], [-1, -27], [-1, -27], [0, -27], [0, -27], [0, -26], [0, -26], [-1, -27], [-1, -27], [0, -27], [0, -27], [-5, -26], [-4, -27], [-3, -27], [-3, -28], [-4, -28], [-5, -27], [-5, -26], [-4, -27], [-3, -27], [-3, -28], [-4, -28], [-5, -27], [5, -26], [4, -27], [4, -27], [4, -28], [4, -28], [5, -27], [5, -26], [4, -27], [4, -27], [4, -28], [4, -28], [5, -27], [0, -26], [1, -26], [1, -27], [1, -27], [1, -27], [0, -27], [0, -26], [1, -26], [1, -27], [1, -27], [1, -27], [0, -27], [0, -31], [-2, -34], [-4, -32], [-7, -15], [-7, -14], [0, -31], [-2, -34], [-4, -32], [-7, -15], [-7, -14], [4, -28], [4, -29], [-1, -27], [-6, -23], [-6, -22], [4, -28], [4, -29], [-1, -27], [-6, -23], [-6, -22], [-3, -28], [-3, -29], [1, -27], [7, -23], [6, -22], [-3, -28], [-3, -29], [1, -27], [7, -23], [6, -22], [1, -31], [3, -34], [5, -32], [8, -15], [8, -14], [1, -31], [3, -34], [5, -32], [8, -15], [8, -14], [1, -22], [2, -21], [1, -22], [1, -22], [2, -21], [1, -22], [0, -23], [1, -22], [0, -23], [0, -23], [1, -22], [0, -23], [1, -23], [0, -22], [1, -23], [1, -23], [0, -22], [1, -23], [0, -22], [-1, -21], [0, -22], [0, -22], [-1, -21], [0, -22], [10, -18], [10, -18], [7, -16], [7, -16], [-6, -16], [-6, -16], [-10, -18], [-10, -18], [-1, -7], [-1, -7], [13, -8], [13, -8], [-13, -8], [-13, -8], [1, -7], [1, -7], [1, -28], [1, -28], [1, -28], [1, -28], [1, -28], [1, -28], [1, -28], [1, -28], [0, -31], [-2, -31], [-4, -29], [-6, -14], [-7, -14], [-7, -13], [-7, -13], [-7, -13], [-7, -13], [0, -31], [-2, -31], [-4, -29], [-6, -14], [-7, -14], [-7, -13], [-7, -13], [-7, -13], [-7, -13], [2, -28], [1, -30], [-5, -27], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [2, -28], [1, -30], [-5, -27], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [-15, -23], [-1, -28], [0, -30], [5, -27], [16, -23], [15, -23], [15, -23], [15, -23], [15, -23], [15, -23], [-1, -28], [0, -30], [5, -27], [16, -23], [15, -23], [15, -23], [15, -23], [15, -23], [15, -23], [1, -31], [3, -31], [5, -29], [7, -14], [7, -14], [7, -13], [7, -13], [7, -13], [7, -13], [1, -31], [3, -31], [5, -29], [7, -14], [7, -14], [7, -13], [7, -13], [7, -13], [7, -13], [0, -31], [-2, -34], [-4, -34], [-4, -32], [-7, -15], [-7, -15], [-7, -14], [-7, -14], [0, -31], [-2, -34], [-4, -34], [-4, -32], [-7, -15], [-7, -15], [-7, -14], [-7, -14], [4, -28], [4, -29], [3, -30], [-1, -27], [-6, -23], [-6, -22], [-6, -22], [-6, -22], [4, -28], [4, -29], [3, -30], [-1, -27], [-6, -23], [-6, -22], [-6, -22], [-6, -22], [-3, -28], [-3, -29], [-2, -30], [1, -27], [7, -23], [7, -22], [6, -22], [6, -22], [-3, -28], [-3, -29], [-2, -30], [1, -27], [7, -23], [7, -22], [6, -22], [6, -22], [1, -31], [3, -34], [4, -34], [5, -32], [8, -15], [8, -15], [8, -14], [8, -14], [1, -31], [3, -34], [4, -34], [5, -32], [8, -15], [8, -15], [8, -14], [8, -14], [2, -25], [-4, -28], [5, -43], [9, -46], [-11, -8], [-12, -7], [2, -25], [-4, -28], [5, -43], [9, -46], [-11, -8], [-12, -7], [-5, -28], [-11, -27], [-4, -36], [-4, -39], [-8, -15], [-8, -15], [-5, -28], [-11, -27], [-4, -36], [-4, -39], [-8, -15], [-8, -15], [5, -28], [11, -27], [5, -36], [5, -39], [8, -15], [8, -15], [5, -28], [11, -27], [5, -36], [5, -39], [8, -15], [8, -15], [-2, -25], [4, -28], [-5, -43], [-9, -46], [12, -8], [12, -7], [-2, -25], [4, -28], [-5, -43], [-9, -46], [12, -8], [12, -7]],
  anchorHead: [[-1, -60], [-4, -61], [3, -61], [-4, -61], [-4, -61], [-1, -60], [-4, -61], [11, -77], [-4, -61], [11, -77], [11, -76], [-5, -61], [11, -76], [-12, -77], [11, -77], [-12, -77], [4, -61], [11, -76], [4, -61], [3, -61], [-12, -77], [3, -61], [-1, -60], [4, -61], [-1, -60], [-1, -59], [-1, -56], [-1, -57], [-1, -59], [-1, -58], [-1, -56], [-1, -57], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -62], [-4, -61], [-4, -59], [-4, -60], [-4, -62], [-4, -61], [-4, -59], [-4, -60], [12, -77], [12, -76], [12, -74], [12, -75], [12, -77], [12, -76], [12, -74], [12, -75], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [-11, -77], [-11, -76], [-11, -74], [-11, -75], [-11, -77], [-11, -76], [-11, -74], [-11, -75], [5, -62], [5, -61], [5, -59], [5, -60], [5, -62], [5, -61], [5, -59], [5, -60], [5, -61], [5, -60], [5, -58], [5, -59], [5, -61], [5, -60], [5, -58], [5, -59], [-1, -39], [-4, -40], [3, -40], [-4, -40], [-4, -40], [-1, -39], [-4, -40], [13, -56], [-4, -40], [12, -56], [11, -55], [-4, -40], [11, -55], [-12, -56], [12, -56], [-12, -56], [3, -40], [11, -55], [3, -40], [4, -40], [-12, -56], [3, -40], [-1, -39], [3, -40], [-13, -71], [-22, -48], [-13, -71], [-13, -71], [-22, -48], [-13, -71], [-9, -72], [-8, -50], [-9, -72], [-9, -72], [-8, -50], [-9, -72], [10, -72], [9, -50], [10, -72], [10, -72], [9, -50], [10, -72], [14, -71], [23, -48], [14, -71], [14, -71], [23, -48], [14, -71], [-4, -60], [-5, -61], [-6, -62], [-6, -63], [-5, -63], [-4, -62], [-4, -60], [-5, -61], [-6, -62], [-6, -63], [-5, -63], [-4, -62], [11, -77], [11, -78], [11, -79], [11, -80], [11, -79], [11, -78], [11, -77], [11, -78], [11, -79], [11, -80], [11, -79], [11, -78], [-10, -77], [-10, -78], [-10, -79], [-10, -80], [-10, -79], [-10, -78], [-10, -77], [-10, -78], [-10, -79], [-10, -80], [-10, -79], [-10, -78], [5, -60], [6, -61], [7, -62], [7, -63], [6, -63], [5, -62], [5, -60], [6, -61], [7, -62], [7, -63], [6, -63], [5, -62], [-5, -63], [-5, -63], [-10, -59], [-29, -38], [-30, -35], [-5, -63], [-5, -63], [-10, -59], [-29, -38], [-30, -35], [15, -80], [14, -79], [2, -73], [-9, -66], [-10, -63], [15, -80], [14, -79], [2, -73], [-9, -66], [-10, -63], [-14, -80], [-13, -79], [-1, -73], [10, -66], [11, -63], [-14, -80], [-13, -79], [-1, -73], [10, -66], [11, -63], [6, -63], [6, -63], [11, -59], [30, -38], [31, -35], [6, -63], [6, -63], [11, -59], [30, -38], [31, -35], [22, -65], [24, -63], [22, -65], [22, -65], [24, -63], [22, -65], [15, -73], [18, -69], [15, -73], [15, -73], [18, -69], [15, -73], [-14, -73], [-17, -69], [-14, -73], [-14, -73], [-17, -69], [-14, -73], [-21, -65], [-23, -63], [-21, -65], [-21, -65], [-23, -63], [-21, -65], [34, -58], [34, -58], [29, -58], [29, -58], [-28, -58], [-28, -58], [-33, -58], [-33, -58], [34, -26], [34, -26], [55, 9], [55, 9], [-54, 9], [-54, 9], [-33, -26], [-33, -26], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [-4, -61], [-2, -61], [-6, -58], [-29, -31], [-29, -30], [-29, -29], [-29, -29], [-29, -29], [-29, -29], [-4, -61], [-2, -61], [-6, -58], [-29, -31], [-29, -30], [-29, -29], [-29, -29], [-29, -29], [-29, -29], [10, -79], [12, -81], [3, -75], [-12, -67], [-12, -66], [-12, -66], [-12, -66], [-12, -66], [-12, -66], [10, -79], [12, -81], [3, -75], [-12, -67], [-12, -66], [-12, -66], [-12, -66], [-12, -66], [-12, -66], [-9, -79], [-11, -81], [-2, -75], [13, -67], [13, -66], [13, -66], [13, -66], [13, -66], [13, -66], [-9, -79], [-11, -81], [-2, -75], [13, -67], [13, -66], [13, -66], [13, -66], [13, -66], [13, -66], [5, -61], [3, -61], [7, -58], [30, -31], [30, -30], [30, -29], [30, -29], [30, -29], [30, -29], [5, -61], [3, -61], [7, -58], [30, -31], [30, -30], [30, -29], [30, -29], [30, -29], [30, -29], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -38], [-30, -36], [-30, -35], [-30, -35], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -38], [-30, -36], [-30, -35], [-30, -35], [15, -80], [14, -79], [16, -78], [2, -73], [-9, -66], [-10, -64], [-10, -63], [-10, -63], [15, -80], [14, -79], [16, -78], [2, -73], [-9, -66], [-10, -64], [-10, -63], [-10, -63], [-14, -80], [-13, -79], [-15, -78], [-1, -73], [10, -66], [11, -64], [11, -63], [11, -63], [-14, -80], [-13, -79], [-15, -78], [-1, -73], [10, -66], [11, -64], [11, -63], [11, -63], [6, -63], [6, -63], [5, -63], [11, -59], [30, -38], [31, -36], [31, -35], [31, -35], [6, -63], [6, -63], [5, -63], [11, -59], [30, -38], [31, -36], [31, -35], [31, -35], [-7, -59], [-2, -56], [-1, -60], [3, -66], [-25, -27], [-25, -26], [-7, -59], [-2, -56], [-1, -60], [3, -66], [-25, -27], [-25, -26], [10, -75], [7, -73], [10, -77], [9, -80], [-1, -59], [-1, -57], [10, -75], [7, -73], [10, -77], [9, -80], [-1, -59], [-1, -57], [-9, -75], [-6, -73], [-9, -77], [-8, -80], [2, -59], [2, -57], [-9, -75], [-6, -73], [-9, -77], [-8, -80], [2, -59], [2, -57], [8, -59], [3, -56], [2, -60], [-2, -66], [26, -27], [26, -26], [8, -59], [3, -56], [2, -60], [-2, -66], [26, -27], [26, -26]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 0, 0, 0, 0, 0, 0, 0, 0, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 90, 91, 92, 93, 94, 95, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 95, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 66, 67, 96, 68, 69, 97, 70, 70, 66, 67, 96, 68, 69, 97, 70, 70, 71, 72, 98, 73, 74, 99, 75, 75, 71, 72, 98, 73, 74, 99, 75, 75, 71, 72, 98, 73, 74, 99, 75, 75, 71, 72, 98, 73, 74, 99, 75, 75, 66, 67, 96, 68, 69, 97, 70, 70, 66, 67, 96, 68, 69, 97, 70, 70, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105]
};

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 39, 74, 101, 136, 173, 215, 250, 284, 318, 360, 399, 435, 474, 506, 545, 593, 637, 672, 707, 744, 779, 806, 831, 876, 915, 943, 971, 1015, 1054, 1088, 1127, 1173, 1214, 1248, 1284, 1320, 1356, 1397, 1436, 1472, 1511, 1552, 1593, 1632, 1673, 1720, 1772, 1829, 1889, 1939, 1972, 2008, 2047, 2089, 2132, 2174, 2214, 2254, 2295, 2337, 2378, 2417, 2455, 2493, 2532, 2573, 2619, 2670, 2732, 2793, 2826, 2861, 2907, 2954, 2999, 3049, 3094, 3138, 3194, 3260, 3306, 3357, 3417, 3480, 3542, 3604, 3637, 3672, 3715, 3779, 3844, 3909, 3955, 4001, 4052, 4106, 4168, 4229, 4290, 4325, 4358, 4393, 4428, 4474, 4521, 4568, 4617, 4657, 4697, 4773, 4848, 4896, 4937, 4978, 5041],
  widths: [39, 35, 27, 35, 37, 42, 35, 34, 34, 42, 39, 36, 39, 32, 39, 48, 44, 35, 35, 37, 35, 27, 25, 45, 39, 28, 28, 44, 39, 34, 39, 46, 41, 34, 36, 36, 36, 41, 39, 36, 39, 41, 41, 39, 41, 47, 52, 57, 60, 50, 33, 36, 39, 42, 43, 42, 40, 40, 41, 42, 41, 39, 38, 38, 39, 41, 46, 51, 62, 61, 33, 35, 46, 47, 45, 50, 45, 44, 56, 66, 46, 51, 60, 63, 62, 62, 33, 35, 43, 64, 65, 65, 46, 46, 51, 54, 62, 61, 61, 35, 33, 35, 35, 46, 47, 47, 49, 40, 40, 76, 75, 48, 41, 41, 63, 62],
  heights: [73, 73, 70, 70, 72, 71, 71, 73, 73, 71, 71, 72, 73, 73, 71, 67, 70, 69, 70, 69, 73, 71, 70, 68, 68, 68, 66, 67, 70, 68, 70, 69, 69, 73, 74, 72, 70, 72, 74, 73, 71, 72, 73, 72, 71, 59, 59, 49, 47, 44, 67, 61, 68, 59, 74, 75, 76, 77, 77, 76, 75, 76, 77, 78, 78, 77, 72, 71, 66, 62, 77, 79, 67, 66, 68, 68, 68, 67, 49, 46, 68, 68, 65, 66, 62, 59, 75, 79, 74, 67, 66, 66, 72, 72, 71, 69, 66, 62, 59, 76, 77, 79, 72, 67, 66, 65, 66, 96, 102, 63, 63, 69, 87, 93, 63, 62],
  bodyOffsets: [[0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [-2, -29], [-2, -29], [-2, -29], [-1, -29], [-1, -29], [-1, -29], [2, -28], [2, -28], [2, -28], [2, -29], [2, -29], [2, -29], [3, -29], [3, -29], [3, -29], [1, -27], [1, -27], [1, -27], [1, -28], [0, -27], [-1, -24], [-1, -25], [1, -28], [1, -27], [0, -25], [1, -25], [1, -27], [-2, -27], [-1, -27], [1, -27], [-1, -29], [2, -28], [3, -26], [2, -25], [1, -28], [2, -28], [-1, -27], [2, -28], [2, -30], [2, -30], [-2, -27], [1, -27], [-2, -30], [-1, -28], [-1, -26], [0, -27], [-2, -27], [-2, -26], [-2, -25], [-2, -27], [-1, -28], [-1, -26], [0, -24], [-1, -26], [-1, -28], [-1, -26], [0, -25], [-1, -26], [2, -30], [2, -28], [1, -26], [1, -27], [2, -27], [2, -26], [2, -25], [2, -27], [0, -28], [-1, -28], [2, -27], [-1, -28], [-2, -30], [-2, -30], [2, -27], [0, -27], [-1, -27], [3, -27], [1, -27], [-1, -27], [2, -29], [-1, -28], [-2, -26], [-1, -25], [2, -9], [2, -9], [2, -9], [3, -9], [3, -9], [3, -9], [-1, -15], [-1, -15], [-1, -15], [-2, -14], [-2, -14], [-2, -14], [1, -18], [1, -18], [1, -18], [2, -14], [2, -14], [2, -14], [2, -15], [2, -15], [2, -15], [-3, -9], [-3, -9], [-3, -9], [-1, -24], [-4, -21], [-1, -24], [-1, -24], [-4, -21], [-1, -24], [-5, -28], [-8, -26], [-5, -28], [-5, -28], [-8, -26], [-5, -28], [6, -28], [8, -26], [6, -28], [6, -28], [8, -26], [6, -28], [2, -24], [4, -21], [2, -24], [2, -24], [4, -21], [2, -24], [-1, -26], [-2, -26], [-2, -27], [-3, -27], [-2, -27], [-1, -27], [-1, -26], [-2, -26], [-2, -27], [-3, -27], [-2, -27], [-1, -27], [-4, -29], [-3, -30], [-3, -30], [-3, -31], [-3, -31], [-4, -30], [-4, -29], [-3, -30], [-3, -30], [-3, -31], [-3, -31], [-4, -30], [5, -29], [4, -30], [3, -30], [3, -31], [4, -31], [5, -30], [5, -29], [4, -30], [3, -30], [3, -31], [4, -31], [5, -30], [2, -26], [2, -26], [2, -27], [3, -27], [3, -27], [1, -27], [2, -26], [2, -26], [2, -27], [3, -27], [3, -27], [1, -27], [-2, -31], [-4, -30], [-8, -13], [-8, -11], [-8, -11], [-2, -31], [-4, -30], [-8, -13], [-8, -11], [-8, -11], [-2, -26], [-4, -27], [-11, -21], [-11, -21], [-11, -21], [-2, -26], [-4, -27], [-11, -21], [-11, -21], [-11, -21], [3, -26], [5, -27], [11, -21], [12, -21], [12, -21], [3, -26], [5, -27], [11, -21], [12, -21], [12, -21], [2, -31], [5, -30], [8, -13], [9, -11], [9, -11], [2, -31], [5, -30], [8, -13], [9, -11], [9, -11], [5, -25], [7, -21], [5, -25], [5, -25], [7, -21], [5, -25], [4, -25], [3, -24], [4, -25], [4, -25], [3, -24], [4, -25], [-3, -25], [-3, -24], [-3, -25], [-3, -25], [-3, -24], [-3, -25], [-4, -25], [-7, -21], [-4, -25], [-4, -25], [-7, -21], [-4, -25], [9, -18], [9, -18], [6, -21], [6, -21], [-6, -21], [-6, -21], [-9, -18], [-9, -18], [0, -8], [0, -8], [11, -8], [11, -8], [-11, -8], [-11, -8], [0, -8], [0, -8], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [1, -31], [0, -31], [0, -29], [-4, -19], [-5, -17], [-5, -15], [-5, -15], [-5, -15], [-5, -15], [1, -31], [0, -31], [0, -29], [-4, -19], [-5, -17], [-5, -15], [-5, -15], [-5, -15], [-5, -15], [2, -26], [0, -28], [-5, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [2, -26], [0, -28], [-5, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [-18, -26], [-1, -26], [1, -28], [6, -26], [18, -26], [19, -26], [19, -26], [19, -26], [19, -26], [19, -26], [-1, -26], [1, -28], [6, -26], [18, -26], [19, -26], [19, -26], [19, -26], [19, -26], [19, -26], [-1, -31], [1, -31], [0, -29], [5, -19], [5, -17], [5, -15], [5, -15], [5, -15], [5, -15], [-1, -31], [1, -31], [0, -29], [5, -19], [5, -17], [5, -15], [5, -15], [5, -15], [5, -15], [2, -31], [0, -35], [-2, -34], [0, -32], [-4, -18], [-4, -16], [-4, -14], [-4, -14], [2, -31], [0, -35], [-2, -34], [0, -32], [-4, -18], [-4, -16], [-4, -14], [-4, -14], [3, -29], [1, -29], [-1, -30], [-1, -27], [-7, -23], [-6, -23], [-6, -22], [-6, -22], [3, -29], [1, -29], [-1, -30], [-1, -27], [-7, -23], [-6, -23], [-6, -22], [-6, -22], [-2, -29], [0, -29], [2, -30], [2, -27], [7, -23], [7, -23], [7, -22], [7, -22], [-2, -29], [0, -29], [2, -30], [2, -27], [7, -23], [7, -23], [7, -22], [7, -22], [-2, -31], [0, -35], [3, -34], [0, -32], [4, -18], [5, -16], [5, -14], [5, -14], [-2, -31], [0, -35], [3, -34], [0, -32], [4, -18], [5, -16], [5, -14], [5, -14], [-1, -26], [-5, -29], [4, -44], [8, -47], [-8, -10], [-8, -9], [-1, -26], [-5, -29], [4, -44], [8, -47], [-8, -10], [-8, -9], [-2, -27], [-5, -26], [3, -36], [3, -41], [-5, -22], [-6, -22], [-2, -27], [-5, -26], [3, -36], [3, -41], [-5, -22], [-6, -22], [3, -27], [5, -26], [-2, -36], [-2, -41], [6, -22], [6, -22], [3, -27], [5, -26], [-2, -36], [-2, -41], [6, -22], [6, -22], [2, -26], [6, -29], [-4, -44], [-8, -47], [8, -10], [9, -9], [2, -26], [6, -29], [-4, -44], [-8, -47], [8, -10], [9, -9]],
  anchorHead: [[0, -59], [-5, -60], [6, -60], [-6, -60], [-5, -60], [0, -59], [-5, -60], [11, -76], [-6, -60], [11, -76], [11, -75], [-5, -60], [12, -75], [-10, -76], [11, -76], [-10, -76], [6, -60], [12, -75], [6, -60], [7, -60], [-10, -76], [7, -60], [2, -59], [6, -60], [0, -59], [0, -58], [0, -56], [0, -57], [0, -59], [0, -58], [0, -56], [0, -57], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [-5, -60], [-5, -59], [-5, -57], [-5, -58], [-4, -60], [-4, -59], [-4, -57], [-4, -58], [-4, -60], [-4, -59], [-4, -57], [-4, -58], [11, -76], [11, -74], [11, -73], [11, -74], [11, -76], [11, -75], [11, -74], [11, -75], [12, -75], [12, -74], [12, -73], [12, -74], [12, -75], [12, -74], [12, -73], [12, -74], [-10, -76], [-10, -75], [-10, -74], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [-10, -75], [5, -60], [5, -59], [5, -57], [5, -58], [5, -60], [5, -59], [5, -57], [5, -58], [6, -60], [6, -59], [6, -57], [6, -58], [6, -60], [6, -59], [6, -57], [6, -58], [0, -34], [-6, -35], [5, -35], [-6, -35], [-5, -35], [0, -34], [-5, -35], [11, -51], [-6, -35], [11, -51], [11, -50], [-5, -35], [12, -50], [-10, -51], [12, -51], [-10, -51], [6, -35], [12, -50], [6, -35], [7, -35], [-10, -51], [7, -35], [1, -34], [6, -35], [-11, -73], [-17, -48], [-11, -73], [-11, -73], [-17, -48], [-11, -73], [-12, -76], [-17, -56], [-12, -76], [-12, -76], [-17, -56], [-12, -76], [13, -76], [18, -56], [13, -76], [13, -76], [18, -56], [13, -76], [12, -73], [18, -48], [12, -73], [12, -73], [18, -48], [12, -73], [-4, -59], [-5, -60], [-5, -61], [-6, -62], [-5, -62], [-4, -61], [-4, -59], [-5, -60], [-5, -61], [-6, -62], [-5, -62], [-4, -61], [11, -80], [11, -81], [11, -82], [11, -83], [11, -83], [11, -82], [11, -80], [11, -81], [11, -82], [11, -83], [11, -83], [11, -82], [-10, -80], [-10, -81], [-10, -82], [-10, -83], [-10, -83], [-10, -82], [-10, -80], [-10, -81], [-10, -82], [-10, -83], [-10, -83], [-10, -82], [5, -59], [6, -60], [6, -61], [7, -62], [6, -62], [5, -61], [5, -59], [6, -60], [6, -61], [7, -62], [6, -62], [5, -61], [-6, -59], [-5, -59], [-36, -26], [-36, -24], [-36, -24], [-6, -59], [-5, -59], [-36, -26], [-36, -24], [-36, -24], [11, -75], [12, -77], [-19, -57], [-20, -56], [-20, -56], [11, -75], [12, -77], [-19, -57], [-20, -56], [-20, -56], [-10, -75], [-11, -77], [20, -57], [21, -56], [21, -56], [-10, -75], [-11, -77], [20, -57], [21, -56], [21, -56], [7, -59], [6, -59], [37, -26], [37, -24], [37, -24], [7, -59], [6, -59], [37, -26], [37, -24], [37, -24], [22, -69], [27, -65], [22, -69], [22, -69], [27, -65], [22, -69], [18, -76], [20, -75], [18, -76], [18, -76], [20, -75], [18, -76], [-17, -76], [-19, -75], [-17, -76], [-17, -76], [-19, -75], [-17, -76], [-21, -69], [-26, -65], [-21, -69], [-21, -69], [-26, -65], [-21, -69], [32, -61], [32, -61], [26, -72], [26, -72], [-25, -72], [-25, -72], [-31, -61], [-31, -61], [34, -26], [34, -26], [55, 9], [55, 9], [-54, 9], [-54, 9], [-33, -26], [-33, -26], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [0, -59], [-4, -61], [-2, -61], [-6, -58], [-30, -35], [-30, -34], [-30, -33], [-30, -33], [-30, -33], [-30, -33], [-4, -61], [-2, -61], [-6, -58], [-30, -35], [-30, -34], [-30, -33], [-30, -33], [-30, -33], [-30, -33], [11, -77], [11, -80], [2, -75], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-13, -68], [-13, -68], [11, -77], [11, -80], [2, -75], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-13, -68], [-13, -68], [-10, -77], [-10, -80], [-1, -75], [13, -69], [14, -68], [14, -68], [14, -68], [14, -68], [14, -68], [-10, -77], [-10, -80], [-1, -75], [13, -69], [14, -68], [14, -68], [14, -68], [14, -68], [14, -68], [5, -61], [3, -61], [7, -58], [31, -35], [31, -34], [31, -33], [31, -33], [31, -33], [31, -33], [5, -61], [3, -61], [7, -58], [31, -35], [31, -34], [31, -33], [31, -33], [31, -33], [31, -33], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -33], [-29, -31], [-29, -29], [-29, -29], [-5, -63], [-5, -63], [-4, -63], [-10, -59], [-29, -33], [-29, -31], [-29, -29], [-29, -29], [15, -80], [13, -79], [14, -80], [3, -74], [-12, -66], [-12, -64], [-12, -63], [-12, -63], [15, -80], [13, -79], [14, -80], [3, -74], [-12, -66], [-12, -64], [-12, -63], [-12, -63], [-14, -80], [-12, -79], [-13, -80], [-2, -74], [13, -66], [13, -64], [13, -63], [13, -63], [-14, -80], [-12, -79], [-13, -80], [-2, -74], [13, -66], [13, -64], [13, -63], [13, -63], [6, -63], [6, -63], [5, -63], [11, -59], [30, -33], [30, -31], [30, -29], [30, -29], [6, -63], [6, -63], [5, -63], [11, -59], [30, -33], [30, -31], [30, -29], [30, -29], [-4, -59], [-4, -58], [-1, -62], [3, -68], [-20, -35], [-20, -34], [-4, -59], [-4, -58], [-1, -62], [3, -68], [-20, -35], [-20, -34], [13, -78], [13, -74], [13, -75], [13, -83], [2, -66], [2, -65], [13, -78], [13, -74], [13, -75], [13, -83], [2, -66], [2, -65], [-12, -78], [-12, -74], [-12, -75], [-12, -83], [-1, -66], [-1, -65], [-12, -78], [-12, -74], [-12, -75], [-12, -83], [-1, -66], [-1, -65], [5, -59], [5, -58], [2, -62], [-2, -68], [21, -35], [21, -34], [5, -59], [5, -58], [2, -62], [-2, -68], [21, -35], [21, -34]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 92, 93, 94, 95, 96, 97, 98, 98, 92, 93, 94, 95, 96, 97, 98, 98, 99, 100, 101, 102, 103, 104, 105, 105, 99, 100, 101, 102, 103, 104, 105, 105, 99, 100, 101, 102, 103, 104, 105, 105, 99, 100, 101, 102, 103, 104, 105, 105, 92, 93, 94, 95, 96, 97, 98, 98, 92, 93, 94, 95, 96, 97, 98, 98, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110]
};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 73, 102, 136, 169, 205, 239, 275, 312, 348, 382, 418, 455, 490, 532, 569, 602, 639, 677, 713, 747, 779, 820, 858, 886, 920, 961, 996, 1022, 1054, 1092, 1124, 1153, 1190, 1235, 1277, 1310, 1345, 1377, 1412, 1449, 1484, 1516, 1551, 1588, 1623, 1657, 1688, 1720, 1753, 1796, 1839, 1875, 1912, 1948, 1984, 2020, 2056, 2092, 2128, 2165, 2202, 2239, 2276, 2313, 2350, 2391, 2432, 2473, 2522, 2555, 2589, 2622, 2653, 2702, 2751, 2792, 2835, 2890, 2938, 3002, 3061, 3097, 3130, 3164, 3205, 3253, 3298, 3334, 3366, 3399, 3442, 3487, 3531, 3567, 3601, 3640, 3674, 3729, 3783, 3820, 3856, 3895, 3930, 3983, 4035, 4069, 4110, 4151, 4192, 4233, 4271, 4304, 4338, 4371],
  widths: [37, 36, 29, 34, 33, 36, 34, 36, 37, 36, 34, 36, 37, 35, 42, 37, 33, 37, 38, 36, 34, 32, 41, 38, 28, 34, 41, 35, 26, 32, 38, 32, 29, 37, 45, 42, 33, 35, 32, 35, 37, 35, 32, 35, 37, 35, 34, 31, 32, 33, 43, 43, 36, 37, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 41, 41, 41, 49, 33, 34, 33, 31, 49, 49, 41, 43, 55, 48, 64, 59, 36, 33, 34, 41, 48, 45, 36, 32, 33, 43, 45, 44, 36, 34, 39, 34, 55, 54, 37, 36, 39, 35, 53, 52, 34, 41, 41, 41, 41, 38, 33, 34, 33, 33],
  heights: [72, 72, 69, 65, 68, 65, 69, 70, 69, 65, 69, 70, 69, 66, 63, 65, 64, 67, 68, 70, 70, 67, 65, 65, 65, 64, 64, 66, 68, 70, 70, 69, 65, 66, 64, 65, 69, 70, 69, 68, 68, 70, 69, 68, 68, 57, 58, 59, 58, 57, 61, 51, 60, 49, 68, 69, 70, 71, 71, 70, 67, 68, 69, 70, 70, 69, 70, 69, 66, 65, 66, 65, 63, 66, 67, 66, 66, 65, 64, 61, 47, 44, 68, 62, 60, 60, 57, 56, 67, 68, 69, 70, 61, 59, 69, 62, 63, 62, 59, 58, 67, 67, 66, 70, 60, 58, 71, 71, 69, 67, 69, 64, 68, 67, 65, 66],
  bodyOffsets: [[0, -26], [0, -26], [0, -26], [-3, -26], [-3, -26], [-3, -26], [-2, -27], [-2, -27], [-2, -27], [-4, -29], [-4, -29], [-4, -29], [0, -28], [0, -28], [0, -28], [1, -29], [1, -29], [1, -29], [2, -27], [2, -27], [2, -27], [2, -26], [2, -26], [2, -26], [0, -29], [0, -25], [0, -26], [0, -28], [-1, -29], [-1, -25], [-1, -26], [0, -28], [-1, -29], [-4, -28], [-2, -28], [0, -31], [1, -28], [0, -26], [1, -26], [0, -28], [-2, -28], [-4, -27], [-4, -28], [-1, -30], [1, -30], [-4, -28], [-2, -28], [-2, -29], [-1, -27], [-1, -25], [-2, -26], [-1, -30], [-4, -29], [-3, -28], [-3, -28], [-3, -28], [0, -27], [-1, -25], [0, -27], [0, -29], [0, -27], [0, -25], [0, -27], [0, -30], [1, -27], [1, -25], [2, -26], [2, -30], [5, -29], [4, -28], [3, -28], [4, -28], [2, -28], [5, -27], [4, -28], [1, -30], [-1, -30], [5, -28], [3, -28], [2, -29], [2, -29], [4, -28], [3, -28], [1, -31], [0, -28], [0, -26], [-1, -26], [0, -28], [0, -19], [0, -19], [0, -19], [-2, -19], [-2, -19], [-2, -19], [-4, -18], [-4, -18], [-4, -18], [-3, -19], [-3, -19], [-3, -19], [0, -19], [0, -19], [0, -19], [3, -19], [3, -19], [3, -19], [5, -18], [5, -18], [5, -18], [3, -19], [3, -19], [3, -19], [-2, -26], [-1, -21], [-2, -26], [-2, -26], [-1, -21], [-2, -26], [-5, -27], [-6, -21], [-5, -27], [-5, -27], [-6, -21], [-5, -27], [5, -27], [7, -21], [5, -27], [5, -27], [7, -21], [5, -27], [3, -26], [2, -21], [3, -26], [3, -26], [2, -21], [3, -26], [2, -27], [2, -27], [2, -28], [2, -28], [2, -28], [2, -28], [2, -27], [2, -27], [2, -28], [2, -28], [2, -28], [2, -28], [0, -27], [0, -28], [0, -28], [0, -29], [0, -29], [0, -28], [0, -27], [0, -28], [0, -28], [0, -29], [0, -29], [0, -28], [1, -27], [1, -28], [1, -28], [1, -29], [1, -29], [1, -28], [1, -27], [1, -28], [1, -28], [1, -29], [1, -29], [1, -28], [-2, -27], [-2, -27], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -27], [-2, -27], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [0, -27], [0, -26], [0, -25], [6, -27], [6, -27], [0, -27], [0, -26], [0, -25], [6, -27], [6, -27], [-1, -26], [-2, -25], [-1, -24], [3, -21], [3, -21], [-1, -26], [-2, -25], [-1, -24], [3, -21], [3, -21], [2, -26], [2, -25], [2, -24], [-2, -21], [-2, -21], [2, -26], [2, -25], [2, -24], [-2, -21], [-2, -21], [1, -27], [1, -26], [1, -25], [-5, -27], [-5, -27], [1, -27], [1, -26], [1, -25], [-5, -27], [-5, -27], [6, -24], [8, -26], [6, -24], [6, -24], [8, -26], [6, -24], [3, -25], [6, -23], [3, -25], [3, -25], [6, -23], [3, -25], [-2, -25], [-5, -23], [-2, -25], [-2, -25], [-5, -23], [-2, -25], [-5, -24], [-7, -26], [-5, -24], [-5, -24], [-7, -26], [-5, -24], [13, -27], [13, -27], [10, -21], [10, -21], [-10, -21], [-10, -21], [-12, -27], [-12, -27], [7, -7], [7, -7], [7, -3], [7, -3], [-6, -3], [-6, -3], [-7, -7], [-7, -7], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [4, -32], [0, -31], [-3, -30], [-6, -22], [-4, -22], [-4, -22], [-4, -22], [-4, -22], [2, -27], [4, -32], [0, -31], [-3, -30], [-6, -22], [-4, -22], [-4, -22], [-4, -22], [-4, -22], [0, -27], [1, -28], [0, -29], [-2, -30], [-3, -25], [-3, -24], [-3, -24], [-3, -24], [-3, -24], [0, -27], [1, -28], [0, -29], [-2, -30], [-3, -25], [-3, -24], [-3, -24], [-3, -24], [-3, -24], [0, -27], [-1, -28], [1, -29], [3, -30], [4, -25], [3, -24], [3, -24], [3, -24], [3, -24], [0, -27], [-1, -28], [1, -29], [3, -30], [4, -25], [3, -24], [3, -24], [3, -24], [3, -24], [-2, -27], [-3, -32], [0, -31], [4, -30], [6, -22], [5, -22], [5, -22], [5, -22], [5, -22], [-2, -27], [-3, -32], [0, -31], [4, -30], [6, -22], [5, -22], [5, -22], [5, -22], [5, -22], [2, -27], [4, -32], [8, -32], [0, -32], [-7, -22], [-7, -22], [-7, -22], [-7, -22], [2, -27], [4, -32], [8, -32], [0, -32], [-7, -22], [-7, -22], [-7, -22], [-7, -22], [0, -27], [3, -27], [4, -27], [-2, -29], [-9, -26], [-9, -25], [-9, -25], [-9, -25], [0, -27], [3, -27], [4, -27], [-2, -29], [-9, -26], [-9, -25], [-9, -25], [-9, -25], [1, -27], [-3, -27], [-3, -27], [3, -29], [10, -26], [9, -25], [9, -25], [9, -25], [1, -27], [-3, -27], [-3, -27], [3, -29], [10, -26], [9, -25], [9, -25], [9, -25], [-2, -27], [-4, -32], [-7, -32], [0, -32], [8, -22], [7, -22], [7, -22], [7, -22], [-2, -27], [-4, -32], [-7, -32], [0, -32], [8, -22], [7, -22], [7, -22], [7, -22], [0, -25], [0, -27], [0, -26], [0, -25], [0, -26], [0, -26], [0, -25], [0, -27], [0, -26], [0, -25], [0, -26], [0, -26], [-1, -28], [-1, -26], [-2, -25], [-1, -24], [-1, -25], [-1, -25], [-1, -28], [-1, -26], [-2, -25], [-1, -24], [-1, -25], [-1, -25], [1, -28], [2, -26], [2, -25], [2, -24], [2, -25], [2, -25], [1, -28], [2, -26], [2, -25], [2, -24], [2, -25], [2, -25], [0, -25], [1, -27], [1, -26], [1, -25], [1, -26], [1, -26], [0, -25], [1, -27], [1, -26], [1, -25], [1, -26], [1, -26]],
  anchorHead: [[0, -57], [-3, -57], [3, -57], [-4, -58], [-5, -58], [-1, -57], [-5, -58], [11, -74], [-5, -58], [12, -74], [12, -73], [-4, -58], [11, -73], [-10, -74], [11, -74], [-13, -74], [3, -58], [9, -73], [4, -58], [5, -58], [-10, -73], [4, -58], [1, -57], [5, -58], [0, -57], [0, -55], [0, -56], [0, -58], [0, -57], [0, -55], [0, -56], [0, -58], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-5, -58], [-5, -56], [-5, -58], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -72], [11, -70], [11, -71], [11, -73], [11, -72], [11, -70], [11, -71], [11, -73], [-10, -73], [-10, -71], [-10, -72], [-10, -74], [-10, -73], [-10, -71], [-10, -72], [-10, -74], [6, -58], [6, -56], [6, -58], [6, -59], [6, -58], [6, -56], [6, -57], [6, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [0, -43], [-3, -43], [3, -43], [-4, -43], [-4, -43], [-1, -43], [-4, -44], [10, -60], [-5, -44], [11, -60], [11, -59], [-4, -44], [11, -59], [-10, -60], [10, -60], [-10, -60], [5, -44], [12, -59], [5, -44], [6, -44], [-9, -60], [5, -43], [2, -43], [5, -43], [-12, -70], [-10, -36], [-13, -68], [-12, -70], [-10, -36], [-13, -68], [-10, -73], [-13, -46], [-11, -72], [-10, -73], [-13, -46], [-11, -72], [11, -73], [14, -46], [12, -72], [11, -73], [14, -46], [12, -72], [13, -70], [11, -36], [14, -68], [13, -70], [11, -36], [14, -68], [-2, -57], [-2, -58], [-2, -59], [-2, -60], [-2, -60], [-2, -59], [-2, -57], [-2, -58], [-2, -59], [-2, -60], [-2, -60], [-2, -59], [14, -73], [14, -74], [14, -75], [14, -77], [14, -77], [14, -76], [14, -73], [14, -74], [14, -75], [14, -77], [14, -77], [14, -76], [-13, -73], [-13, -74], [-13, -75], [-13, -77], [-13, -77], [-13, -76], [-13, -73], [-13, -74], [-13, -75], [-13, -77], [-13, -77], [-13, -76], [3, -57], [3, -58], [3, -59], [3, -60], [3, -60], [3, -59], [3, -57], [3, -58], [3, -59], [3, -60], [3, -60], [3, -59], [-3, -58], [-2, -57], [0, -54], [1, -56], [1, -56], [-3, -58], [-2, -57], [0, -54], [1, -56], [1, -56], [11, -74], [12, -73], [12, -71], [17, -68], [17, -68], [11, -74], [12, -73], [12, -71], [17, -68], [17, -68], [-10, -74], [-11, -73], [-11, -71], [-16, -68], [-16, -68], [-10, -74], [-11, -73], [-11, -71], [-16, -68], [-16, -68], [4, -58], [3, -57], [1, -54], [0, -56], [0, -56], [4, -58], [3, -57], [1, -54], [0, -56], [0, -56], [17, -67], [20, -68], [17, -67], [17, -67], [20, -68], [17, -67], [11, -74], [15, -72], [11, -74], [11, -74], [15, -72], [11, -74], [-10, -74], [-14, -72], [-10, -74], [-10, -74], [-14, -72], [-10, -74], [-16, -67], [-19, -68], [-16, -67], [-16, -67], [-19, -68], [-16, -67], [32, -69], [32, -69], [23, -65], [23, -65], [-22, -65], [-22, -65], [-31, -69], [-31, -69], [37, -21], [37, -21], [39, 8], [39, 8], [-38, 8], [-38, 8], [-36, -21], [-36, -21], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -57], [-1, -58], [-6, -59], [-10, -58], [-18, -45], [-19, -42], [-19, -41], [-19, -41], [-19, -41], [-1, -57], [-1, -58], [-6, -59], [-10, -58], [-18, -45], [-19, -42], [-19, -41], [-19, -41], [-19, -41], [15, -73], [15, -75], [12, -76], [7, -73], [2, -65], [-1, -62], [-1, -61], [-1, -61], [-1, -61], [15, -73], [15, -75], [12, -76], [7, -73], [2, -65], [-1, -62], [-1, -61], [-1, -61], [-1, -61], [-14, -73], [-14, -75], [-11, -76], [-6, -73], [-1, -65], [2, -62], [2, -61], [2, -61], [2, -61], [-14, -73], [-14, -75], [-11, -76], [-6, -73], [-1, -65], [2, -62], [2, -61], [2, -61], [2, -61], [2, -57], [2, -58], [7, -59], [11, -58], [19, -45], [20, -42], [20, -41], [20, -41], [20, -41], [2, -57], [2, -58], [7, -59], [11, -58], [19, -45], [20, -42], [20, -41], [20, -41], [20, -41], [-2, -58], [-1, -59], [5, -60], [-7, -58], [-20, -46], [-21, -44], [-20, -44], [-20, -44], [-2, -58], [-1, -59], [5, -60], [-7, -58], [-20, -46], [-21, -44], [-20, -44], [-20, -44], [16, -73], [21, -73], [24, -71], [9, -72], [-2, -64], [-2, -61], [-1, -61], [-1, -61], [16, -73], [21, -73], [24, -71], [9, -72], [-2, -64], [-2, -61], [-1, -61], [-1, -61], [-15, -73], [-20, -73], [-23, -71], [-8, -72], [3, -64], [3, -61], [2, -61], [2, -61], [-15, -73], [-20, -73], [-23, -71], [-8, -72], [3, -64], [3, -61], [2, -61], [2, -61], [3, -58], [2, -59], [-4, -60], [8, -58], [21, -46], [22, -44], [21, -44], [21, -44], [3, -58], [2, -59], [-4, -60], [8, -58], [21, -46], [22, -44], [21, -44], [21, -44], [-3, -56], [-4, -57], [-3, -55], [0, -54], [0, -55], [0, -55], [-3, -56], [-4, -57], [-3, -55], [0, -54], [0, -55], [0, -55], [15, -73], [11, -73], [12, -71], [13, -69], [13, -70], [13, -70], [15, -73], [11, -73], [12, -71], [13, -69], [13, -70], [13, -70], [-14, -73], [-10, -73], [-11, -71], [-12, -69], [-12, -70], [-12, -70], [-14, -73], [-10, -73], [-11, -71], [-12, -69], [-12, -70], [-12, -70], [4, -56], [5, -57], [4, -55], [1, -54], [1, -55], [1, -55], [4, -56], [5, -57], [4, -55], [1, -54], [1, -55], [1, -55]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 106, 107, 108, 109, 110, 110, 106, 107, 108, 109, 110, 110, 111, 112, 113, 114, 115, 115, 111, 112, 113, 114, 115, 115, 111, 112, 113, 114, 115, 115, 111, 112, 113, 114, 115, 115, 106, 107, 108, 109, 110, 110, 106, 107, 108, 109, 110, 110]
};

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 71, 97, 130, 165, 200, 235, 269, 304, 339, 374, 408, 443, 475, 518, 562, 603, 632, 667, 703, 736, 761, 806, 847, 884, 908, 952, 997, 1031, 1063, 1098, 1137, 1170, 1203, 1246, 1290, 1325, 1359, 1395, 1428, 1459, 1493, 1528, 1562, 1593, 1634, 1674, 1719, 1761, 1810, 1844, 1882, 1916, 1954, 2005, 2054, 2100, 2148, 2200, 2252, 2297, 2340, 2382, 2426, 2472, 2517, 2565, 2619, 2677, 2735, 2766, 2805, 2856, 2905, 2950, 2983, 3036, 3086, 3142, 3205, 3247, 3285, 3324, 3365, 3413, 3470, 3527, 3584, 3611, 3639, 3668, 3697, 3728, 3782, 3836, 3890, 3947, 4003, 4058, 4113, 4179, 4246, 4313, 4360, 4408, 4457, 4505, 4563, 4622, 4681, 4734, 4775, 4841, 4898, 4945, 4979, 5033],
  widths: [38, 33, 26, 33, 35, 35, 35, 34, 35, 35, 35, 34, 35, 32, 43, 44, 41, 29, 35, 36, 33, 25, 45, 41, 37, 24, 44, 45, 34, 32, 35, 39, 33, 33, 43, 44, 35, 34, 36, 33, 31, 34, 35, 34, 31, 41, 40, 45, 42, 49, 34, 38, 34, 38, 51, 49, 46, 48, 52, 52, 45, 43, 42, 44, 46, 45, 48, 54, 58, 58, 31, 39, 51, 49, 45, 33, 53, 50, 56, 63, 42, 38, 39, 41, 48, 57, 57, 57, 27, 28, 29, 29, 31, 54, 54, 54, 57, 56, 55, 55, 66, 67, 67, 47, 48, 49, 48, 58, 59, 59, 53, 41, 66, 57, 47, 34, 54, 51],
  heights: [72, 72, 69, 70, 70, 68, 65, 64, 68, 70, 67, 67, 68, 68, 66, 63, 66, 68, 64, 66, 71, 69, 68, 66, 67, 66, 65, 64, 67, 68, 67, 65, 61, 65, 63, 62, 64, 63, 64, 62, 60, 63, 64, 62, 60, 51, 51, 47, 50, 49, 66, 52, 65, 56, 67, 68, 70, 71, 70, 68, 69, 70, 72, 73, 72, 70, 75, 80, 60, 59, 71, 70, 66, 65, 71, 65, 65, 53, 48, 48, 71, 72, 73, 74, 73, 75, 75, 75, 65, 66, 67, 68, 67, 73, 73, 73, 75, 75, 73, 71, 64, 63, 63, 77, 77, 75, 71, 70, 69, 69, 54, 74, 62, 68, 58, 70, 80, 72],
  bodyOffsets: [[-1, -24], [-1, -24], [-1, -24], [-2, -24], [-2, -24], [-2, -24], [-1, -25], [-1, -25], [-1, -25], [2, -25], [2, -25], [2, -25], [3, -25], [3, -25], [3, -25], [3, -25], [3, -25], [3, -25], [1, -25], [1, -25], [1, -25], [3, -24], [3, -24], [3, -24], [0, -25], [1, -25], [0, -24], [1, -23], [0, -24], [-1, -24], [-1, -22], [-1, -23], [-1, -25], [-4, -25], [-2, -24], [-1, -24], [0, -25], [-1, -26], [0, -23], [0, -21], [-1, -23], [-7, -23], [-1, -22], [1, -22], [0, -25], [-6, -24], [-3, -23], [-1, -22], [0, -22], [0, -21], [0, -20], [-1, -23], [-1, -23], [-2, -23], [-2, -22], [-2, -22], [0, -23], [1, -22], [2, -21], [2, -23], [1, -23], [1, -22], [0, -21], [0, -23], [0, -22], [1, -21], [1, -20], [2, -23], [2, -23], [3, -23], [2, -22], [3, -22], [2, -23], [8, -23], [2, -22], [0, -22], [0, -25], [6, -24], [4, -23], [1, -22], [1, -25], [5, -25], [2, -24], [2, -24], [1, -25], [2, -26], [0, -23], [1, -21], [-4, -10], [-4, -10], [-4, -10], [-3, -10], [-3, -10], [-3, -10], [-6, -10], [-6, -10], [-6, -10], [1, -10], [1, -10], [1, -10], [0, -10], [0, -10], [0, -10], [-1, -10], [-1, -10], [-1, -10], [7, -10], [7, -10], [7, -10], [3, -10], [3, -10], [3, -10], [-2, -21], [-2, -14], [-2, -21], [-2, -21], [-2, -14], [-2, -21], [1, -22], [-1, -18], [1, -22], [1, -22], [-1, -18], [1, -22], [-1, -22], [1, -18], [-1, -22], [-1, -22], [1, -18], [-1, -22], [2, -21], [2, -14], [2, -21], [2, -21], [2, -14], [2, -21], [-2, -22], [-1, -23], [0, -24], [-1, -24], [-3, -24], [-3, -23], [-2, -22], [-1, -23], [0, -24], [-1, -24], [-3, -24], [-3, -23], [-4, -21], [-3, -22], [-3, -23], [-4, -23], [-5, -23], [-4, -22], [-4, -21], [-3, -22], [-3, -23], [-4, -23], [-5, -23], [-4, -22], [5, -21], [4, -22], [3, -23], [4, -23], [5, -23], [5, -22], [5, -21], [4, -22], [3, -23], [4, -23], [5, -23], [5, -22], [3, -22], [2, -23], [0, -24], [1, -24], [3, -24], [3, -23], [3, -22], [2, -23], [0, -24], [1, -24], [3, -24], [3, -23], [-2, -24], [0, -25], [-4, -28], [-17, -15], [-17, -14], [-2, -24], [0, -25], [-4, -28], [-17, -15], [-17, -14], [2, -25], [1, -25], [-2, -27], [-19, -25], [-20, -24], [2, -25], [1, -25], [-2, -27], [-19, -25], [-20, -24], [-1, -25], [0, -25], [3, -27], [20, -25], [21, -24], [-1, -25], [0, -25], [3, -27], [20, -25], [21, -24], [3, -24], [0, -25], [4, -28], [17, -15], [17, -14], [3, -24], [0, -25], [4, -28], [17, -15], [17, -14], [-7, -23], [-4, -23], [-7, -23], [-7, -23], [-4, -23], [-7, -23], [2, -22], [4, -21], [2, -22], [2, -22], [4, -21], [2, -22], [-1, -22], [-3, -21], [-1, -22], [-1, -22], [-3, -21], [-1, -22], [8, -23], [5, -23], [8, -23], [8, -23], [5, -23], [8, -23], [0, -21], [0, -21], [13, -16], [13, -16], [-13, -16], [-13, -16], [1, -21], [1, -21], [1, 1], [1, 1], [1, 1], [1, 1], [0, 1], [0, 1], [-1, 1], [-1, 1], [-2, -24], [-2, -24], [-2, -24], [-2, -24], [-2, -24], [-2, -24], [-2, -24], [-2, -24], [-3, -23], [-3, -24], [-4, -24], [-5, -25], [-7, -24], [-7, -24], [-13, -20], [-13, -20], [-13, -20], [-3, -23], [-3, -24], [-4, -24], [-5, -25], [-7, -24], [-7, -24], [-13, -20], [-13, -20], [-13, -20], [-1, -22], [-3, -23], [-4, -23], [-6, -24], [-6, -23], [-6, -23], [-13, -25], [-13, -25], [-13, -25], [-1, -22], [-3, -23], [-4, -23], [-6, -24], [-6, -23], [-6, -23], [-13, -25], [-13, -25], [-13, -25], [2, -22], [3, -23], [5, -23], [7, -24], [7, -23], [7, -23], [13, -25], [13, -25], [13, -25], [2, -22], [3, -23], [5, -23], [7, -24], [7, -23], [7, -23], [13, -25], [13, -25], [13, -25], [3, -23], [3, -24], [5, -24], [6, -25], [7, -24], [7, -24], [14, -20], [14, -20], [14, -20], [3, -23], [3, -24], [5, -24], [6, -25], [7, -24], [7, -24], [14, -20], [14, -20], [14, -20], [-6, -24], [-6, -25], [-5, -26], [-5, -27], [-5, -27], [-11, -11], [-11, -10], [-11, -10], [-6, -24], [-6, -25], [-5, -26], [-5, -27], [-5, -27], [-11, -11], [-11, -10], [-11, -10], [-4, -25], [-3, -25], [-2, -24], [-3, -22], [-3, -22], [-10, -22], [-10, -21], [-10, -21], [-4, -25], [-3, -25], [-2, -24], [-3, -22], [-3, -22], [-10, -22], [-10, -21], [-10, -21], [5, -25], [3, -25], [3, -24], [3, -22], [3, -22], [10, -22], [11, -21], [11, -21], [5, -25], [3, -25], [3, -24], [3, -22], [3, -22], [10, -22], [11, -21], [11, -21], [7, -24], [6, -25], [6, -26], [6, -27], [6, -27], [11, -11], [12, -10], [12, -10], [7, -24], [6, -25], [6, -26], [6, -27], [6, -27], [11, -11], [12, -10], [12, -10], [-2, -22], [-6, -24], [-4, -19], [-2, -25], [-22, -16], [-3, -23], [-2, -22], [-6, -24], [-4, -19], [-2, -25], [-22, -16], [-3, -23], [-4, -21], [-4, -25], [-4, -16], [1, -25], [-18, -28], [-1, -25], [-4, -21], [-4, -25], [-4, -16], [1, -25], [-18, -28], [-1, -25], [5, -21], [5, -25], [5, -16], [-1, -25], [18, -28], [2, -25], [5, -21], [5, -25], [5, -16], [-1, -25], [18, -28], [2, -25], [3, -22], [7, -24], [5, -19], [3, -25], [22, -16], [4, -23], [3, -22], [7, -24], [5, -19], [3, -25], [22, -16], [4, -23]],
  anchorHead: [[1, -56], [-3, -57], [6, -57], [-5, -57], [-5, -57], [0, -56], [-3, -57], [13, -73], [-3, -57], [14, -73], [14, -72], [-2, -57], [13, -72], [-9, -73], [13, -73], [-9, -73], [6, -57], [13, -72], [5, -57], [5, -57], [-11, -73], [6, -57], [1, -56], [5, -57], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [1, -32], [-3, -33], [6, -33], [-4, -33], [-4, -33], [1, -32], [-2, -33], [14, -49], [-2, -33], [13, -49], [13, -48], [-2, -33], [12, -48], [-10, -49], [12, -49], [-12, -49], [4, -33], [10, -48], [3, -33], [3, -33], [-13, -49], [4, -33], [-1, -32], [4, -33], [-10, -66], [-15, -39], [-10, -66], [-10, -66], [-15, -39], [-10, -66], [-7, -67], [-10, -46], [-7, -67], [-7, -67], [-10, -46], [-7, -67], [8, -67], [11, -46], [8, -67], [8, -67], [11, -46], [8, -67], [11, -66], [16, -39], [11, -66], [11, -66], [16, -39], [11, -66], [-4, -53], [-4, -54], [-4, -56], [-4, -57], [-4, -56], [-4, -54], [-4, -53], [-4, -54], [-4, -56], [-4, -57], [-4, -56], [-4, -54], [13, -69], [13, -70], [13, -72], [13, -73], [13, -72], [13, -70], [13, -69], [13, -70], [13, -72], [13, -73], [13, -72], [13, -70], [-12, -69], [-12, -70], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [-12, -69], [-12, -70], [-12, -72], [-12, -73], [-12, -72], [-12, -70], [5, -53], [5, -54], [5, -56], [5, -57], [5, -56], [5, -54], [5, -53], [5, -54], [5, -56], [5, -57], [5, -56], [5, -54], [-5, -57], [-5, -58], [-8, -58], [-30, -41], [-32, -40], [-5, -57], [-5, -58], [-8, -58], [-30, -41], [-32, -40], [14, -73], [13, -74], [12, -75], [-10, -73], [-13, -71], [14, -73], [13, -74], [12, -75], [-10, -73], [-13, -71], [-13, -73], [-12, -74], [-11, -75], [11, -73], [14, -71], [-13, -73], [-12, -74], [-11, -75], [11, -73], [14, -71], [6, -57], [6, -58], [9, -58], [31, -41], [33, -40], [6, -57], [6, -58], [9, -58], [31, -41], [33, -40], [13, -69], [20, -67], [13, -69], [13, -69], [20, -67], [13, -69], [10, -73], [15, -71], [10, -73], [10, -73], [15, -71], [10, -73], [-9, -73], [-14, -71], [-9, -73], [-9, -73], [-14, -71], [-9, -73], [-12, -69], [-19, -67], [-12, -69], [-12, -69], [-19, -67], [-12, -69], [21, -64], [21, -64], [30, -61], [30, -61], [-29, -61], [-29, -61], [-20, -64], [-20, -64], [39, -18], [39, -18], [40, 24], [40, 24], [-39, 24], [-39, 24], [-38, -18], [-38, -18], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-2, -54], [-3, -55], [-5, -56], [-7, -57], [-8, -56], [-8, -56], [-14, -41], [-14, -41], [-14, -41], [-2, -54], [-3, -55], [-5, -56], [-7, -57], [-8, -56], [-8, -56], [-14, -41], [-14, -41], [-14, -41], [13, -69], [12, -70], [11, -71], [9, -72], [8, -71], [8, -71], [-1, -69], [-1, -69], [-1, -69], [13, -69], [12, -70], [11, -71], [9, -72], [8, -71], [8, -71], [-1, -69], [-1, -69], [-1, -69], [-12, -69], [-11, -70], [-10, -71], [-8, -72], [-7, -71], [-7, -71], [2, -69], [2, -69], [2, -69], [-12, -69], [-11, -70], [-10, -71], [-8, -72], [-7, -71], [-7, -71], [2, -69], [2, -69], [2, -69], [3, -54], [4, -55], [6, -56], [8, -57], [9, -56], [9, -56], [15, -41], [15, -41], [15, -41], [3, -54], [4, -55], [6, -56], [8, -57], [9, -56], [9, -56], [15, -41], [15, -41], [15, -41], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [-4, -53], [-6, -46], [-15, -27], [-5, -59], [-34, -37], [-11, -48], [-4, -53], [-6, -46], [-15, -27], [-5, -59], [-34, -37], [-11, -48], [13, -69], [13, -67], [1, -45], [16, -74], [-8, -71], [15, -67], [13, -69], [13, -67], [1, -45], [16, -74], [-8, -71], [15, -67], [-12, -69], [-12, -67], [0, -45], [-15, -74], [9, -71], [-14, -67], [-12, -69], [-12, -67], [0, -45], [-15, -74], [9, -71], [-14, -67], [5, -53], [7, -46], [16, -27], [6, -59], [35, -37], [12, -48], [5, -53], [7, -46], [16, -27], [6, -59], [35, -37], [12, -48]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 54, 96, 110, 111, 112, 113, 54, 96, 110, 111, 112, 113, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 54, 96, 110, 111, 112, 113, 54, 96, 110, 111, 112, 113]
};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 49, 88, 117, 151, 196, 237, 276, 311, 350, 391, 429, 464, 503, 536, 574, 620, 662, 695, 734, 776, 815, 844, 886, 937, 981, 1008, 1050, 1100, 1142, 1174, 1209, 1245, 1281, 1313, 1352, 1399, 1444, 1483, 1522, 1557, 1596, 1635, 1674, 1709, 1748, 1782, 1825, 1867, 1905, 1940, 1974, 2013, 2052, 2093, 2130, 2165, 2200, 2236, 2273, 2311, 2347, 2383, 2418, 2453, 2489, 2526, 2563, 2621, 2669, 2710, 2751, 2790, 2844, 2896, 2942, 2986, 3024, 3065, 3124, 3188, 3225, 3259, 3291, 3357, 3421, 3481, 3520, 3559, 3600, 3652, 3704, 3750, 3785, 3821, 3859, 3900, 3941, 3992, 4042, 4086, 4133, 4181, 4227, 4269, 4323, 4375, 4429, 4486, 4521, 4557, 4593, 4644, 4687, 4732, 4769, 4808, 4847],
  widths: [49, 39, 29, 34, 45, 41, 39, 35, 39, 41, 38, 35, 39, 33, 38, 46, 42, 33, 39, 42, 39, 29, 42, 51, 44, 27, 42, 50, 42, 32, 35, 36, 36, 32, 39, 47, 45, 39, 39, 35, 39, 39, 39, 35, 39, 34, 43, 42, 38, 35, 34, 39, 39, 41, 37, 35, 35, 36, 37, 38, 36, 36, 35, 35, 36, 37, 37, 58, 48, 41, 41, 39, 54, 52, 46, 44, 38, 41, 59, 64, 37, 34, 32, 66, 64, 60, 39, 39, 41, 52, 52, 46, 35, 36, 38, 41, 41, 51, 50, 44, 47, 48, 46, 42, 54, 52, 54, 57, 35, 36, 36, 51, 43, 45, 37, 39, 39, 40],
  heights: [80, 77, 76, 70, 71, 78, 81, 84, 82, 78, 81, 84, 82, 79, 76, 74, 76, 75, 76, 78, 82, 76, 75, 73, 72, 73, 72, 71, 74, 73, 75, 74, 74, 68, 69, 71, 70, 68, 70, 68, 68, 68, 70, 68, 68, 56, 56, 51, 54, 52, 61, 55, 58, 52, 78, 80, 81, 82, 81, 80, 74, 76, 77, 78, 77, 76, 73, 75, 84, 73, 72, 72, 73, 78, 66, 66, 60, 59, 49, 49, 75, 77, 76, 69, 70, 71, 70, 70, 70, 68, 66, 66, 70, 69, 68, 67, 71, 81, 81, 70, 69, 68, 67, 71, 83, 83, 68, 56, 76, 75, 75, 69, 70, 61, 74, 73, 73, 71],
  bodyOffsets: [[0, -36], [0, -36], [0, -36], [-1, -34], [-1, -34], [-1, -34], [-1, -36], [-1, -36], [-1, -36], [-2, -31], [-2, -31], [-2, -31], [0, -31], [0, -31], [0, -31], [1, -31], [1, -31], [1, -31], [1, -36], [1, -36], [1, -36], [1, -34], [1, -34], [1, -34], [-2, -35], [-2, -32], [-2, -29], [-2, -31], [-1, -35], [-1, -32], [-1, -29], [-1, -31], [0, -31], [-4, -31], [-4, -30], [-2, -30], [0, -32], [-1, -31], [-1, -28], [-1, -27], [-1, -34], [-1, -32], [-2, -31], [-2, -33], [0, -34], [-3, -34], [-3, -32], [-3, -32], [-2, -31], [-2, -29], [-2, -27], [-3, -28], [-2, -33], [-4, -31], [-3, -28], [-2, -30], [0, -30], [0, -27], [1, -26], [0, -27], [0, -30], [0, -27], [-1, -26], [-1, -27], [2, -31], [3, -29], [2, -27], [3, -28], [2, -33], [5, -31], [4, -28], [3, -30], [2, -34], [1, -32], [3, -31], [2, -33], [1, -34], [3, -34], [3, -32], [3, -32], [1, -31], [4, -31], [4, -30], [2, -30], [1, -32], [2, -31], [1, -28], [2, -27], [-2, -19], [-2, -19], [-2, -19], [0, -18], [0, -18], [0, -18], [-3, -21], [-3, -21], [-3, -21], [-3, -16], [-3, -16], [-3, -16], [0, -16], [0, -16], [0, -16], [2, -16], [2, -16], [2, -16], [2, -21], [2, -21], [2, -21], [1, -18], [1, -18], [1, -18], [-4, -25], [-6, -22], [-4, -25], [-4, -25], [-6, -22], [-4, -25], [-3, -24], [-4, -21], [-3, -24], [-3, -24], [-4, -21], [-3, -24], [4, -24], [5, -21], [4, -24], [4, -24], [5, -21], [4, -24], [4, -25], [7, -22], [4, -25], [4, -25], [7, -22], [4, -25], [-1, -34], [-2, -35], [-2, -35], [-2, -36], [-1, -35], [-1, -35], [-1, -34], [-2, -35], [-2, -35], [-2, -36], [-1, -35], [-1, -35], [-3, -33], [-3, -34], [-3, -34], [-3, -35], [-3, -34], [-3, -34], [-3, -33], [-3, -34], [-3, -34], [-3, -35], [-3, -34], [-3, -34], [3, -33], [3, -34], [4, -34], [4, -35], [3, -34], [4, -34], [3, -33], [3, -34], [4, -34], [4, -35], [3, -34], [4, -34], [2, -34], [3, -35], [3, -35], [2, -36], [2, -35], [1, -35], [2, -34], [3, -35], [3, -35], [2, -36], [2, -35], [1, -35], [-1, -28], [4, -29], [4, -34], [-4, -28], [-5, -27], [-1, -28], [4, -29], [4, -34], [-4, -28], [-5, -27], [-3, -31], [0, -32], [-3, -36], [0, -24], [-2, -25], [-3, -31], [0, -32], [-3, -36], [0, -24], [-2, -25], [4, -31], [0, -32], [3, -36], [0, -24], [2, -25], [4, -31], [0, -32], [3, -36], [0, -24], [2, -25], [2, -28], [-4, -29], [-4, -34], [5, -28], [6, -27], [2, -28], [-4, -29], [-4, -34], [5, -28], [6, -27], [1, -22], [3, -22], [1, -22], [1, -22], [3, -22], [1, -22], [-1, -25], [2, -23], [-1, -25], [-1, -25], [2, -23], [-1, -25], [2, -25], [-1, -23], [2, -25], [2, -25], [-1, -23], [2, -25], [-1, -22], [-3, -22], [-1, -22], [-1, -22], [-3, -22], [-1, -22], [6, -21], [6, -21], [7, -20], [7, -20], [-6, -20], [-6, -20], [-6, -21], [-6, -21], [4, -9], [4, -9], [5, -6], [5, -6], [-5, -6], [-5, -6], [-3, -9], [-3, -9], [0, -36], [0, -36], [0, -36], [0, -36], [0, -36], [0, -36], [0, -36], [0, -36], [-4, -32], [-3, -33], [-4, -33], [-21, -18], [-21, -19], [-22, -19], [-22, -19], [-22, -19], [-22, -19], [-4, -32], [-3, -33], [-4, -33], [-21, -18], [-21, -19], [-22, -19], [-22, -19], [-22, -19], [-22, -19], [-2, -34], [-2, -35], [-3, -35], [-9, -28], [-10, -29], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [-2, -34], [-2, -35], [-3, -35], [-9, -28], [-10, -29], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [3, -34], [3, -35], [4, -35], [9, -28], [10, -29], [9, -28], [9, -28], [9, -28], [9, -28], [3, -34], [3, -35], [4, -35], [9, -28], [10, -29], [9, -28], [9, -28], [9, -28], [9, -28], [5, -32], [3, -33], [4, -33], [21, -18], [21, -19], [22, -19], [22, -19], [22, -19], [22, -19], [5, -32], [3, -33], [4, -33], [21, -18], [21, -19], [22, -19], [22, -19], [22, -19], [22, -19], [-1, -27], [-1, -26], [0, -26], [0, -25], [0, -25], [8, -27], [2, -34], [0, -34], [-1, -27], [-1, -26], [0, -26], [0, -25], [0, -25], [8, -27], [2, -34], [0, -34], [-1, -26], [-1, -25], [-2, -25], [0, -24], [0, -24], [-3, -26], [0, -35], [1, -35], [-1, -26], [-1, -25], [-2, -25], [0, -24], [0, -24], [-3, -26], [0, -35], [1, -35], [1, -26], [2, -25], [2, -25], [0, -24], [0, -24], [3, -26], [0, -35], [-1, -35], [1, -26], [2, -25], [2, -25], [0, -24], [0, -24], [3, -26], [0, -35], [-1, -35], [2, -27], [1, -26], [0, -26], [1, -25], [1, -25], [-7, -27], [-1, -34], [0, -34], [2, -27], [1, -26], [0, -26], [1, -25], [1, -25], [-7, -27], [-1, -34], [0, -34], [-7, -29], [-1, -24], [-2, -32], [-2, -31], [-2, -31], [-8, -23], [-7, -29], [-1, -24], [-2, -32], [-2, -31], [-2, -31], [-8, -23], [-4, -27], [-5, -18], [-1, -32], [0, -31], [0, -31], [4, -27], [-4, -27], [-5, -18], [-1, -32], [0, -31], [0, -31], [4, -27], [5, -27], [6, -18], [2, -32], [1, -31], [1, -31], [-4, -27], [5, -27], [6, -18], [2, -32], [1, -31], [1, -31], [-4, -27], [7, -29], [2, -24], [3, -32], [2, -31], [2, -31], [9, -23], [7, -29], [2, -24], [3, -32], [2, -31], [2, -31], [9, -23]],
  anchorHead: [[-1, -61], [-6, -62], [3, -62], [-6, -62], [-5, -62], [-1, -61], [-5, -62], [11, -78], [-6, -62], [11, -78], [11, -77], [-5, -62], [11, -77], [-11, -78], [11, -78], [-11, -78], [5, -62], [11, -77], [5, -62], [6, -62], [-11, -78], [6, -62], [1, -61], [5, -62], [-1, -59], [-1, -58], [-1, -56], [-1, -57], [-1, -59], [-1, -58], [-1, -56], [-1, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-5, -60], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [11, -76], [11, -75], [11, -73], [11, -74], [11, -76], [11, -75], [11, -73], [11, -74], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [-10, -76], [-10, -75], [-10, -73], [-10, -74], [-10, -76], [-10, -75], [-10, -73], [-10, -74], [6, -60], [6, -58], [6, -56], [6, -57], [6, -59], [6, -58], [6, -56], [6, -57], [7, -59], [7, -58], [7, -56], [7, -57], [7, -59], [7, -58], [7, -56], [7, -57], [-1, -34], [-7, -35], [4, -35], [-6, -35], [-5, -35], [-1, -34], [-5, -35], [11, -51], [-6, -35], [11, -51], [11, -50], [-5, -35], [11, -50], [-11, -51], [11, -51], [-11, -51], [5, -35], [11, -50], [5, -35], [6, -35], [-11, -51], [7, -35], [1, -34], [6, -35], [-12, -71], [-20, -46], [-12, -71], [-12, -71], [-20, -46], [-12, -71], [-13, -68], [-11, -47], [-13, -68], [-13, -68], [-11, -47], [-13, -68], [14, -68], [12, -47], [14, -68], [14, -68], [12, -47], [14, -68], [13, -71], [21, -46], [13, -71], [13, -71], [21, -46], [13, -71], [-7, -62], [-7, -64], [-7, -65], [-7, -66], [-7, -65], [-7, -64], [-7, -62], [-7, -64], [-7, -65], [-7, -66], [-7, -65], [-7, -64], [10, -78], [10, -80], [10, -81], [10, -82], [10, -81], [10, -80], [10, -78], [10, -80], [10, -81], [10, -82], [10, -81], [10, -80], [-9, -78], [-9, -80], [-9, -81], [-9, -82], [-9, -81], [-9, -80], [-9, -78], [-9, -80], [-9, -81], [-9, -82], [-9, -81], [-9, -80], [8, -62], [8, -64], [8, -65], [8, -66], [8, -65], [8, -64], [8, -62], [8, -64], [8, -65], [8, -66], [8, -65], [8, -64], [-4, -60], [-3, -62], [-5, -64], [-8, -54], [-11, -51], [-4, -60], [-3, -62], [-5, -64], [-8, -54], [-11, -51], [14, -75], [14, -78], [11, -81], [16, -64], [12, -66], [14, -75], [14, -78], [11, -81], [16, -64], [12, -66], [-13, -75], [-13, -78], [-10, -81], [-15, -64], [-11, -66], [-13, -75], [-13, -78], [-10, -81], [-15, -64], [-11, -66], [5, -60], [4, -62], [6, -64], [9, -54], [12, -51], [5, -60], [4, -62], [6, -64], [9, -54], [12, -51], [15, -60], [19, -60], [15, -60], [15, -60], [19, -60], [15, -60], [4, -72], [12, -70], [4, -72], [4, -72], [12, -70], [4, -72], [-3, -72], [-11, -70], [-3, -72], [-3, -72], [-11, -70], [-3, -72], [-14, -60], [-18, -60], [-14, -60], [-14, -60], [-18, -60], [-14, -60], [27, -57], [27, -57], [22, -67], [22, -67], [-21, -67], [-21, -67], [-26, -57], [-26, -57], [40, -28], [40, -28], [46, 16], [46, 16], [-45, 16], [-45, 16], [-39, -28], [-39, -28], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-5, -66], [-5, -68], [-7, -67], [-30, -37], [-32, -39], [-32, -40], [-32, -40], [-32, -40], [-32, -40], [-5, -66], [-5, -68], [-7, -67], [-30, -37], [-32, -39], [-32, -40], [-32, -40], [-32, -40], [-32, -40], [12, -82], [13, -83], [8, -82], [-2, -75], [-4, -75], [-2, -73], [-2, -73], [-2, -73], [-2, -73], [12, -82], [13, -83], [8, -82], [-2, -75], [-4, -75], [-2, -73], [-2, -73], [-2, -73], [-2, -73], [-11, -82], [-12, -83], [-7, -82], [3, -75], [5, -75], [3, -73], [3, -73], [3, -73], [3, -73], [-11, -82], [-12, -83], [-7, -82], [3, -75], [5, -75], [3, -73], [3, -73], [3, -73], [3, -73], [6, -66], [6, -68], [8, -67], [31, -37], [33, -39], [33, -40], [33, -40], [33, -40], [33, -40], [6, -66], [6, -68], [8, -67], [31, -37], [33, -39], [33, -40], [33, -40], [33, -40], [33, -40], [-4, -52], [-2, -51], [0, -50], [1, -49], [1, -49], [5, -55], [-14, -54], [-16, -53], [-4, -52], [-2, -51], [0, -50], [1, -49], [1, -49], [5, -55], [-14, -54], [-16, -53], [11, -68], [10, -67], [9, -66], [10, -65], [10, -65], [4, -71], [3, -78], [2, -79], [11, -68], [10, -67], [9, -66], [10, -65], [10, -65], [4, -71], [3, -78], [2, -79], [-10, -68], [-9, -67], [-8, -66], [-9, -65], [-9, -65], [-3, -71], [-2, -78], [-1, -79], [-10, -68], [-9, -67], [-8, -66], [-9, -65], [-9, -65], [-3, -71], [-2, -78], [-1, -79], [5, -52], [3, -51], [1, -50], [0, -49], [0, -49], [-4, -55], [15, -54], [17, -53], [5, -52], [3, -51], [1, -50], [0, -49], [0, -49], [-4, -55], [15, -54], [17, -53], [-10, -54], [-13, -29], [-6, -60], [-5, -59], [-5, -59], [-11, -48], [-10, -54], [-13, -29], [-6, -60], [-5, -59], [-5, -59], [-11, -48], [9, -69], [-6, -46], [11, -78], [12, -77], [12, -77], [17, -71], [9, -69], [-6, -46], [11, -78], [12, -77], [12, -77], [17, -71], [-8, -69], [7, -46], [-10, -78], [-11, -77], [-11, -77], [-16, -71], [-8, -69], [7, -46], [-10, -78], [-11, -77], [-11, -77], [-16, -71], [11, -54], [14, -29], [7, -60], [6, -59], [6, -59], [12, -48], [11, -54], [14, -29], [7, -60], [6, -59], [6, -59], [12, -48]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 92, 93, 94, 95, 95, 96, 97, 98, 92, 93, 94, 95, 95, 96, 97, 98, 99, 100, 101, 102, 102, 103, 104, 105, 99, 100, 101, 102, 102, 103, 104, 105, 99, 100, 101, 102, 102, 103, 104, 105, 99, 100, 101, 102, 102, 103, 104, 105, 92, 93, 94, 95, 95, 96, 97, 98, 92, 93, 94, 95, 95, 96, 97, 98, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111]
};

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 68, 101, 136, 172, 209, 244, 278, 313, 350, 385, 419, 454, 487, 532, 576, 613, 646, 686, 727, 762, 788, 832, 874, 906, 934, 979, 1022, 1053, 1085, 1121, 1160, 1196, 1232, 1278, 1322, 1356, 1391, 1425, 1458, 1493, 1528, 1562, 1595, 1631, 1662, 1704, 1747, 1785, 1820, 1855, 1890, 1929, 1970, 2010, 2051, 2095, 2140, 2182, 2221, 2255, 2289, 2324, 2361, 2395, 2429, 2479, 2523, 2569, 2614, 2646, 2682, 2728, 2774, 2811, 2845, 2885, 2923, 2965, 3008, 3057, 3117, 3160, 3203, 3248, 3289, 3325, 3356, 3387, 3418, 3473, 3528, 3582, 3637, 3689, 3731, 3775, 3820, 3875],
  widths: [37, 31, 33, 35, 36, 37, 35, 34, 35, 37, 35, 34, 35, 33, 45, 44, 37, 33, 40, 41, 35, 26, 44, 42, 32, 28, 45, 43, 31, 32, 36, 39, 36, 36, 46, 44, 34, 35, 34, 33, 35, 35, 34, 33, 36, 31, 42, 43, 38, 35, 35, 35, 39, 41, 40, 41, 44, 45, 42, 39, 34, 34, 35, 37, 34, 34, 50, 44, 46, 45, 32, 36, 46, 46, 37, 34, 40, 38, 42, 43, 49, 60, 43, 43, 45, 41, 36, 31, 31, 31, 55, 55, 54, 55, 52, 42, 44, 45, 55, 53],
  heights: [70, 70, 66, 62, 67, 67, 65, 67, 71, 66, 65, 67, 71, 70, 68, 65, 65, 65, 65, 68, 70, 67, 66, 64, 63, 63, 61, 62, 65, 70, 67, 66, 60, 63, 62, 61, 66, 70, 70, 62, 65, 69, 69, 61, 65, 47, 46, 42, 47, 47, 63, 59, 60, 56, 64, 65, 67, 68, 67, 65, 64, 65, 67, 68, 67, 65, 75, 77, 54, 53, 78, 78, 60, 59, 59, 58, 56, 55, 56, 52, 49, 41, 71, 57, 55, 56, 74, 60, 60, 60, 60, 59, 60, 59, 58, 65, 66, 67, 66, 63],
  bodyOffsets: [[1, -25], [1, -25], [1, -25], [2, -26], [2, -26], [2, -26], [0, -27], [0, -27], [0, -27], [-1, -29], [-1, -29], [-1, -29], [1, -27], [1, -27], [1, -27], [3, -29], [3, -29], [3, -29], [1, -27], [1, -27], [1, -27], [-1, -26], [-1, -26], [-1, -26], [1, -26], [1, -26], [0, -23], [0, -22], [1, -27], [1, -26], [1, -23], [2, -22], [2, -26], [-1, -26], [1, -25], [3, -26], [3, -28], [2, -27], [3, -24], [3, -24], [2, -26], [-4, -26], [0, -25], [2, -27], [2, -28], [-5, -28], [-1, -26], [1, -25], [-1, -25], [-1, -25], [1, -24], [0, -28], [-4, -28], [-3, -28], [-2, -26], [-2, -25], [3, -26], [2, -25], [4, -27], [3, -26], [0, -26], [0, -25], [0, -27], [-1, -26], [1, -25], [1, -25], [0, -24], [0, -28], [4, -28], [3, -28], [2, -26], [2, -25], [-2, -26], [4, -26], [0, -25], [-2, -27], [-2, -28], [6, -28], [2, -26], [0, -25], [-1, -26], [2, -26], [-1, -25], [-2, -26], [-2, -28], [-2, -27], [-2, -24], [-2, -24], [1, -15], [1, -15], [1, -15], [2, -17], [2, -17], [2, -17], [-1, -18], [-1, -18], [-1, -18], [-2, -15], [-2, -15], [-2, -15], [1, -16], [1, -16], [1, -16], [2, -15], [2, -15], [2, -15], [2, -18], [2, -18], [2, -18], [-2, -17], [-2, -17], [-2, -17], [4, -22], [4, -20], [4, -22], [4, -22], [4, -20], [4, -22], [-5, -25], [-5, -23], [-5, -25], [-5, -25], [-5, -23], [-5, -25], [6, -25], [6, -23], [6, -25], [6, -25], [6, -23], [6, -25], [-3, -22], [-3, -20], [-3, -22], [-3, -22], [-3, -20], [-3, -22], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [1, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [1, -27], [1, -28], [2, -29], [0, -28], [0, -27], [6, -36], [6, -38], [6, -38], [-2, -21], [-1, -20], [6, -36], [6, -38], [6, -38], [-2, -21], [-1, -20], [4, -34], [6, -34], [6, -34], [-2, -25], [-2, -24], [4, -34], [6, -34], [6, -34], [-2, -25], [-2, -24], [-4, -34], [-6, -34], [-6, -34], [2, -25], [2, -24], [-4, -34], [-6, -34], [-6, -34], [2, -25], [2, -24], [-6, -36], [-6, -38], [-6, -38], [2, -21], [2, -20], [-6, -36], [-6, -38], [-6, -38], [2, -21], [2, -20], [-2, -23], [2, -26], [-2, -23], [-2, -23], [2, -26], [-2, -23], [0, -27], [2, -24], [0, -27], [0, -27], [2, -24], [0, -27], [0, -27], [-2, -24], [0, -27], [0, -27], [-2, -24], [0, -27], [3, -23], [-2, -26], [3, -23], [3, -23], [-2, -26], [3, -23], [5, -26], [5, -26], [9, -24], [9, -24], [-8, -24], [-8, -24], [-5, -26], [-5, -26], [6, -8], [6, -8], [17, -2], [17, -2], [-17, -2], [-17, -2], [-5, -8], [-5, -8], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [2, -32], [-2, -25], [-3, -24], [-1, -25], [-1, -25], [-1, -25], [2, -32], [2, -32], [2, -32], [2, -32], [-2, -25], [-3, -24], [-1, -25], [-1, -25], [-1, -25], [2, -32], [2, -32], [2, -32], [2, -32], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [2, -32], [2, -32], [2, -32], [2, -32], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-2, -32], [-2, -32], [-2, -32], [-2, -32], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [-2, -32], [-2, -32], [-2, -32], [-2, -32], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [-1, -32], [-1, -32], [-1, -32], [-1, -32], [3, -25], [4, -24], [2, -25], [2, -25], [2, -25], [-1, -32], [-1, -32], [-1, -32], [-1, -32], [3, -25], [4, -24], [2, -25], [2, -25], [2, -25], [-2, -29], [-2, -29], [-8, -29], [-8, -29], [-9, -17], [-8, -17], [-8, -17], [-8, -17], [-2, -29], [-2, -29], [-8, -29], [-8, -29], [-9, -17], [-8, -17], [-8, -17], [-8, -17], [-5, -27], [-5, -27], [-8, -28], [-7, -28], [-14, -28], [-13, -26], [-13, -26], [-13, -26], [-5, -27], [-5, -27], [-8, -28], [-7, -28], [-14, -28], [-13, -26], [-13, -26], [-13, -26], [5, -27], [5, -27], [8, -28], [8, -28], [15, -28], [14, -26], [14, -26], [14, -26], [5, -27], [5, -27], [8, -28], [8, -28], [15, -28], [14, -26], [14, -26], [14, -26], [3, -29], [3, -29], [9, -29], [8, -29], [10, -17], [8, -17], [8, -17], [8, -17], [3, -29], [3, -29], [9, -29], [8, -29], [10, -17], [8, -17], [8, -17], [8, -17], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [1, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [1, -27], [1, -28], [2, -29], [0, -28], [0, -27]],
  anchorHead: [[1, -56], [-3, -57], [4, -57], [-2, -58], [-3, -58], [1, -57], [-3, -59], [13, -74], [-3, -58], [12, -74], [12, -73], [-4, -58], [12, -74], [-11, -74], [12, -74], [-10, -74], [5, -58], [11, -74], [4, -59], [4, -58], [-12, -74], [4, -58], [1, -57], [4, -57], [1, -56], [1, -55], [1, -53], [1, -54], [1, -56], [1, -55], [1, -53], [1, -54], [-2, -58], [-2, -57], [-2, -55], [-2, -56], [-2, -58], [-2, -57], [-2, -55], [-2, -56], [-3, -59], [-3, -58], [-3, -56], [-3, -58], [-3, -59], [-3, -58], [-3, -56], [-3, -57], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [4, -59], [4, -58], [4, -56], [4, -58], [4, -59], [4, -58], [4, -56], [4, -57], [3, -58], [3, -57], [3, -55], [3, -56], [3, -58], [3, -57], [3, -55], [3, -56], [1, -35], [-3, -36], [5, -36], [-3, -37], [-4, -37], [1, -35], [-4, -38], [12, -54], [-3, -37], [12, -53], [11, -52], [-5, -37], [12, -52], [-11, -53], [12, -53], [-11, -53], [6, -37], [12, -52], [5, -38], [4, -37], [-11, -54], [4, -37], [0, -35], [5, -37], [-6, -63], [-4, -44], [-6, -61], [-6, -63], [-4, -44], [-6, -61], [-16, -65], [-15, -44], [-16, -63], [-16, -65], [-15, -44], [-16, -63], [17, -65], [16, -44], [17, -63], [17, -65], [16, -44], [17, -63], [7, -63], [5, -44], [7, -61], [7, -63], [5, -44], [7, -61], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [0, -58], [2, -59], [3, -59], [-14, -46], [-15, -44], [0, -58], [2, -59], [3, -59], [-14, -46], [-15, -44], [13, -71], [17, -72], [18, -72], [3, -64], [2, -62], [13, -71], [17, -72], [18, -72], [3, -64], [2, -62], [-12, -71], [-16, -72], [-17, -72], [-2, -64], [-1, -62], [-12, -71], [-16, -72], [-17, -72], [-2, -64], [-1, -62], [1, -58], [-1, -59], [-2, -59], [15, -46], [16, -44], [1, -58], [-1, -59], [-2, -59], [15, -46], [16, -44], [10, -64], [14, -65], [10, -64], [10, -64], [14, -65], [10, -64], [2, -71], [5, -67], [2, -71], [2, -71], [5, -67], [2, -71], [-1, -71], [-4, -67], [-1, -71], [-1, -71], [-4, -67], [-1, -71], [-9, -64], [-13, -65], [-9, -64], [-9, -64], [-13, -65], [-9, -64], [29, -64], [29, -64], [20, -64], [20, -64], [-19, -64], [-19, -64], [-28, -64], [-28, -64], [26, -26], [26, -26], [43, 8], [43, 8], [-42, 8], [-42, 8], [-25, -26], [-25, -26], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [-1, -56], [0, -56], [1, -56], [1, -56], [-11, -52], [-14, -49], [-12, -50], [-11, -50], [-10, -51], [-1, -56], [0, -56], [1, -56], [1, -56], [-11, -52], [-14, -49], [-12, -50], [-11, -50], [-10, -51], [16, -71], [17, -71], [18, -71], [18, -71], [10, -68], [7, -68], [9, -68], [10, -68], [10, -68], [16, -71], [17, -71], [18, -71], [18, -71], [10, -68], [7, -68], [9, -68], [10, -68], [10, -68], [-15, -71], [-16, -71], [-17, -71], [-17, -71], [-9, -68], [-6, -68], [-8, -68], [-9, -68], [-9, -68], [-15, -71], [-16, -71], [-17, -71], [-17, -71], [-9, -68], [-6, -68], [-8, -68], [-9, -68], [-9, -68], [2, -56], [1, -56], [0, -56], [0, -56], [12, -52], [15, -49], [13, -50], [12, -50], [11, -51], [2, -56], [1, -56], [0, -56], [0, -56], [12, -52], [15, -49], [13, -50], [12, -50], [11, -51], [-2, -54], [-1, -54], [-8, -55], [-10, -54], [-24, -44], [-25, -42], [-25, -41], [-25, -41], [-2, -54], [-1, -54], [-8, -55], [-10, -54], [-24, -44], [-25, -42], [-25, -41], [-25, -41], [11, -69], [12, -69], [5, -69], [3, -70], [0, -70], [-1, -68], [-1, -68], [-1, -68], [11, -69], [12, -69], [5, -69], [3, -70], [0, -70], [-1, -68], [-1, -68], [-1, -68], [-10, -69], [-11, -69], [-4, -69], [-2, -70], [1, -70], [2, -68], [2, -68], [2, -68], [-10, -69], [-11, -69], [-4, -69], [-2, -70], [1, -70], [2, -68], [2, -68], [2, -68], [3, -54], [2, -54], [9, -55], [11, -54], [25, -44], [26, -42], [26, -41], [26, -41], [3, -54], [2, -54], [9, -55], [11, -54], [25, -44], [26, -42], [26, -41], [26, -41], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [13, -72], [13, -73], [13, -75], [13, -76], [13, -75], [13, -73], [13, -72], [13, -73], [13, -75], [13, -76], [13, -75], [13, -73], [-12, -72], [-12, -73], [-12, -75], [-12, -76], [-12, -75], [-12, -73], [-12, -72], [-12, -73], [-12, -75], [-12, -76], [-12, -75], [-12, -73], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 84, 85, 85, 85, 82, 82, 82, 82, 83, 84, 85, 85, 85, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 82, 82, 82, 82, 83, 84, 85, 85, 85, 82, 82, 82, 82, 83, 84, 85, 85, 85, 90, 90, 91, 92, 93, 94, 94, 94, 90, 90, 91, 92, 93, 94, 94, 94, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 90, 90, 91, 92, 93, 94, 94, 94, 90, 90, 91, 92, 93, 94, 94, 94, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59]
};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 40, 80, 115, 156, 196, 238, 281, 326, 368, 410, 451, 492, 533, 571, 617, 668, 714, 752, 796, 842, 886, 920, 962, 1012, 1056, 1086, 1130, 1180, 1224, 1261, 1303, 1346, 1389, 1426, 1467, 1514, 1558, 1598, 1637, 1675, 1714, 1754, 1793, 1828, 1867, 1908, 1950, 1992, 2031, 2071, 2112, 2155, 2199, 2242, 2286, 2327, 2367, 2408, 2450, 2494, 2531, 2568, 2605, 2642, 2679, 2716, 2757, 2815, 2864, 2908, 2951, 2995, 3049, 3101, 3146, 3188, 3233, 3280, 3323, 3371, 3434, 3500, 3541, 3587, 3635, 3682, 3728, 3769, 3808, 3855, 3899, 3936, 3975, 4015, 4053, 4091, 4131, 4169, 4210, 4245, 4286, 4324, 4362, 4400, 4442, 4489, 4544, 4597, 4634, 4678, 4724, 4770, 4818, 4866, 4912, 4959, 5017, 5072, 5108, 5146, 5183, 5235, 5284, 5341, 5381, 5425, 5465],
  widths: [40, 40, 35, 41, 40, 42, 43, 45, 42, 42, 41, 41, 41, 38, 46, 51, 46, 38, 44, 46, 44, 34, 42, 50, 44, 30, 44, 50, 44, 37, 42, 43, 43, 37, 41, 47, 44, 40, 39, 38, 39, 40, 39, 35, 39, 41, 42, 42, 39, 40, 41, 43, 44, 43, 44, 41, 40, 41, 42, 44, 37, 37, 37, 37, 37, 37, 41, 58, 49, 44, 43, 44, 54, 52, 45, 42, 45, 47, 43, 48, 63, 66, 41, 46, 48, 47, 46, 41, 39, 47, 44, 37, 39, 40, 38, 38, 40, 38, 41, 35, 41, 38, 38, 38, 42, 47, 55, 53, 37, 44, 46, 46, 48, 48, 46, 47, 58, 55, 36, 38, 37, 52, 49, 57, 40, 44, 40, 61],
  heights: [73, 73, 69, 70, 74, 69, 72, 75, 73, 69, 74, 75, 74, 74, 71, 68, 73, 70, 70, 72, 76, 70, 69, 68, 67, 66, 65, 65, 68, 74, 75, 72, 71, 69, 71, 70, 71, 72, 75, 72, 71, 73, 75, 72, 71, 50, 51, 43, 52, 51, 61, 60, 61, 55, 71, 73, 75, 76, 75, 73, 70, 72, 74, 75, 74, 72, 75, 78, 85, 70, 67, 73, 76, 83, 65, 67, 63, 62, 61, 56, 53, 55, 72, 71, 71, 73, 73, 73, 78, 73, 73, 70, 69, 69, 72, 76, 76, 78, 69, 67, 71, 69, 68, 67, 66, 69, 82, 82, 70, 69, 67, 65, 64, 71, 84, 84, 68, 62, 70, 67, 70, 66, 67, 71, 74, 72, 74, 72],
  bodyOffsets: [[0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [-1, -29], [-1, -29], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [0, -28], [0, -28], [0, -28], [2, -30], [2, -30], [2, -30], [2, -29], [2, -29], [2, -29], [0, -29], [0, -29], [0, -29], [-1, -29], [0, -27], [2, -23], [-1, -25], [-1, -29], [-1, -26], [-1, -23], [-1, -25], [2, -29], [0, -29], [-1, -28], [0, -27], [2, -31], [1, -29], [1, -26], [1, -25], [0, -29], [0, -28], [-2, -27], [-1, -28], [2, -31], [-1, -30], [-2, -28], [-1, -28], [1, -30], [2, -26], [3, -26], [2, -27], [1, -32], [-2, -29], [-2, -28], [-2, -28], [0, -31], [1, -29], [2, -30], [1, -30], [0, -32], [0, -29], [-1, -29], [0, -30], [0, -30], [-2, -26], [-2, -26], [-1, -27], [0, -32], [3, -29], [3, -28], [2, -28], [0, -29], [0, -28], [2, -27], [1, -28], [-2, -31], [1, -30], [2, -28], [1, -28], [-2, -29], [0, -29], [2, -28], [0, -27], [-2, -31], [-1, -29], [-1, -26], [-1, -25], [0, -13], [0, -13], [0, -13], [-1, -13], [-1, -13], [-1, -13], [-3, -15], [-3, -15], [-3, -15], [-1, -13], [-1, -13], [-1, -13], [0, -13], [0, -13], [0, -13], [2, -13], [2, -13], [2, -13], [3, -15], [3, -15], [3, -15], [1, -13], [1, -13], [1, -13], [-1, -23], [-3, -23], [-1, -23], [-1, -23], [-3, -23], [-1, -23], [-4, -24], [-4, -21], [-4, -24], [-4, -24], [-4, -21], [-4, -24], [4, -24], [5, -21], [4, -24], [4, -24], [5, -21], [4, -24], [2, -23], [4, -23], [2, -23], [2, -23], [4, -23], [2, -23], [-2, -30], [-2, -31], [-2, -32], [-2, -33], [-3, -32], [-3, -31], [-2, -30], [-2, -31], [-2, -32], [-2, -33], [-3, -32], [-3, -31], [-3, -31], [-3, -32], [-3, -33], [-3, -33], [-3, -33], [-3, -32], [-3, -31], [-3, -32], [-3, -33], [-3, -33], [-3, -33], [-3, -32], [4, -31], [4, -32], [4, -33], [4, -33], [4, -33], [4, -32], [4, -31], [4, -32], [4, -33], [4, -33], [4, -33], [4, -32], [2, -30], [3, -31], [2, -32], [3, -33], [3, -32], [3, -31], [2, -30], [3, -31], [2, -32], [3, -33], [3, -32], [3, -31], [0, -30], [4, -32], [4, -35], [1, -33], [2, -31], [0, -30], [4, -32], [4, -35], [1, -33], [2, -31], [0, -30], [1, -33], [-2, -38], [4, -34], [6, -32], [0, -30], [1, -33], [-2, -38], [4, -34], [6, -32], [0, -30], [-1, -33], [2, -38], [-3, -34], [-6, -32], [0, -30], [-1, -33], [2, -38], [-3, -34], [-6, -32], [1, -30], [-4, -32], [-3, -35], [-1, -33], [-1, -31], [1, -30], [-4, -32], [-3, -35], [-1, -33], [-1, -31], [4, -27], [5, -28], [4, -27], [4, -27], [5, -28], [4, -27], [2, -24], [6, -20], [2, -24], [2, -24], [6, -20], [2, -24], [-1, -24], [-6, -20], [-1, -24], [-1, -24], [-6, -20], [-1, -24], [-3, -27], [-4, -28], [-3, -27], [-3, -27], [-4, -28], [-3, -27], [7, -28], [7, -28], [7, -19], [7, -19], [-7, -19], [-7, -19], [-6, -28], [-6, -28], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [1, -29], [3, -27], [4, -26], [2, -29], [-1, -29], [-1, -29], [0, -32], [-4, -26], [-2, -26], [1, -29], [3, -27], [4, -26], [2, -29], [-1, -29], [-1, -29], [0, -32], [-4, -26], [-2, -26], [-2, -30], [-3, -28], [-4, -27], [-3, -30], [-3, -32], [-2, -32], [-3, -33], [-2, -28], [-3, -27], [-2, -30], [-3, -28], [-4, -27], [-3, -30], [-3, -32], [-2, -32], [-3, -33], [-2, -28], [-3, -27], [3, -30], [4, -28], [4, -27], [3, -30], [3, -32], [2, -32], [3, -33], [3, -28], [4, -27], [3, -30], [4, -28], [4, -27], [3, -30], [3, -32], [2, -32], [3, -33], [3, -28], [4, -27], [0, -29], [-3, -27], [-4, -26], [-1, -29], [1, -29], [2, -29], [1, -32], [5, -26], [2, -26], [0, -29], [-3, -27], [-4, -26], [-1, -29], [1, -29], [2, -29], [1, -32], [5, -26], [2, -26], [1, -28], [-1, -25], [-1, -25], [0, -24], [-1, -24], [5, -25], [5, -34], [3, -34], [1, -28], [-1, -25], [-1, -25], [0, -24], [-1, -24], [5, -25], [5, -34], [3, -34], [-2, -30], [-2, -28], [-4, -27], [-7, -26], [-4, -26], [-6, -29], [-7, -38], [-7, -38], [-2, -30], [-2, -28], [-4, -27], [-7, -26], [-4, -26], [-6, -29], [-7, -38], [-7, -38], [3, -30], [2, -28], [4, -27], [7, -26], [4, -26], [6, -29], [7, -38], [8, -38], [3, -30], [2, -28], [4, -27], [7, -26], [4, -26], [6, -29], [7, -38], [8, -38], [0, -28], [1, -25], [1, -25], [0, -24], [1, -24], [-4, -25], [-4, -34], [-2, -34], [0, -28], [1, -25], [1, -25], [0, -24], [1, -24], [-4, -25], [-4, -34], [-2, -34], [-1, -27], [-9, -18], [-1, -29], [-1, -27], [-1, -29], [-9, -22], [-1, -27], [-9, -18], [-1, -29], [-1, -27], [-1, -29], [-9, -22], [3, -28], [0, -19], [-2, -28], [0, -27], [-2, -28], [-12, -32], [3, -28], [0, -19], [-2, -28], [0, -27], [-2, -28], [-12, -32], [-2, -28], [1, -19], [2, -28], [0, -27], [2, -28], [13, -32], [-2, -28], [1, -19], [2, -28], [0, -27], [2, -28], [13, -32], [1, -27], [10, -18], [1, -29], [1, -27], [2, -29], [9, -22], [1, -27], [10, -18], [1, -29], [1, -27], [2, -29], [9, -22]],
  anchorHead: [[-1, -61], [-6, -62], [5, -62], [-6, -62], [-5, -62], [-1, -61], [-5, -62], [11, -78], [-6, -62], [11, -78], [11, -77], [-5, -62], [11, -77], [-11, -78], [11, -78], [-10, -78], [6, -62], [12, -77], [6, -62], [7, -62], [-10, -78], [7, -62], [1, -61], [6, -62], [-1, -60], [-1, -59], [-1, -57], [-1, -58], [-1, -60], [-1, -59], [-1, -57], [-1, -58], [-6, -61], [-6, -60], [-6, -58], [-6, -59], [-6, -61], [-6, -60], [-6, -58], [-6, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [11, -77], [11, -76], [11, -74], [11, -75], [11, -77], [11, -76], [11, -74], [11, -75], [11, -76], [11, -75], [11, -73], [11, -74], [11, -76], [11, -75], [11, -73], [11, -74], [-10, -77], [-10, -76], [-10, -74], [-10, -75], [-10, -77], [-10, -76], [-10, -74], [-10, -75], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [7, -61], [7, -60], [7, -58], [7, -59], [7, -61], [7, -60], [7, -58], [7, -59], [-1, -34], [-7, -35], [4, -35], [-6, -35], [-5, -35], [-1, -34], [-5, -35], [11, -51], [-6, -35], [11, -51], [11, -50], [-5, -35], [11, -50], [-11, -51], [11, -51], [-10, -51], [6, -35], [12, -50], [6, -35], [7, -35], [-10, -51], [7, -35], [1, -34], [6, -35], [-13, -63], [-20, -46], [-13, -63], [-13, -63], [-20, -46], [-13, -63], [-15, -68], [-14, -48], [-15, -68], [-15, -68], [-14, -48], [-15, -68], [16, -68], [15, -48], [16, -68], [16, -68], [15, -48], [16, -68], [14, -63], [21, -46], [14, -63], [14, -63], [21, -46], [14, -63], [-7, -62], [-7, -64], [-7, -65], [-7, -66], [-7, -65], [-7, -64], [-7, -62], [-7, -64], [-7, -65], [-7, -66], [-7, -65], [-7, -64], [10, -78], [10, -80], [10, -81], [10, -82], [10, -81], [10, -80], [10, -78], [10, -80], [10, -81], [10, -82], [10, -81], [10, -80], [-9, -78], [-9, -80], [-9, -81], [-9, -82], [-9, -81], [-9, -80], [-9, -78], [-9, -80], [-9, -81], [-9, -82], [-9, -81], [-9, -80], [8, -62], [8, -64], [8, -65], [8, -66], [8, -65], [8, -64], [8, -62], [8, -64], [8, -65], [8, -66], [8, -65], [8, -64], [-5, -63], [-5, -65], [-7, -66], [-5, -62], [-6, -59], [-5, -63], [-5, -65], [-7, -66], [-5, -62], [-6, -59], [14, -79], [13, -82], [13, -86], [22, -81], [23, -80], [14, -79], [13, -82], [13, -86], [22, -81], [23, -80], [-13, -79], [-12, -82], [-12, -86], [-21, -81], [-22, -80], [-13, -79], [-12, -82], [-12, -86], [-21, -81], [-22, -80], [6, -63], [6, -65], [8, -66], [6, -62], [7, -59], [6, -63], [6, -65], [8, -66], [6, -62], [7, -59], [17, -67], [20, -67], [17, -67], [17, -67], [20, -67], [17, -67], [11, -71], [19, -63], [11, -71], [11, -71], [19, -63], [11, -71], [-10, -71], [-18, -63], [-10, -71], [-10, -71], [-18, -63], [-10, -71], [-16, -67], [-19, -67], [-16, -67], [-16, -67], [-19, -67], [-16, -67], [23, -67], [23, -67], [21, -62], [21, -62], [-20, -62], [-20, -62], [-22, -67], [-22, -67], [34, -17], [34, -17], [43, 22], [43, 22], [-42, 22], [-42, 22], [-33, -17], [-33, -17], [-6, -62], [-6, -62], [-6, -62], [-6, -62], [-6, -62], [-6, -62], [-6, -62], [-6, -62], [-6, -61], [-4, -59], [-3, -58], [-7, -59], [-9, -59], [-8, -59], [-6, -59], [-6, -58], [-3, -57], [-6, -61], [-4, -59], [-3, -58], [-7, -59], [-9, -59], [-8, -59], [-6, -59], [-6, -58], [-3, -57], [11, -77], [9, -75], [8, -74], [10, -77], [9, -77], [10, -77], [10, -77], [9, -76], [9, -75], [11, -77], [9, -75], [8, -74], [10, -77], [9, -77], [10, -77], [10, -77], [9, -76], [9, -75], [-10, -77], [-8, -75], [-7, -74], [-9, -77], [-8, -77], [-9, -77], [-9, -77], [-8, -76], [-8, -75], [-10, -77], [-8, -75], [-7, -74], [-9, -77], [-8, -77], [-9, -77], [-9, -77], [-8, -76], [-8, -75], [7, -61], [5, -59], [4, -58], [8, -59], [10, -59], [9, -59], [7, -59], [7, -58], [4, -57], [7, -61], [5, -59], [4, -58], [8, -59], [10, -59], [9, -59], [7, -59], [7, -58], [4, -57], [-6, -60], [-4, -52], [-4, -51], [-3, -50], [-2, -49], [7, -53], [-12, -57], [-14, -56], [-6, -60], [-4, -52], [-4, -51], [-3, -50], [-2, -49], [7, -53], [-12, -57], [-14, -56], [11, -77], [9, -73], [7, -72], [4, -71], [4, -70], [-4, -75], [-9, -81], [-10, -82], [11, -77], [9, -73], [7, -72], [4, -71], [4, -70], [-4, -75], [-9, -81], [-10, -82], [-10, -77], [-8, -73], [-6, -72], [-3, -71], [-3, -70], [5, -75], [10, -81], [11, -82], [-10, -77], [-8, -73], [-6, -72], [-3, -71], [-3, -70], [5, -75], [10, -81], [11, -82], [7, -60], [5, -52], [5, -51], [4, -50], [3, -49], [-6, -53], [13, -57], [15, -56], [7, -60], [5, -52], [5, -51], [4, -50], [3, -49], [-6, -53], [13, -57], [15, -56], [-13, -52], [-14, -27], [-7, -58], [-7, -57], [-7, -58], [-15, -49], [-13, -52], [-14, -27], [-7, -58], [-7, -57], [-7, -58], [-15, -49], [7, -75], [-3, -40], [10, -75], [10, -74], [10, -75], [-8, -75], [7, -75], [-3, -40], [10, -75], [10, -74], [10, -75], [-8, -75], [-6, -75], [4, -40], [-9, -75], [-9, -74], [-9, -75], [9, -75], [-6, -75], [4, -40], [-9, -75], [-9, -74], [-9, -75], [9, -75], [14, -52], [15, -27], [8, -58], [8, -57], [8, -58], [16, -49], [14, -52], [15, -27], [8, -58], [8, -57], [8, -58], [16, -49]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 77, 77, 79, 79, 79, 79, 77, 77, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 84, 85, 86, 87, 88, 89, 90, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 91, 92, 93, 94, 95, 96, 97, 98, 99, 82, 83, 84, 85, 86, 87, 88, 89, 90, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 108, 109, 110, 111, 112, 113, 114, 115, 108, 109, 110, 111, 112, 113, 114, 115, 108, 109, 110, 111, 112, 113, 114, 115, 100, 101, 102, 103, 104, 105, 106, 107, 100, 101, 102, 103, 104, 105, 106, 107, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 122, 123, 124, 125, 126, 127, 122, 123, 124, 125, 126, 127, 122, 123, 124, 125, 126, 127, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121]
};

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 86, 119, 160, 203, 244, 285, 327, 370, 412, 454, 496, 539, 575, 613, 656, 697, 735, 774, 813, 850, 882, 920, 964, 1006, 1038, 1072, 1112, 1151, 1191, 1231, 1270, 1308, 1345, 1387, 1433, 1478, 1521, 1565, 1608, 1651, 1696, 1741, 1784, 1827, 1882, 1936, 1986, 2040, 2088, 2128, 2170, 2218, 2268, 2318, 2368, 2417, 2466, 2517, 2567, 2611, 2657, 2703, 2749, 2794, 2837, 2882, 2921, 2978, 3026, 3073, 3128, 3203, 3270, 3318, 3371, 3432, 3485, 3553, 3628, 3670, 3715, 3760, 3807, 3855, 3908, 3957, 4004, 4048, 4095, 4144, 4194, 4250, 4306, 4362, 4416, 4456, 4499, 4542, 4586, 4634, 4703, 4769, 4808, 4850, 4894, 4941, 4995, 5067, 5139, 5198],
  widths: [44, 42, 33, 41, 43, 41, 41, 42, 43, 42, 42, 42, 43, 36, 38, 43, 41, 38, 39, 39, 37, 32, 38, 44, 42, 32, 34, 40, 39, 40, 40, 39, 38, 37, 42, 46, 45, 43, 44, 43, 43, 45, 45, 43, 43, 55, 54, 50, 54, 48, 40, 42, 48, 50, 50, 50, 49, 49, 51, 50, 44, 46, 46, 46, 45, 43, 45, 39, 57, 48, 47, 55, 75, 67, 48, 53, 61, 53, 68, 75, 42, 45, 45, 47, 48, 53, 49, 47, 44, 47, 49, 50, 56, 56, 56, 54, 40, 43, 43, 44, 48, 69, 66, 39, 42, 44, 47, 54, 72, 72, 59, 53],
  heights: [75, 74, 71, 71, 69, 73, 71, 72, 75, 75, 71, 72, 77, 75, 72, 69, 70, 70, 72, 71, 76, 72, 71, 69, 70, 68, 68, 68, 70, 71, 72, 72, 71, 68, 68, 69, 70, 71, 74, 74, 71, 71, 74, 74, 73, 52, 52, 53, 55, 52, 66, 55, 62, 56, 75, 76, 77, 78, 78, 77, 74, 75, 76, 77, 76, 75, 74, 80, 69, 69, 68, 78, 63, 59, 72, 62, 69, 62, 58, 52, 71, 70, 67, 68, 72, 79, 78, 78, 70, 69, 67, 67, 64, 74, 74, 74, 72, 68, 69, 68, 68, 67, 67, 74, 74, 74, 73, 73, 71, 71, 71, 81],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [2, -27], [2, -27], [2, -27], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -27], [1, -27], [1, -27], [-1, -26], [-1, -26], [-1, -26], [0, -26], [0, -26], [0, -26], [-2, -27], [-2, -27], [-2, -27], [1, -25], [1, -25], [0, -23], [1, -22], [0, -24], [0, -25], [1, -23], [1, -21], [1, -24], [2, -25], [0, -24], [1, -25], [3, -27], [3, -25], [2, -23], [2, -22], [4, -23], [0, -22], [-2, -21], [0, -22], [3, -25], [0, -24], [-2, -22], [1, -22], [1, -24], [0, -23], [0, -21], [0, -22], [2, -26], [0, -25], [0, -22], [1, -23], [1, -24], [0, -22], [1, -20], [1, -22], [2, -24], [2, -22], [1, -20], [1, -21], [-1, -24], [0, -23], [1, -21], [0, -22], [-1, -26], [0, -25], [0, -22], [0, -23], [-4, -23], [0, -22], [2, -21], [0, -22], [-3, -25], [0, -24], [2, -22], [0, -22], [-1, -24], [-2, -25], [1, -24], [0, -25], [-3, -27], [-2, -25], [-1, -23], [-1, -22], [1, -22], [1, -22], [1, -22], [2, -22], [2, -22], [2, -22], [3, -21], [3, -21], [3, -21], [3, -18], [3, -18], [3, -18], [0, -21], [0, -21], [0, -21], [-4, -18], [-4, -18], [-4, -18], [-3, -21], [-3, -21], [-3, -21], [-2, -22], [-2, -22], [-2, -22], [2, -24], [0, -18], [2, -24], [2, -24], [0, -18], [2, -24], [1, -23], [-1, -18], [1, -23], [1, -23], [-1, -18], [1, -23], [-1, -23], [1, -18], [-1, -23], [-1, -23], [1, -18], [-1, -23], [-2, -24], [0, -18], [-2, -24], [-2, -24], [0, -18], [-2, -24], [0, -23], [0, -24], [1, -24], [1, -25], [1, -25], [1, -24], [0, -23], [0, -24], [1, -24], [1, -25], [1, -25], [1, -24], [-1, -24], [-1, -24], [-1, -25], [1, -25], [1, -25], [1, -24], [-1, -24], [-1, -24], [-1, -25], [1, -25], [1, -25], [1, -24], [1, -24], [1, -24], [1, -25], [-1, -25], [0, -25], [0, -24], [1, -24], [1, -24], [1, -25], [-1, -25], [0, -25], [0, -24], [0, -23], [0, -24], [0, -24], [0, -25], [0, -25], [-1, -24], [0, -23], [0, -24], [0, -24], [0, -25], [0, -25], [-1, -24], [2, -27], [-3, -28], [1, -38], [-1, -19], [-2, -19], [2, -27], [-3, -28], [1, -38], [-1, -19], [-2, -19], [1, -26], [0, -29], [2, -36], [-4, -30], [-4, -27], [1, -26], [0, -29], [2, -36], [-4, -30], [-4, -27], [0, -26], [1, -29], [-1, -36], [5, -30], [5, -27], [0, -26], [1, -29], [-1, -36], [5, -30], [5, -27], [-2, -27], [4, -28], [0, -38], [2, -19], [2, -19], [-2, -27], [4, -28], [0, -38], [2, -19], [2, -19], [2, -25], [6, -25], [2, -25], [2, -25], [6, -25], [2, -25], [-2, -22], [1, -22], [-2, -22], [-2, -22], [1, -22], [-2, -22], [3, -22], [0, -22], [3, -22], [3, -22], [0, -22], [3, -22], [-2, -25], [-6, -25], [-2, -25], [-2, -25], [-6, -25], [-2, -25], [7, -24], [7, -24], [4, -16], [4, -16], [-3, -16], [-3, -16], [-6, -24], [-6, -24], [-4, 2], [-4, 2], [-4, 3], [-4, 3], [5, 3], [5, 3], [4, 2], [4, 2], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [2, -27], [0, -27], [2, -27], [2, -25], [2, -25], [1, -26], [0, -28], [3, -31], [1, -31], [0, -31], [0, -27], [2, -27], [2, -25], [2, -25], [1, -26], [0, -28], [3, -31], [1, -31], [0, -31], [-1, -23], [1, -21], [2, -20], [2, -20], [2, -20], [-4, -21], [2, -26], [2, -26], [1, -26], [-1, -23], [1, -21], [2, -20], [2, -20], [2, -20], [-4, -21], [2, -26], [2, -26], [1, -26], [1, -23], [0, -21], [-1, -20], [-1, -20], [-2, -20], [4, -21], [-2, -26], [-2, -26], [-1, -26], [1, -23], [0, -21], [-1, -20], [-1, -20], [-2, -20], [4, -21], [-2, -26], [-2, -26], [-1, -26], [0, -27], [-1, -27], [-1, -25], [-1, -25], [0, -26], [0, -28], [-2, -31], [0, -31], [1, -31], [0, -27], [-1, -27], [-1, -25], [-1, -25], [0, -26], [0, -28], [-2, -31], [0, -31], [1, -31], [0, -27], [3, -31], [4, -32], [4, -32], [2, -31], [-2, -29], [-6, -24], [-8, -24], [0, -27], [3, -31], [4, -32], [4, -32], [2, -31], [-2, -29], [-6, -24], [-8, -24], [-2, -24], [-2, -24], [1, -24], [1, -24], [-1, -23], [-2, -23], [-4, -22], [-3, -22], [-2, -24], [-2, -24], [1, -24], [1, -24], [-1, -23], [-2, -23], [-4, -22], [-3, -22], [3, -24], [2, -24], [-1, -24], [-1, -24], [2, -23], [2, -23], [4, -22], [3, -22], [3, -24], [2, -24], [-1, -24], [-1, -24], [2, -23], [2, -23], [4, -22], [3, -22], [0, -27], [-2, -31], [-3, -32], [-3, -32], [-2, -31], [2, -29], [7, -24], [8, -24], [0, -27], [-2, -31], [-3, -32], [-3, -32], [-2, -31], [2, -29], [7, -24], [8, -24], [-9, -20], [0, -27], [2, -25], [1, -26], [3, -31], [0, -31], [-9, -20], [0, -27], [2, -25], [1, -26], [3, -31], [0, -31], [-7, -27], [-1, -23], [2, -20], [2, -20], [4, -26], [1, -26], [-7, -27], [-1, -23], [2, -20], [2, -20], [4, -26], [1, -26], [8, -27], [1, -23], [-1, -20], [-2, -20], [-4, -26], [-1, -26], [8, -27], [1, -23], [-1, -20], [-2, -20], [-4, -26], [-1, -26], [10, -20], [0, -27], [-1, -25], [0, -26], [-2, -31], [1, -31], [10, -20], [0, -27], [-1, -25], [0, -26], [-2, -31], [1, -31]],
  anchorHead: [[1, -57], [-4, -58], [6, -58], [-4, -58], [-3, -58], [1, -57], [-4, -58], [12, -74], [-5, -58], [13, -74], [13, -73], [-3, -58], [12, -73], [-10, -74], [12, -74], [-13, -74], [3, -58], [9, -73], [5, -58], [6, -58], [-11, -74], [5, -58], [-1, -57], [4, -58], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [13, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [1, -41], [-5, -42], [6, -42], [-4, -42], [-4, -42], [0, -41], [-2, -42], [14, -58], [-3, -42], [11, -58], [11, -57], [-5, -42], [12, -57], [-10, -58], [12, -58], [-11, -58], [5, -42], [11, -57], [3, -42], [4, -42], [-13, -58], [5, -42], [0, -41], [4, -42], [-4, -67], [-13, -42], [-4, -67], [-4, -67], [-13, -42], [-4, -67], [-10, -67], [-12, -45], [-10, -67], [-10, -67], [-12, -45], [-10, -67], [11, -67], [13, -45], [11, -67], [11, -67], [13, -45], [11, -67], [5, -67], [14, -42], [5, -67], [5, -67], [14, -42], [5, -67], [-4, -54], [-4, -55], [-4, -56], [-4, -58], [-4, -58], [-4, -56], [-4, -54], [-4, -55], [-4, -56], [-4, -58], [-4, -58], [-4, -56], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [5, -54], [5, -55], [5, -56], [5, -58], [5, -58], [5, -56], [5, -54], [5, -55], [5, -56], [5, -58], [5, -58], [5, -56], [-4, -58], [-7, -59], [-5, -61], [-11, -45], [-11, -44], [-4, -58], [-7, -59], [-5, -61], [-11, -45], [-11, -44], [13, -74], [15, -75], [18, -75], [-6, -72], [-11, -67], [13, -74], [15, -75], [18, -75], [-6, -72], [-11, -67], [-12, -74], [-14, -75], [-17, -75], [7, -72], [12, -67], [-12, -74], [-14, -75], [-17, -75], [7, -72], [12, -67], [5, -58], [8, -59], [6, -61], [12, -45], [12, -44], [5, -58], [8, -59], [6, -61], [12, -45], [12, -44], [21, -69], [28, -68], [21, -69], [21, -69], [28, -68], [21, -69], [14, -71], [20, -70], [14, -71], [14, -71], [20, -70], [14, -71], [-13, -71], [-19, -70], [-13, -71], [-13, -71], [-19, -70], [-13, -71], [-20, -69], [-27, -68], [-20, -69], [-20, -69], [-27, -68], [-20, -69], [30, -66], [30, -66], [26, -61], [26, -61], [-25, -61], [-25, -61], [-29, -66], [-29, -66], [35, -19], [35, -19], [42, 23], [42, 23], [-41, 23], [-41, 23], [-34, -19], [-34, -19], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-5, -56], [-3, -55], [-2, -52], [-2, -52], [-6, -54], [-6, -57], [-8, -57], [-9, -57], [-9, -57], [-5, -56], [-3, -55], [-2, -52], [-2, -52], [-6, -54], [-6, -57], [-8, -57], [-9, -57], [-9, -57], [11, -69], [13, -67], [14, -64], [14, -64], [12, -64], [5, -65], [7, -66], [8, -66], [8, -66], [11, -69], [13, -67], [14, -64], [14, -64], [12, -64], [5, -65], [7, -66], [8, -66], [8, -66], [-10, -69], [-12, -67], [-13, -64], [-13, -64], [-11, -64], [-4, -65], [-6, -66], [-7, -66], [-7, -66], [-10, -69], [-12, -67], [-13, -64], [-13, -64], [-11, -64], [-4, -65], [-6, -66], [-7, -66], [-7, -66], [6, -56], [4, -55], [3, -52], [3, -52], [7, -54], [7, -57], [9, -57], [10, -57], [10, -57], [6, -56], [4, -55], [3, -52], [3, -52], [7, -54], [7, -57], [9, -57], [10, -57], [10, -57], [-5, -55], [-3, -57], [-3, -60], [-3, -60], [-4, -58], [-8, -56], [-24, -49], [-23, -49], [-5, -55], [-3, -57], [-3, -60], [-3, -60], [-4, -58], [-8, -56], [-24, -49], [-23, -49], [9, -71], [13, -71], [16, -71], [16, -71], [12, -70], [8, -70], [-1, -69], [0, -69], [9, -71], [13, -71], [16, -71], [16, -71], [12, -70], [8, -70], [-1, -69], [0, -69], [-8, -71], [-12, -71], [-15, -71], [-15, -71], [-11, -70], [-7, -70], [2, -69], [1, -69], [-8, -71], [-12, -71], [-15, -71], [-15, -71], [-11, -70], [-7, -70], [2, -69], [1, -69], [6, -55], [4, -57], [4, -60], [4, -60], [5, -58], [9, -56], [25, -49], [24, -49], [6, -55], [4, -57], [4, -60], [4, -60], [5, -58], [9, -56], [25, -49], [24, -49], [-13, -50], [-5, -56], [-2, -52], [-6, -54], [-8, -57], [-9, -57], [-13, -50], [-5, -56], [-2, -52], [-6, -54], [-8, -57], [-9, -57], [6, -74], [11, -69], [14, -64], [12, -64], [7, -66], [8, -66], [6, -74], [11, -69], [14, -64], [12, -64], [7, -66], [8, -66], [-5, -74], [-10, -69], [-13, -64], [-11, -64], [-6, -66], [-7, -66], [-5, -74], [-10, -69], [-13, -64], [-11, -64], [-6, -66], [-7, -66], [14, -50], [6, -56], [3, -52], [7, -54], [9, -57], [10, -57], [14, -50], [6, -56], [3, -52], [7, -54], [9, -57], [10, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87]
};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 71, 101, 135, 170, 209, 246, 280, 317, 356, 394, 430, 467, 499, 536, 576, 613, 647, 681, 719, 753, 783, 821, 869, 910, 943, 981, 1029, 1070, 1103, 1135, 1169, 1201, 1233, 1273, 1319, 1360, 1397, 1434, 1470, 1507, 1544, 1581, 1616, 1653, 1702, 1751, 1795, 1833, 1880, 1921, 1960, 2000, 2040, 2078, 2116, 2154, 2191, 2227, 2263, 2298, 2335, 2370, 2403, 2436, 2469, 2512, 2559, 2614, 2661, 2691, 2728, 2776, 2814, 2859, 2905, 2938, 2973, 3035, 3108, 3147, 3186, 3226, 3267, 3327, 3382, 3429, 3460, 3491, 3524, 3558, 3615, 3665, 3708, 3745, 3779, 3810, 3841, 3872, 3904, 3940, 3974, 4006, 4038, 4070],
  widths: [37, 34, 30, 34, 35, 39, 37, 34, 37, 39, 38, 36, 37, 32, 37, 40, 37, 34, 34, 38, 34, 30, 38, 48, 41, 33, 38, 48, 41, 33, 32, 34, 32, 32, 40, 46, 41, 37, 37, 36, 37, 37, 37, 35, 37, 49, 49, 44, 38, 47, 41, 39, 40, 40, 38, 38, 38, 37, 36, 36, 35, 37, 35, 33, 33, 33, 43, 47, 55, 47, 30, 37, 48, 38, 45, 46, 33, 35, 62, 73, 39, 39, 40, 41, 60, 55, 47, 31, 31, 33, 34, 57, 50, 43, 37, 34, 31, 31, 31, 32, 36, 34, 32, 32, 32, 32],
  heights: [73, 73, 71, 72, 71, 70, 70, 71, 74, 70, 70, 71, 74, 71, 69, 65, 66, 66, 68, 67, 71, 69, 68, 66, 65, 65, 63, 63, 67, 72, 72, 69, 69, 65, 64, 62, 65, 67, 71, 69, 69, 67, 71, 69, 69, 50, 45, 45, 47, 43, 60, 59, 62, 57, 72, 70, 71, 72, 73, 73, 67, 65, 66, 67, 68, 68, 69, 67, 60, 59, 69, 69, 64, 64, 65, 66, 62, 61, 49, 49, 69, 69, 69, 70, 63, 62, 62, 70, 70, 69, 70, 65, 65, 65, 72, 73, 74, 74, 71, 70, 67, 67, 68, 68, 66, 65],
  bodyOffsets: [[0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -29], [0, -28], [-1, -25], [0, -25], [0, -29], [-1, -28], [-1, -25], [0, -25], [0, -26], [-1, -26], [-2, -26], [-1, -27], [-1, -29], [0, -27], [-1, -25], [0, -24], [-3, -26], [-3, -26], [-4, -25], [-2, -26], [-3, -28], [-3, -28], [-4, -26], [-2, -25], [-2, -26], [-3, -24], [-4, -23], [-4, -24], [-3, -28], [-5, -28], [-5, -27], [-4, -26], [0, -27], [0, -24], [0, -23], [0, -24], [0, -27], [0, -24], [0, -23], [0, -24], [3, -26], [3, -24], [4, -23], [4, -24], [3, -28], [5, -28], [5, -27], [5, -26], [3, -26], [3, -26], [4, -25], [3, -26], [4, -28], [3, -28], [4, -26], [3, -25], [0, -26], [2, -26], [2, -26], [2, -27], [1, -29], [0, -27], [1, -25], [0, -24], [0, -11], [0, -11], [0, -11], [-1, -13], [-1, -13], [-1, -13], [-7, -13], [-7, -13], [-7, -13], [-1, -12], [-1, -12], [-1, -12], [1, -14], [1, -14], [1, -14], [1, -12], [1, -12], [1, -12], [7, -13], [7, -13], [7, -13], [2, -13], [2, -13], [2, -13], [1, -19], [1, -18], [1, -19], [1, -19], [1, -18], [1, -19], [6, -21], [5, -18], [6, -21], [6, -21], [5, -18], [6, -21], [-6, -21], [-5, -18], [-6, -21], [-6, -21], [-5, -18], [-6, -21], [0, -19], [0, -18], [0, -19], [0, -19], [0, -18], [0, -19], [0, -26], [1, -25], [1, -25], [1, -26], [0, -26], [0, -26], [0, -26], [1, -25], [1, -25], [1, -26], [0, -26], [0, -26], [0, -28], [1, -27], [0, -28], [-1, -28], [-1, -29], [-1, -29], [0, -28], [1, -27], [0, -28], [-1, -28], [-1, -29], [-1, -29], [1, -28], [0, -27], [1, -28], [2, -28], [2, -29], [2, -29], [1, -28], [0, -27], [1, -28], [2, -28], [2, -29], [2, -29], [0, -26], [-1, -25], [-1, -25], [0, -26], [0, -26], [0, -26], [0, -26], [-1, -25], [-1, -25], [0, -26], [0, -26], [0, -26], [2, -28], [0, -27], [-8, -24], [-7, -23], [-7, -23], [2, -28], [0, -27], [-8, -24], [-7, -23], [-7, -23], [7, -24], [10, -24], [0, -27], [-1, -27], [-1, -27], [7, -24], [10, -24], [0, -27], [-1, -27], [-1, -27], [-7, -24], [-9, -24], [0, -27], [1, -27], [1, -27], [-7, -24], [-9, -24], [0, -27], [1, -27], [1, -27], [-1, -28], [1, -27], [9, -24], [8, -23], [8, -23], [-1, -28], [1, -27], [9, -24], [8, -23], [8, -23], [6, -21], [10, -23], [6, -21], [6, -21], [10, -23], [6, -21], [11, -20], [15, -18], [11, -20], [11, -20], [15, -18], [11, -20], [-10, -20], [-14, -18], [-10, -20], [-10, -20], [-14, -18], [-10, -20], [-5, -21], [-10, -23], [-5, -21], [-5, -21], [-10, -23], [-5, -21], [13, -24], [13, -24], [24, -15], [24, -15], [-23, -15], [-23, -15], [-13, -24], [-13, -24], [7, -6], [7, -6], [13, -7], [13, -7], [-12, -7], [-12, -7], [-7, -6], [-7, -6], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -26], [-1, -27], [0, -27], [1, -28], [-6, -21], [-5, -21], [-4, -21], [-4, -21], [-4, -21], [0, -26], [-1, -27], [0, -27], [1, -28], [-6, -21], [-5, -21], [-4, -21], [-4, -21], [-4, -21], [4, -26], [7, -27], [8, -27], [8, -28], [-3, -26], [-4, -26], [-7, -26], [-7, -26], [-7, -26], [4, -26], [7, -27], [8, -27], [8, -28], [-3, -26], [-4, -26], [-7, -26], [-7, -26], [-7, -26], [-3, -26], [-6, -27], [-7, -27], [-8, -28], [4, -26], [4, -26], [8, -26], [8, -26], [8, -26], [-3, -26], [-6, -27], [-7, -27], [-8, -28], [4, -26], [4, -26], [8, -26], [8, -26], [8, -26], [1, -26], [2, -27], [0, -27], [0, -28], [6, -21], [6, -21], [5, -21], [5, -21], [5, -21], [1, -26], [2, -27], [0, -27], [0, -28], [6, -21], [6, -21], [5, -21], [5, -21], [5, -21], [0, -26], [-1, -27], [0, -27], [1, -28], [-6, -21], [-5, -21], [-4, -21], [-4, -21], [0, -26], [-1, -27], [0, -27], [1, -28], [-6, -21], [-5, -21], [-4, -21], [-4, -21], [4, -26], [7, -27], [8, -27], [8, -28], [-3, -26], [-4, -26], [-7, -26], [-7, -26], [4, -26], [7, -27], [8, -27], [8, -28], [-3, -26], [-4, -26], [-7, -26], [-7, -26], [-3, -26], [-6, -27], [-7, -27], [-8, -28], [4, -26], [4, -26], [8, -26], [8, -26], [-3, -26], [-6, -27], [-7, -27], [-8, -28], [4, -26], [4, -26], [8, -26], [8, -26], [1, -26], [2, -27], [0, -27], [0, -28], [6, -21], [6, -21], [5, -21], [5, -21], [1, -26], [2, -27], [0, -27], [0, -28], [6, -21], [6, -21], [5, -21], [5, -21], [0, -27], [1, -28], [3, -29], [3, -29], [3, -27], [2, -27], [0, -27], [1, -28], [3, -29], [3, -29], [3, -27], [2, -27], [1, -23], [0, -23], [0, -24], [0, -24], [0, -23], [0, -22], [1, -23], [0, -23], [0, -24], [0, -24], [0, -23], [0, -22], [-1, -23], [0, -23], [0, -24], [0, -24], [0, -23], [0, -22], [-1, -23], [0, -23], [0, -24], [0, -24], [0, -23], [0, -22], [1, -27], [-1, -28], [-2, -29], [-2, -29], [-2, -27], [-2, -27], [1, -27], [-1, -28], [-2, -29], [-2, -29], [-2, -27], [-2, -27]],
  anchorHead: [[3, -59], [-3, -60], [7, -60], [-2, -59], [-2, -60], [2, -58], [-2, -59], [14, -75], [-3, -59], [11, -75], [11, -74], [-4, -59], [10, -74], [-12, -74], [10, -74], [-10, -75], [6, -59], [11, -75], [4, -59], [5, -59], [-12, -76], [4, -59], [-1, -58], [3, -59], [0, -59], [0, -58], [0, -56], [0, -57], [0, -59], [0, -58], [0, -56], [0, -57], [-4, -60], [-4, -59], [-4, -57], [-4, -58], [-4, -60], [-4, -59], [-4, -57], [-4, -58], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [10, -74], [10, -73], [10, -71], [10, -72], [10, -74], [10, -73], [10, -71], [10, -72], [11, -73], [11, -72], [11, -70], [11, -71], [11, -73], [11, -72], [11, -70], [11, -71], [-9, -74], [-9, -73], [-9, -71], [-9, -72], [-9, -74], [-9, -73], [-9, -71], [-9, -72], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [5, -60], [5, -59], [5, -57], [5, -58], [5, -60], [5, -59], [5, -57], [5, -58], [0, -32], [-5, -33], [5, -33], [-5, -33], [-4, -33], [0, -32], [-4, -33], [11, -50], [-5, -33], [12, -51], [12, -50], [-4, -35], [11, -50], [-10, -51], [11, -51], [-11, -52], [5, -35], [11, -51], [6, -34], [7, -34], [-10, -50], [6, -34], [1, -32], [5, -33], [-15, -55], [-15, -40], [-15, -55], [-15, -55], [-15, -40], [-15, -55], [-5, -66], [-3, -47], [-5, -66], [-5, -66], [-3, -47], [-5, -66], [6, -66], [4, -47], [6, -66], [6, -66], [4, -47], [6, -66], [16, -55], [16, -40], [16, -55], [16, -55], [16, -40], [16, -55], [-4, -58], [-4, -56], [-4, -57], [-4, -58], [-4, -59], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -58], [-4, -59], [-4, -59], [10, -75], [10, -73], [10, -74], [10, -75], [10, -76], [10, -76], [10, -75], [10, -73], [10, -74], [10, -75], [10, -76], [10, -76], [-9, -75], [-9, -73], [-9, -74], [-9, -75], [-9, -76], [-9, -76], [-9, -75], [-9, -73], [-9, -74], [-9, -75], [-9, -76], [-9, -76], [5, -58], [5, -56], [5, -57], [5, -58], [5, -59], [5, -59], [5, -58], [5, -56], [5, -57], [5, -58], [5, -59], [5, -59], [-4, -58], [-5, -57], [-19, -45], [-18, -44], [-18, -44], [-4, -58], [-5, -57], [-19, -45], [-18, -44], [-18, -44], [17, -73], [18, -73], [2, -70], [3, -70], [3, -70], [17, -73], [18, -73], [2, -70], [3, -70], [3, -70], [-16, -73], [-17, -73], [-1, -70], [-2, -70], [-2, -70], [-16, -73], [-17, -73], [-1, -70], [-2, -70], [-2, -70], [5, -58], [6, -57], [20, -45], [19, -44], [19, -44], [5, -58], [6, -57], [20, -45], [19, -44], [19, -44], [23, -65], [29, -66], [23, -65], [23, -65], [29, -66], [23, -65], [20, -70], [24, -67], [20, -70], [20, -70], [24, -67], [20, -70], [-19, -70], [-23, -67], [-19, -70], [-19, -70], [-23, -67], [-19, -70], [-22, -65], [-28, -66], [-22, -65], [-22, -65], [-28, -66], [-22, -65], [40, -62], [40, -62], [45, -58], [45, -58], [-44, -58], [-44, -58], [-39, -62], [-39, -62], [48, -24], [48, -24], [55, 14], [55, 14], [-54, 14], [-54, 14], [-47, -24], [-47, -24], [3, -59], [3, -59], [3, -59], [3, -59], [3, -59], [3, -59], [3, -59], [3, -59], [-3, -57], [-3, -59], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-19, -44], [-3, -57], [-3, -59], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-19, -44], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-1, -72], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-1, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [2, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [2, -72], [4, -57], [4, -59], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [20, -44], [4, -57], [4, -59], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [20, -44], [-3, -57], [-3, -59], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [-3, -57], [-3, -59], [-3, -59], [-3, -60], [-18, -45], [-19, -44], [-19, -44], [-19, -44], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [14, -75], [16, -76], [17, -76], [17, -77], [0, -72], [-1, -72], [-1, -72], [-1, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [-13, -75], [-15, -76], [-16, -76], [-16, -77], [1, -72], [2, -72], [2, -72], [2, -72], [4, -57], [4, -59], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [4, -57], [4, -59], [4, -59], [4, -60], [19, -45], [20, -44], [20, -44], [20, -44], [-5, -59], [-3, -61], [-1, -62], [-1, -62], [-1, -59], [-1, -58], [-5, -59], [-3, -61], [-1, -62], [-1, -62], [-1, -59], [-1, -58], [13, -71], [12, -71], [12, -72], [12, -72], [11, -70], [11, -69], [13, -71], [12, -71], [12, -72], [12, -72], [11, -70], [11, -69], [-12, -71], [-11, -71], [-11, -72], [-11, -72], [-10, -70], [-10, -69], [-12, -71], [-11, -71], [-11, -72], [-11, -72], [-10, -70], [-10, -69], [6, -59], [4, -61], [2, -62], [2, -62], [2, -59], [2, -58], [6, -59], [4, -61], [2, -62], [2, -62], [2, -59], [2, -58]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 70, 71, 72, 73, 73, 66, 67, 68, 69, 69, 66, 67, 68, 69, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 87, 88, 89, 90, 91, 92, 93, 93, 80, 81, 82, 83, 84, 85, 86, 86, 80, 81, 82, 83, 84, 85, 86, 86, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 94, 95, 96, 97, 98, 99, 94, 95, 96, 97, 98, 99]
};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 40, 77, 105, 141, 180, 218, 255, 292, 331, 370, 407, 444, 482, 514, 557, 606, 650, 683, 721, 764, 800, 827, 870, 918, 960, 984, 1027, 1076, 1116, 1148, 1184, 1223, 1260, 1292, 1330, 1377, 1424, 1464, 1503, 1539, 1578, 1618, 1657, 1693, 1732, 1780, 1829, 1887, 1940, 1989, 2025, 2065, 2114, 2168, 2206, 2243, 2280, 2320, 2363, 2403, 2444, 2484, 2524, 2564, 2606, 2648, 2695, 2753, 2809, 2865, 2908, 2965, 3012, 3058, 3101, 3153, 3209, 3273, 3309, 3342, 3375, 3441, 3505, 3566, 3607, 3647, 3689, 3739, 3787, 3833, 3874, 3922, 3972, 4021, 4072, 4126, 4180, 4229, 4262, 4302, 4344, 4386, 4434, 4483, 4532, 4582, 4635, 4690, 4733, 4778, 4829, 4877, 4932, 4969, 5003],
  widths: [40, 37, 28, 36, 39, 38, 37, 37, 39, 39, 37, 37, 38, 32, 43, 49, 44, 33, 38, 43, 36, 27, 43, 48, 42, 24, 43, 49, 40, 32, 36, 39, 37, 32, 38, 47, 47, 40, 39, 36, 39, 40, 39, 36, 39, 48, 49, 58, 53, 49, 36, 40, 49, 54, 38, 37, 37, 40, 43, 40, 41, 40, 40, 40, 42, 42, 47, 58, 56, 56, 43, 57, 47, 46, 43, 52, 56, 64, 36, 33, 33, 66, 64, 61, 41, 40, 42, 50, 48, 46, 41, 48, 50, 49, 51, 54, 54, 49, 33, 40, 42, 42, 48, 49, 49, 50, 53, 55, 43, 45, 51, 48, 55, 37, 34, 61],
  heights: [76, 75, 74, 74, 74, 75, 79, 81, 74, 70, 71, 77, 82, 75, 72, 70, 69, 73, 77, 76, 76, 75, 73, 70, 70, 71, 70, 69, 72, 75, 76, 73, 73, 70, 71, 70, 73, 73, 76, 72, 70, 73, 76, 72, 71, 60, 59, 42, 41, 38, 67, 55, 63, 56, 70, 73, 74, 75, 74, 73, 67, 69, 71, 72, 71, 69, 78, 71, 72, 64, 74, 77, 71, 66, 70, 63, 48, 41, 76, 78, 79, 75, 82, 82, 70, 70, 70, 69, 74, 74, 72, 72, 71, 71, 67, 66, 66, 69, 68, 68, 68, 70, 64, 62, 62, 60, 79, 82, 70, 66, 69, 76, 78, 68, 67, 68],
  bodyOffsets: [[-1, -29], [-1, -29], [-1, -29], [-2, -28], [-2, -28], [-2, -28], [-4, -29], [-4, -29], [-4, -29], [-3, -30], [-3, -30], [-3, -30], [0, -29], [0, -29], [0, -29], [3, -30], [3, -30], [3, -30], [4, -29], [4, -29], [4, -29], [3, -28], [3, -28], [3, -28], [-2, -26], [0, -23], [1, -21], [-1, -25], [-2, -28], [-4, -27], [-5, -22], [-3, -21], [-1, -25], [-4, -26], [-4, -25], [-3, -26], [-1, -26], [-2, -24], [-2, -23], [-1, -23], [-4, -25], [-3, -25], [-4, -25], [-3, -26], [-3, -27], [-4, -27], [-2, -25], [-5, -25], [-3, -26], [-4, -25], [-1, -24], [-3, -25], [-3, -29], [-4, -27], [-3, -26], [-2, -26], [0, -26], [0, -24], [0, -24], [0, -26], [0, -26], [1, -24], [0, -24], [1, -25], [3, -26], [4, -25], [2, -24], [4, -25], [3, -29], [4, -27], [4, -26], [3, -26], [5, -25], [4, -25], [4, -25], [3, -26], [3, -27], [5, -27], [3, -25], [5, -25], [1, -25], [5, -26], [5, -25], [3, -26], [2, -26], [2, -24], [3, -23], [1, -23], [-2, -10], [-2, -10], [-2, -10], [-4, -10], [-4, -10], [-4, -10], [-14, -18], [-14, -18], [-14, -18], [-14, -17], [-14, -17], [-14, -17], [-1, -20], [-1, -20], [-1, -20], [15, -17], [15, -17], [15, -17], [14, -18], [14, -18], [14, -18], [5, -10], [5, -10], [5, -10], [2, -28], [1, -21], [2, -28], [2, -28], [1, -21], [2, -28], [-1, -24], [-3, -21], [-1, -24], [-1, -24], [-3, -21], [-1, -24], [2, -24], [3, -21], [2, -24], [2, -24], [3, -21], [2, -24], [-2, -28], [-1, -21], [-2, -28], [-2, -28], [-1, -21], [-2, -28], [1, -29], [1, -30], [1, -31], [1, -31], [2, -31], [2, -30], [1, -29], [1, -30], [1, -31], [1, -31], [2, -31], [2, -30], [-4, -26], [-5, -27], [-5, -28], [-5, -29], [-4, -28], [-4, -27], [-4, -26], [-5, -27], [-5, -28], [-5, -29], [-4, -28], [-4, -27], [5, -26], [5, -27], [5, -28], [5, -29], [4, -28], [4, -27], [5, -26], [5, -27], [5, -28], [5, -29], [4, -28], [4, -27], [-1, -29], [0, -30], [0, -31], [-1, -31], [-1, -31], [-2, -30], [-1, -29], [0, -30], [0, -31], [-1, -31], [-1, -31], [-2, -30], [-2, -28], [6, -26], [8, -31], [-4, -23], [-4, -19], [-2, -28], [6, -26], [8, -31], [-4, -23], [-4, -19], [-3, -30], [-3, -26], [3, -27], [0, -22], [-1, -22], [-3, -30], [-3, -26], [3, -27], [0, -22], [-1, -22], [3, -30], [4, -26], [-2, -27], [1, -22], [1, -22], [3, -30], [4, -26], [-2, -27], [1, -22], [1, -22], [3, -28], [-5, -26], [-8, -31], [4, -23], [4, -19], [3, -28], [-5, -26], [-8, -31], [4, -23], [4, -19], [9, -28], [12, -27], [9, -28], [9, -28], [12, -27], [9, -28], [-1, -25], [3, -24], [-1, -25], [-1, -25], [3, -24], [-1, -25], [1, -25], [-3, -24], [1, -25], [1, -25], [-3, -24], [1, -25], [-8, -28], [-11, -27], [-8, -28], [-8, -28], [-11, -27], [-8, -28], [16, -25], [16, -25], [9, -21], [9, -21], [-9, -21], [-9, -21], [-15, -25], [-15, -25], [5, -9], [5, -9], [2, -6], [2, -6], [-2, -6], [-2, -6], [-5, -9], [-5, -9], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [9, -41], [11, -42], [11, -42], [-2, -28], [-2, -32], [-5, -33], [-5, -33], [-5, -33], [-5, -33], [9, -41], [11, -42], [11, -42], [-2, -28], [-2, -32], [-5, -33], [-5, -33], [-5, -33], [-5, -33], [6, -22], [5, -22], [4, -23], [-13, -28], [-14, -33], [-11, -32], [-11, -32], [-11, -32], [-11, -32], [6, -22], [5, -22], [4, -23], [-13, -28], [-14, -33], [-11, -32], [-11, -32], [-11, -32], [-11, -32], [-5, -22], [-5, -22], [-4, -23], [13, -28], [14, -33], [11, -32], [11, -32], [11, -32], [11, -32], [-5, -22], [-5, -22], [-4, -23], [13, -28], [14, -33], [11, -32], [11, -32], [11, -32], [11, -32], [-9, -41], [-10, -42], [-10, -42], [2, -28], [2, -32], [6, -33], [6, -33], [6, -33], [6, -33], [-9, -41], [-10, -42], [-10, -42], [2, -28], [2, -32], [6, -33], [6, -33], [6, -33], [6, -33], [0, -26], [0, -26], [0, -25], [1, -25], [4, -23], [5, -23], [5, -23], [8, -25], [0, -26], [0, -26], [0, -25], [1, -25], [4, -23], [5, -23], [5, -23], [8, -25], [1, -26], [0, -26], [1, -26], [1, -27], [5, -24], [6, -23], [6, -23], [5, -23], [1, -26], [0, -26], [1, -26], [1, -27], [5, -24], [6, -23], [6, -23], [5, -23], [0, -26], [0, -26], [-1, -26], [-1, -27], [-5, -24], [-5, -23], [-5, -23], [-5, -23], [0, -26], [0, -26], [-1, -26], [-1, -27], [-5, -24], [-5, -23], [-5, -23], [-5, -23], [1, -26], [0, -26], [0, -25], [0, -25], [-3, -23], [-5, -23], [-5, -23], [-7, -25], [1, -26], [0, -26], [0, -25], [0, -25], [-3, -23], [-5, -23], [-5, -23], [-7, -25], [-2, -29], [-2, -30], [-3, -32], [-1, -25], [-2, -26], [-11, -21], [-2, -29], [-2, -30], [-3, -32], [-1, -25], [-2, -26], [-11, -21], [-2, -29], [-5, -32], [-5, -33], [0, -27], [1, -26], [-5, -30], [-2, -29], [-5, -32], [-5, -33], [0, -27], [1, -26], [-5, -30], [3, -29], [5, -32], [6, -33], [1, -27], [-1, -26], [6, -30], [3, -29], [5, -32], [6, -33], [1, -27], [-1, -26], [6, -30], [2, -29], [3, -30], [4, -32], [2, -25], [3, -26], [12, -21], [2, -29], [3, -30], [4, -32], [2, -25], [3, -26], [12, -21]],
  anchorHead: [[-1, -61], [-6, -62], [5, -62], [-6, -62], [-5, -62], [-1, -61], [-5, -62], [11, -78], [-6, -62], [11, -78], [11, -77], [-5, -62], [11, -77], [-11, -78], [11, -78], [-10, -78], [6, -62], [12, -77], [6, -62], [7, -62], [-10, -78], [7, -62], [1, -60], [6, -62], [-1, -58], [-1, -57], [-1, -55], [-1, -56], [-1, -58], [-1, -57], [-1, -55], [-1, -56], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [6, -59], [6, -58], [6, -56], [6, -57], [6, -59], [6, -58], [6, -56], [6, -57], [7, -59], [7, -58], [7, -56], [7, -57], [7, -59], [7, -58], [7, -56], [7, -57], [-1, -34], [-7, -35], [4, -35], [-6, -35], [-5, -35], [-1, -34], [-5, -35], [11, -51], [-6, -35], [11, -51], [11, -50], [-5, -35], [11, -50], [-11, -51], [11, -51], [-10, -51], [5, -35], [11, -50], [6, -35], [6, -35], [-11, -51], [7, -35], [1, -34], [6, -35], [-10, -73], [-15, -44], [-10, -73], [-10, -73], [-15, -44], [-10, -73], [-14, -69], [-18, -49], [-14, -69], [-14, -69], [-18, -49], [-14, -69], [15, -69], [19, -49], [15, -69], [15, -69], [19, -49], [15, -69], [11, -73], [16, -44], [11, -73], [11, -73], [16, -44], [11, -73], [-3, -60], [-3, -63], [-3, -64], [-3, -65], [-3, -64], [-3, -63], [-3, -60], [-3, -63], [-3, -64], [-3, -65], [-3, -64], [-3, -63], [10, -71], [10, -73], [10, -75], [10, -76], [10, -75], [10, -73], [10, -71], [10, -73], [10, -75], [10, -76], [10, -75], [10, -73], [-9, -71], [-9, -73], [-9, -75], [-9, -76], [-9, -75], [-9, -73], [-9, -71], [-9, -73], [-9, -75], [-9, -76], [-9, -75], [-9, -73], [4, -60], [4, -63], [4, -64], [4, -65], [4, -64], [4, -63], [4, -60], [4, -63], [4, -64], [4, -65], [4, -64], [4, -63], [-6, -62], [-4, -61], [-2, -63], [-20, -47], [-22, -44], [-6, -62], [-4, -61], [-2, -63], [-20, -47], [-22, -44], [11, -78], [12, -77], [17, -80], [5, -69], [2, -65], [11, -78], [12, -77], [17, -80], [5, -69], [2, -65], [-10, -78], [-11, -77], [-16, -80], [-4, -69], [-1, -65], [-10, -78], [-11, -77], [-16, -80], [-4, -69], [-1, -65], [7, -62], [5, -61], [3, -63], [21, -47], [23, -44], [7, -62], [5, -61], [3, -63], [21, -47], [23, -44], [27, -71], [32, -69], [27, -71], [27, -71], [32, -69], [27, -71], [16, -73], [23, -70], [16, -73], [16, -73], [23, -70], [16, -73], [-15, -73], [-22, -70], [-15, -73], [-15, -73], [-22, -70], [-15, -73], [-26, -71], [-31, -69], [-26, -71], [-26, -71], [-31, -69], [-26, -71], [40, -65], [40, -65], [34, -64], [34, -64], [-33, -64], [-33, -64], [-39, -65], [-39, -65], [41, -26], [41, -26], [44, 13], [44, 13], [-43, 13], [-43, 13], [-40, -26], [-40, -26], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [8, -73], [8, -75], [7, -76], [-12, -44], [-14, -45], [-16, -48], [-16, -48], [-16, -48], [-16, -48], [8, -73], [8, -75], [7, -76], [-12, -44], [-14, -45], [-16, -48], [-16, -48], [-16, -48], [-16, -48], [20, -70], [20, -70], [13, -70], [-3, -75], [-5, -76], [-3, -73], [-3, -73], [-3, -73], [-3, -73], [20, -70], [20, -70], [13, -70], [-3, -75], [-5, -76], [-3, -73], [-3, -73], [-3, -73], [-3, -73], [-19, -70], [-19, -70], [-12, -70], [4, -75], [6, -76], [4, -73], [4, -73], [4, -73], [4, -73], [-19, -70], [-19, -70], [-12, -70], [4, -75], [6, -76], [4, -73], [4, -73], [4, -73], [4, -73], [-7, -73], [-7, -75], [-6, -76], [13, -44], [15, -45], [17, -48], [17, -48], [17, -48], [17, -48], [-7, -73], [-7, -75], [-6, -76], [13, -44], [15, -45], [17, -48], [17, -48], [17, -48], [17, -48], [-3, -58], [-2, -57], [-2, -56], [-1, -55], [3, -52], [4, -51], [4, -51], [7, -55], [-3, -58], [-2, -57], [-2, -56], [-1, -55], [3, -52], [4, -51], [4, -51], [7, -55], [14, -74], [18, -73], [21, -72], [21, -71], [24, -69], [25, -68], [25, -68], [26, -67], [14, -74], [18, -73], [21, -72], [21, -71], [24, -69], [25, -68], [25, -68], [26, -67], [-13, -74], [-17, -73], [-20, -72], [-20, -71], [-23, -69], [-24, -68], [-24, -68], [-25, -67], [-13, -74], [-17, -73], [-20, -72], [-20, -71], [-23, -69], [-24, -68], [-24, -68], [-25, -67], [4, -58], [3, -57], [3, -56], [2, -55], [-2, -52], [-3, -51], [-3, -51], [-6, -55], [4, -58], [3, -57], [3, -56], [2, -55], [-2, -52], [-3, -51], [-3, -51], [-6, -55], [-6, -60], [-6, -65], [-6, -68], [-5, -56], [-5, -55], [-13, -48], [-6, -60], [-6, -65], [-6, -68], [-5, -56], [-5, -55], [-13, -48], [12, -74], [11, -81], [11, -83], [11, -72], [11, -71], [5, -71], [12, -74], [11, -81], [11, -83], [11, -72], [11, -71], [5, -71], [-11, -74], [-10, -81], [-10, -83], [-10, -72], [-10, -71], [-4, -71], [-11, -74], [-10, -81], [-10, -83], [-10, -72], [-10, -71], [-4, -71], [7, -60], [7, -65], [7, -68], [6, -56], [6, -55], [14, -48], [7, -60], [7, -65], [7, -68], [6, -56], [6, -55], [14, -48]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 89, 78, 79, 80, 81, 82, 83, 83, 83, 83, 78, 79, 80, 81, 82, 83, 83, 83, 83, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 98, 99, 100, 101, 102, 103, 104, 105, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 60, 111, 112, 113, 114, 115, 54, 106, 107, 108, 109, 110, 54, 106, 107, 108, 109, 110]
};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 47, 91, 120, 160, 204, 252, 299, 344, 392, 439, 486, 531, 579, 620, 666, 716, 761, 798, 836, 888, 932, 961, 990, 1035, 1073, 1103, 1132, 1180, 1222, 1259, 1294, 1338, 1379, 1416, 1456, 1500, 1540, 1585, 1629, 1671, 1715, 1760, 1804, 1846, 1890, 1938, 1995, 2054, 2109, 2152, 2194, 2236, 2277, 2319, 2369, 2418, 2467, 2515, 2564, 2614, 2656, 2698, 2739, 2780, 2821, 2862, 2932, 2996, 3060, 3125, 3190, 3255, 3305, 3342, 3401, 3439, 3499, 3567, 3610, 3658, 3706, 3754, 3800, 3849, 3898, 3939, 3986, 4035, 4084, 4134, 4183, 4230, 4281, 4333, 4385, 4437, 4489, 4541, 4593, 4635, 4676, 4717, 4760, 4801, 4844, 4886, 4973, 5046, 5110, 5165, 5221, 5280, 5342, 5397, 5445, 5504, 5546],
  widths: [47, 44, 29, 40, 44, 48, 47, 45, 48, 47, 47, 45, 48, 41, 46, 50, 45, 37, 38, 52, 44, 29, 29, 45, 38, 30, 29, 48, 42, 37, 35, 44, 41, 37, 40, 44, 40, 45, 44, 42, 44, 45, 44, 42, 44, 48, 57, 59, 55, 43, 42, 42, 41, 42, 50, 49, 49, 48, 49, 50, 42, 42, 41, 41, 41, 41, 70, 64, 64, 65, 65, 65, 50, 37, 59, 38, 60, 68, 43, 48, 48, 48, 46, 49, 49, 41, 47, 49, 49, 50, 49, 47, 51, 52, 52, 52, 52, 52, 52, 42, 41, 41, 43, 41, 43, 42, 87, 73, 64, 55, 56, 59, 62, 55, 48, 59, 42, 43],
  heights: [76, 75, 73, 70, 71, 77, 75, 75, 80, 77, 75, 75, 80, 77, 77, 78, 79, 81, 79, 74, 76, 72, 71, 70, 73, 75, 74, 71, 71, 72, 72, 70, 72, 78, 78, 73, 73, 76, 74, 72, 72, 76, 74, 71, 72, 60, 55, 49, 47, 45, 60, 56, 57, 52, 73, 75, 76, 77, 76, 75, 71, 72, 73, 74, 73, 72, 63, 64, 62, 66, 79, 78, 73, 66, 70, 66, 56, 47, 75, 73, 73, 72, 76, 73, 73, 71, 67, 67, 66, 72, 66, 63, 63, 64, 65, 65, 65, 65, 65, 62, 63, 64, 64, 64, 64, 64, 62, 71, 69, 75, 73, 75, 56, 75, 70, 70, 68, 70],
  bodyOffsets: [[1, -31], [1, -31], [1, -31], [-1, -31], [-1, -31], [-1, -31], [2, -31], [2, -31], [2, -31], [1, -31], [1, -31], [1, -31], [0, -29], [0, -29], [0, -29], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [1, -31], [1, -31], [1, -31], [-1, -29], [0, -29], [-1, -27], [0, -26], [0, -29], [0, -29], [1, -27], [-1, -26], [2, -30], [1, -29], [1, -27], [2, -27], [2, -28], [-2, -28], [-1, -29], [-1, -29], [2, -31], [0, -30], [-4, -29], [-1, -28], [-1, -29], [-2, -29], [-4, -28], [2, -29], [0, -28], [-1, -27], [-1, -26], [1, -26], [0, -25], [-1, -24], [-1, -24], [-1, -25], [1, -26], [0, -26], [0, -25], [1, -26], [1, -26], [1, -26], [1, -25], [0, -26], [1, -28], [2, -27], [1, -26], [0, -26], [1, -25], [1, -24], [1, -24], [1, -25], [-1, -31], [1, -30], [5, -29], [1, -28], [1, -29], [3, -29], [4, -28], [-2, -29], [-1, -30], [-1, -29], [-1, -27], [-1, -27], [-1, -28], [2, -28], [1, -29], [1, -29], [-1, -10], [-1, -10], [-1, -10], [-5, -12], [-5, -12], [-5, -12], [-9, -13], [-9, -13], [-9, -13], [-8, -12], [-8, -12], [-8, -12], [-1, -13], [-1, -13], [-1, -13], [9, -12], [9, -12], [9, -12], [10, -13], [10, -13], [10, -13], [6, -12], [6, -12], [6, -12], [-3, -24], [-3, -22], [-3, -24], [-3, -24], [-3, -22], [-3, -24], [-4, -25], [-5, -23], [-4, -25], [-4, -25], [-5, -23], [-4, -25], [5, -25], [5, -23], [5, -25], [5, -25], [5, -23], [5, -25], [3, -24], [3, -22], [3, -24], [3, -24], [3, -22], [3, -24], [2, -28], [2, -29], [2, -30], [1, -30], [2, -30], [2, -29], [2, -28], [2, -29], [2, -30], [1, -30], [2, -30], [2, -29], [4, -31], [4, -32], [5, -32], [5, -33], [5, -32], [5, -32], [4, -31], [4, -32], [5, -32], [5, -33], [5, -32], [5, -32], [-4, -31], [-4, -32], [-4, -32], [-4, -33], [-4, -32], [-4, -32], [-4, -31], [-4, -32], [-4, -32], [-4, -33], [-4, -32], [-4, -32], [-2, -28], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [-2, -29], [-2, -28], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [-2, -29], [-6, -31], [-2, -32], [-1, -33], [-1, -31], [-1, -31], [-6, -31], [-2, -32], [-1, -33], [-1, -31], [-1, -31], [1, -23], [12, -29], [13, -29], [1, -31], [1, -31], [1, -23], [12, -29], [13, -29], [1, -31], [1, -31], [0, -23], [-11, -29], [-12, -29], [-1, -31], [-1, -31], [0, -23], [-11, -29], [-12, -29], [-1, -31], [-1, -31], [6, -31], [2, -32], [1, -33], [1, -31], [1, -31], [6, -31], [2, -32], [1, -33], [1, -31], [1, -31], [8, -30], [10, -30], [8, -30], [8, -30], [10, -30], [8, -30], [0, -29], [2, -29], [0, -29], [0, -29], [2, -29], [0, -29], [1, -29], [-1, -29], [1, -29], [1, -29], [-1, -29], [1, -29], [-8, -30], [-10, -30], [-8, -30], [-8, -30], [-10, -30], [-8, -30], [16, -30], [16, -30], [4, -26], [4, -26], [-4, -26], [-4, -26], [-15, -30], [-15, -30], [1, 0], [1, 0], [-2, 1], [-2, 1], [2, 1], [2, 1], [-1, 0], [-1, 0], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [-1, -31], [2, -30], [-4, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [0, -30], [1, -29], [1, -29], [2, -30], [-4, -28], [-2, -28], [-2, -28], [-2, -28], [-2, -28], [0, -30], [1, -29], [1, -29], [4, -29], [6, -24], [7, -24], [7, -24], [7, -24], [7, -24], [8, -27], [9, -24], [8, -22], [4, -29], [6, -24], [7, -24], [7, -24], [7, -24], [7, -24], [8, -27], [9, -24], [8, -22], [-3, -29], [-5, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-8, -27], [-8, -24], [-7, -22], [-3, -29], [-5, -24], [-6, -24], [-6, -24], [-6, -24], [-6, -24], [-8, -27], [-8, -24], [-7, -22], [-1, -30], [4, -28], [2, -28], [2, -28], [2, -28], [2, -28], [0, -30], [0, -29], [0, -29], [-1, -30], [4, -28], [2, -28], [2, -28], [2, -28], [2, -28], [0, -30], [0, -29], [0, -29], [3, -31], [3, -31], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -31], [3, -31], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [3, -32], [6, -29], [6, -29], [8, -28], [8, -29], [10, -29], [8, -29], [10, -29], [8, -29], [6, -29], [6, -29], [8, -28], [8, -29], [10, -29], [8, -29], [10, -29], [8, -29], [-6, -29], [-6, -29], [-7, -28], [-7, -29], [-9, -29], [-7, -29], [-9, -29], [-8, -29], [-6, -29], [-6, -29], [-7, -28], [-7, -29], [-9, -29], [-7, -29], [-9, -29], [-8, -29], [-2, -31], [-2, -31], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-2, -31], [-2, -31], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [-3, -32], [6, -25], [4, -29], [10, -28], [4, -30], [1, -33], [2, -34], [6, -25], [4, -29], [10, -28], [4, -30], [1, -33], [2, -34], [-4, -21], [-4, -24], [-4, -30], [-11, -30], [-2, -33], [-2, -34], [-4, -21], [-4, -24], [-4, -30], [-11, -30], [-2, -33], [-2, -34], [4, -21], [5, -24], [4, -30], [12, -30], [2, -33], [3, -34], [4, -21], [5, -24], [4, -30], [12, -30], [2, -33], [3, -34], [-5, -25], [-3, -29], [-10, -28], [-3, -30], [-1, -33], [-1, -34], [-5, -25], [-3, -29], [-10, -28], [-3, -30], [-1, -33], [-1, -34]],
  anchorHead: [[0, -61], [-5, -62], [6, -62], [-5, -62], [-5, -62], [-1, -61], [-5, -62], [12, -78], [-5, -62], [12, -78], [12, -77], [-5, -62], [12, -77], [-11, -78], [12, -78], [-11, -78], [6, -62], [12, -77], [6, -62], [6, -62], [-11, -78], [6, -62], [0, -61], [6, -62], [0, -60], [0, -59], [0, -57], [0, -58], [0, -60], [0, -59], [0, -57], [0, -58], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [12, -76], [12, -75], [12, -73], [12, -74], [12, -76], [12, -75], [12, -73], [12, -74], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [6, -61], [6, -60], [6, -58], [6, -59], [0, -33], [-5, -34], [6, -34], [-5, -34], [-5, -34], [0, -33], [-5, -34], [12, -50], [-5, -34], [12, -50], [12, -49], [-5, -34], [12, -49], [-11, -50], [12, -50], [-11, -50], [6, -34], [12, -49], [6, -34], [6, -34], [-11, -50], [6, -34], [0, -33], [6, -34], [-14, -64], [-16, -46], [-14, -64], [-14, -64], [-16, -46], [-14, -64], [-11, -68], [-9, -49], [-11, -68], [-11, -68], [-9, -49], [-11, -68], [12, -68], [10, -49], [12, -68], [12, -68], [10, -49], [12, -68], [15, -64], [17, -46], [15, -64], [15, -64], [17, -46], [15, -64], [-3, -57], [-3, -59], [-3, -60], [-3, -61], [-3, -60], [-3, -59], [-3, -57], [-3, -59], [-3, -60], [-3, -61], [-3, -60], [-3, -59], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [4, -57], [4, -59], [4, -60], [4, -61], [4, -60], [4, -59], [4, -57], [4, -59], [4, -60], [4, -61], [4, -60], [4, -59], [0, -56], [6, -57], [7, -57], [-5, -62], [-5, -62], [0, -56], [6, -57], [7, -57], [-5, -62], [-5, -62], [20, -65], [28, -66], [29, -65], [12, -78], [12, -78], [20, -65], [28, -66], [29, -65], [12, -78], [12, -78], [-19, -65], [-27, -66], [-28, -65], [-11, -78], [-11, -78], [-19, -65], [-27, -66], [-28, -65], [-11, -78], [-11, -78], [1, -56], [-5, -57], [-6, -57], [6, -62], [6, -62], [1, -56], [-5, -57], [-6, -57], [6, -62], [6, -62], [19, -74], [22, -74], [19, -74], [19, -74], [22, -74], [19, -74], [11, -79], [15, -79], [11, -79], [11, -79], [15, -79], [11, -79], [-10, -79], [-14, -79], [-10, -79], [-10, -79], [-14, -79], [-10, -79], [-18, -74], [-21, -74], [-18, -74], [-18, -74], [-21, -74], [-18, -74], [34, -72], [34, -72], [19, -74], [19, -74], [-18, -74], [-18, -74], [-33, -72], [-33, -72], [36, -22], [36, -22], [39, 20], [39, 20], [-38, 20], [-38, 20], [-35, -22], [-35, -22], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-5, -62], [-3, -61], [1, -57], [2, -56], [2, -55], [2, -55], [2, -55], [5, -56], [3, -58], [3, -57], [-3, -61], [1, -57], [2, -56], [2, -55], [2, -55], [2, -55], [5, -56], [3, -58], [3, -57], [14, -76], [24, -71], [26, -70], [26, -69], [26, -69], [26, -69], [28, -70], [28, -70], [26, -69], [14, -76], [24, -71], [26, -70], [26, -69], [26, -69], [26, -69], [28, -70], [28, -70], [26, -69], [-13, -76], [-23, -71], [-25, -70], [-25, -69], [-25, -69], [-25, -69], [-27, -70], [-27, -70], [-25, -69], [-13, -76], [-23, -71], [-25, -70], [-25, -69], [-25, -69], [-25, -69], [-27, -70], [-27, -70], [-25, -69], [4, -61], [0, -57], [-1, -56], [-1, -55], [-1, -55], [-1, -55], [-4, -56], [-2, -58], [-2, -57], [4, -61], [0, -57], [-1, -56], [-1, -55], [-1, -55], [-1, -55], [-4, -56], [-2, -58], [-2, -57], [2, -56], [2, -56], [3, -57], [3, -58], [4, -58], [3, -58], [4, -58], [3, -58], [2, -56], [2, -56], [3, -57], [3, -58], [4, -58], [3, -58], [4, -58], [3, -58], [23, -73], [23, -73], [27, -73], [27, -74], [29, -74], [28, -74], [29, -74], [28, -74], [23, -73], [23, -73], [27, -73], [27, -74], [29, -74], [28, -74], [29, -74], [28, -74], [-22, -73], [-22, -73], [-26, -73], [-26, -74], [-28, -74], [-27, -74], [-28, -74], [-27, -74], [-22, -73], [-22, -73], [-26, -73], [-26, -74], [-28, -74], [-27, -74], [-28, -74], [-27, -74], [-1, -56], [-1, -56], [-2, -57], [-2, -58], [-3, -58], [-2, -58], [-3, -58], [-2, -58], [-1, -56], [-1, -56], [-2, -57], [-2, -58], [-3, -58], [-2, -58], [-3, -58], [-2, -58], [-6, -38], [5, -59], [7, -56], [7, -61], [-4, -63], [-4, -65], [-6, -38], [5, -59], [7, -56], [7, -61], [-4, -63], [-4, -65], [11, -54], [15, -68], [13, -77], [13, -77], [14, -79], [14, -81], [11, -54], [15, -68], [13, -77], [13, -77], [14, -79], [14, -81], [-10, -54], [-14, -68], [-12, -77], [-12, -77], [-13, -79], [-13, -81], [-10, -54], [-14, -68], [-12, -77], [-12, -77], [-13, -79], [-13, -81], [7, -38], [-4, -59], [-6, -56], [-6, -61], [5, -63], [5, -65], [7, -38], [-4, -59], [-6, -56], [-6, -61], [5, -63], [5, -65]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 1, 1, 66, 67, 68, 1, 1, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 69, 70, 71, 3, 3, 66, 67, 68, 1, 1, 66, 67, 68, 1, 1, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 74, 74, 75, 75, 75, 75, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 1, 1, 1, 1, 1, 1, 1, 1, 78, 79, 80, 81, 81, 81, 82, 83, 84, 78, 79, 80, 81, 81, 81, 82, 83, 84, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 85, 86, 87, 88, 88, 88, 89, 90, 91, 78, 79, 80, 81, 81, 81, 82, 83, 84, 78, 79, 80, 81, 81, 81, 82, 83, 84, 92, 92, 93, 94, 95, 96, 97, 98, 92, 92, 93, 94, 95, 96, 97, 98, 99, 99, 100, 101, 102, 103, 104, 105, 99, 99, 100, 101, 102, 103, 104, 105, 99, 99, 100, 101, 102, 103, 104, 105, 99, 99, 100, 101, 102, 103, 104, 105, 92, 92, 93, 94, 95, 96, 97, 98, 92, 92, 93, 94, 95, 96, 97, 98, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111]
};

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 82, 115, 152, 194, 233, 272, 308, 347, 386, 425, 461, 500, 532, 576, 619, 655, 688, 725, 761, 795, 817, 856, 898, 933, 956, 996, 1038, 1074, 1101, 1131, 1164, 1193, 1227, 1267, 1308, 1341, 1380, 1419, 1456, 1495, 1534, 1573, 1610, 1649, 1691, 1748, 1809, 1859, 1904, 1942, 1980, 2018, 2058, 2104, 2150, 2197, 2245, 2294, 2342, 2383, 2422, 2461, 2502, 2545, 2587, 2629, 2668, 2728, 2784, 2825, 2870, 2918, 2964, 3004, 3045, 3085, 3125, 3178, 3237, 3286, 3342, 3395, 3456, 3517, 3578, 3627, 3678, 3728, 3775, 3822, 3869, 3916, 3967, 4015, 4068, 4120, 4169, 4209, 4247, 4285, 4333, 4383, 4434, 4473, 4513, 4565, 4617, 4666, 4697, 4726, 4761, 4794],
  widths: [44, 38, 33, 37, 42, 39, 39, 36, 39, 39, 39, 36, 39, 32, 44, 43, 36, 33, 37, 36, 34, 22, 39, 42, 35, 23, 40, 42, 36, 27, 30, 33, 29, 34, 40, 41, 33, 39, 39, 37, 39, 39, 39, 37, 39, 42, 57, 61, 50, 45, 38, 38, 38, 40, 46, 46, 47, 48, 49, 48, 41, 39, 39, 41, 43, 42, 42, 39, 60, 56, 41, 45, 48, 46, 40, 41, 40, 40, 53, 59, 49, 56, 53, 61, 61, 61, 49, 51, 50, 47, 47, 47, 47, 51, 48, 53, 52, 49, 40, 38, 38, 48, 50, 51, 39, 40, 52, 52, 49, 31, 29, 35, 33, 33],
  heights: [71, 69, 70, 70, 68, 71, 71, 73, 74, 71, 71, 73, 74, 71, 68, 66, 68, 68, 68, 70, 71, 70, 69, 67, 66, 67, 64, 65, 68, 70, 69, 67, 64, 66, 64, 63, 67, 67, 70, 66, 64, 67, 70, 66, 64, 61, 51, 45, 44, 43, 63, 50, 60, 51, 68, 69, 70, 70, 69, 68, 66, 67, 68, 68, 67, 66, 77, 76, 61, 59, 80, 80, 68, 65, 64, 66, 64, 61, 49, 44, 67, 66, 66, 61, 60, 59, 70, 71, 67, 63, 63, 62, 69, 70, 74, 68, 68, 69, 70, 79, 86, 77, 72, 72, 68, 68, 69, 69, 69, 69, 69, 73, 73, 73],
  bodyOffsets: [[3, -24], [3, -24], [3, -24], [-1, -25], [-1, -25], [-1, -25], [-4, -25], [-4, -25], [-4, -25], [-2, -26], [-2, -26], [-2, -26], [-1, -26], [-1, -26], [-1, -26], [0, -26], [0, -26], [0, -26], [3, -25], [3, -25], [3, -25], [1, -25], [1, -25], [1, -25], [1, -23], [1, -22], [1, -19], [1, -20], [1, -23], [1, -22], [0, -19], [1, -20], [1, -23], [-4, -24], [-2, -23], [0, -23], [1, -25], [0, -24], [0, -21], [0, -21], [-1, -24], [-5, -23], [-2, -22], [0, -24], [0, -25], [-7, -26], [-2, -23], [0, -23], [1, -25], [-1, -24], [1, -23], [0, -26], [-3, -27], [-4, -27], [-1, -25], [0, -24], [1, -24], [1, -22], [1, -22], [1, -24], [1, -24], [1, -22], [1, -22], [1, -24], [0, -25], [1, -24], [0, -23], [1, -26], [3, -27], [4, -27], [2, -25], [1, -24], [1, -24], [6, -23], [2, -22], [1, -24], [1, -25], [7, -26], [2, -23], [0, -23], [-1, -23], [4, -24], [3, -23], [0, -23], [0, -25], [1, -24], [0, -21], [0, -21], [0, -4], [0, -4], [0, -4], [-6, -10], [-6, -10], [-6, -10], [-10, -11], [-10, -11], [-10, -11], [-5, -14], [-5, -14], [-5, -14], [1, -16], [1, -16], [1, -16], [6, -14], [6, -14], [6, -14], [12, -11], [12, -11], [12, -11], [8, -10], [8, -10], [8, -10], [-1, -22], [-1, -16], [-1, -22], [-1, -22], [-1, -16], [-1, -22], [-2, -21], [-3, -16], [-2, -21], [-2, -21], [-3, -16], [-2, -21], [2, -21], [3, -16], [2, -21], [2, -21], [3, -16], [2, -21], [1, -22], [1, -16], [1, -22], [1, -22], [1, -16], [1, -22], [-3, -17], [-3, -17], [-3, -18], [-4, -18], [-4, -17], [-4, -17], [-3, -17], [-3, -17], [-3, -18], [-4, -18], [-4, -17], [-4, -17], [-4, -17], [-3, -17], [-3, -18], [-4, -18], [-4, -17], [-5, -17], [-4, -17], [-3, -17], [-3, -18], [-4, -18], [-4, -17], [-5, -17], [5, -17], [4, -17], [4, -18], [5, -18], [5, -17], [5, -17], [5, -17], [4, -17], [4, -18], [5, -18], [5, -17], [5, -17], [3, -17], [3, -17], [4, -18], [4, -18], [5, -17], [4, -17], [3, -17], [3, -17], [4, -18], [4, -18], [5, -17], [4, -17], [-3, -17], [-1, -26], [1, -28], [-10, -10], [-11, -9], [-3, -17], [-1, -26], [1, -28], [-10, -10], [-11, -9], [-4, -17], [-2, -24], [2, -24], [-8, -18], [-7, -19], [-4, -17], [-2, -24], [2, -24], [-8, -18], [-7, -19], [5, -17], [3, -24], [-1, -24], [8, -18], [7, -19], [5, -17], [3, -24], [-1, -24], [8, -18], [7, -19], [3, -17], [1, -26], [0, -28], [10, -10], [11, -9], [3, -17], [1, -26], [0, -28], [10, -10], [11, -9], [4, -23], [7, -24], [4, -23], [4, -23], [7, -24], [4, -23], [6, -17], [9, -17], [6, -17], [6, -17], [9, -17], [6, -17], [-5, -17], [-8, -17], [-5, -17], [-5, -17], [-8, -17], [-5, -17], [-4, -23], [-7, -24], [-4, -23], [-4, -23], [-7, -24], [-4, -23], [10, -23], [10, -23], [9, -14], [9, -14], [-9, -14], [-9, -14], [-10, -23], [-10, -23], [3, 7], [3, 7], [-5, 7], [-5, 7], [6, 7], [6, 7], [-2, 7], [-2, 7], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-1, -25], [-3, -17], [1, -21], [4, -23], [4, -23], [-6, -18], [-14, -15], [-14, -15], [-14, -14], [-14, -14], [-3, -17], [1, -21], [4, -23], [4, -23], [-6, -18], [-14, -15], [-14, -15], [-14, -14], [-14, -14], [-4, -17], [2, -19], [4, -19], [4, -19], [-3, -17], [-5, -15], [-5, -15], [-5, -15], [-5, -15], [-4, -17], [2, -19], [4, -19], [4, -19], [-3, -17], [-5, -15], [-5, -15], [-5, -15], [-5, -15], [5, -17], [-1, -19], [-3, -19], [-3, -19], [3, -17], [6, -15], [6, -15], [6, -15], [6, -15], [5, -17], [-1, -19], [-3, -19], [-3, -19], [3, -17], [6, -15], [6, -15], [6, -15], [6, -15], [3, -17], [0, -21], [-4, -23], [-4, -23], [7, -18], [15, -15], [15, -15], [15, -14], [15, -14], [3, -17], [0, -21], [-4, -23], [-4, -23], [7, -18], [15, -15], [15, -15], [15, -14], [15, -14], [-3, -17], [-6, -18], [-6, -20], [-3, -17], [-2, -17], [-2, -17], [-2, -17], [1, -17], [-3, -17], [-6, -18], [-6, -20], [-3, -17], [-2, -17], [-2, -17], [-2, -17], [1, -17], [-4, -15], [-4, -19], [-4, -23], [1, -19], [2, -16], [2, -16], [2, -16], [3, -15], [-4, -15], [-4, -19], [-4, -23], [1, -19], [2, -16], [2, -16], [2, -16], [3, -15], [4, -15], [4, -19], [4, -23], [-1, -19], [-2, -16], [-2, -16], [-2, -16], [-2, -15], [4, -15], [4, -19], [4, -23], [-1, -19], [-2, -16], [-2, -16], [-2, -16], [-2, -15], [4, -17], [7, -18], [6, -20], [4, -17], [2, -17], [2, -17], [2, -17], [0, -17], [4, -17], [7, -18], [6, -20], [4, -17], [2, -17], [2, -17], [2, -17], [0, -17], [0, -26], [0, -26], [-6, -26], [-5, -26], [-6, -26], [0, -26], [0, -26], [-6, -26], [-5, -26], [-6, -26], [-2, -25], [-2, -25], [-3, -27], [-3, -27], [-3, -27], [-2, -25], [-2, -25], [-3, -27], [-3, -27], [-3, -27], [3, -25], [3, -25], [4, -27], [4, -27], [4, -27], [3, -25], [3, -25], [4, -27], [4, -27], [4, -27], [1, -26], [0, -26], [6, -26], [5, -26], [7, -26], [1, -26], [0, -26], [6, -26], [5, -26], [7, -26]],
  anchorHead: [[1, -56], [-3, -57], [5, -57], [-4, -57], [-4, -57], [1, -56], [-4, -57], [11, -73], [-4, -57], [11, -73], [11, -72], [-6, -57], [12, -72], [-10, -73], [12, -73], [-11, -73], [4, -57], [10, -72], [4, -57], [4, -57], [-12, -73], [5, -57], [1, -56], [5, -57], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [13, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [1, -30], [-3, -31], [6, -31], [-3, -31], [-3, -31], [2, -31], [-3, -31], [13, -47], [-3, -31], [12, -47], [12, -46], [-4, -31], [12, -46], [-10, -47], [12, -47], [-10, -47], [6, -31], [12, -46], [6, -31], [6, -31], [-10, -47], [5, -31], [0, -30], [5, -31], [-3, -71], [-11, -39], [-3, -71], [-3, -71], [-11, -39], [-3, -71], [-7, -64], [-6, -41], [-7, -64], [-7, -64], [-6, -41], [-7, -64], [8, -64], [7, -41], [8, -64], [8, -64], [7, -41], [8, -64], [4, -71], [12, -39], [4, -71], [4, -71], [12, -39], [4, -71], [-5, -48], [-5, -49], [-5, -50], [-5, -50], [-5, -49], [-5, -48], [-5, -48], [-5, -49], [-5, -50], [-5, -50], [-5, -49], [-5, -48], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [6, -48], [6, -49], [6, -50], [6, -50], [6, -49], [6, -48], [6, -48], [6, -49], [6, -50], [6, -50], [6, -49], [6, -48], [-5, -48], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [-5, -48], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [12, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [12, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [-11, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [-11, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [6, -48], [5, -50], [2, -51], [23, -37], [26, -35], [6, -48], [5, -50], [2, -51], [23, -37], [26, -35], [14, -67], [21, -68], [14, -67], [14, -67], [21, -68], [14, -67], [11, -68], [18, -67], [11, -68], [11, -68], [18, -67], [11, -68], [-10, -68], [-17, -67], [-10, -68], [-10, -68], [-17, -67], [-10, -68], [-13, -67], [-20, -68], [-13, -67], [-13, -67], [-20, -68], [-13, -67], [26, -66], [26, -66], [22, -61], [22, -61], [-21, -61], [-21, -61], [-25, -66], [-25, -66], [39, -13], [39, -13], [32, 28], [32, 28], [-31, 28], [-31, 28], [-38, -13], [-38, -13], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-5, -48], [-3, -51], [-2, -52], [-2, -52], [-17, -47], [-33, -42], [-34, -41], [-36, -39], [-36, -39], [-5, -48], [-3, -51], [-2, -52], [-2, -52], [-17, -47], [-33, -42], [-34, -41], [-36, -39], [-36, -39], [11, -64], [16, -65], [18, -66], [18, -66], [2, -63], [-2, -60], [-3, -60], [-4, -59], [-4, -59], [11, -64], [16, -65], [18, -66], [18, -66], [2, -63], [-2, -60], [-3, -60], [-4, -59], [-4, -59], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [-1, -63], [3, -60], [4, -60], [5, -59], [5, -59], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [-1, -63], [3, -60], [4, -60], [5, -59], [5, -59], [6, -48], [4, -51], [3, -52], [3, -52], [18, -47], [34, -42], [35, -41], [37, -39], [37, -39], [6, -48], [4, -51], [3, -52], [3, -52], [18, -47], [34, -42], [35, -41], [37, -39], [37, -39], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [14, -62], [14, -63], [14, -64], [17, -61], [19, -59], [19, -59], [19, -59], [22, -58], [14, -62], [14, -63], [14, -64], [17, -61], [19, -59], [19, -59], [19, -59], [22, -58], [-13, -62], [-13, -63], [-13, -64], [-16, -61], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [-13, -62], [-13, -63], [-13, -64], [-16, -61], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [-3, -56], [-3, -56], [-4, -57], [-4, -57], [-4, -57], [-3, -56], [-3, -56], [-4, -57], [-4, -57], [-4, -57], [10, -73], [11, -73], [9, -74], [9, -74], [9, -74], [10, -73], [11, -73], [9, -74], [9, -74], [9, -74], [-9, -73], [-10, -73], [-8, -74], [-8, -74], [-8, -74], [-9, -73], [-10, -73], [-8, -74], [-8, -74], [-8, -74], [4, -56], [4, -56], [5, -57], [5, -57], [5, -57], [4, -56], [4, -56], [5, -57], [5, -57], [5, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108]
};

/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 47, 92, 125, 167, 209, 256, 304, 351, 398, 445, 493, 540, 587, 630, 673, 718, 761, 803, 843, 885, 925, 956, 987, 1032, 1071, 1101, 1131, 1175, 1214, 1253, 1295, 1336, 1378, 1417, 1459, 1506, 1550, 1594, 1637, 1679, 1722, 1766, 1809, 1851, 1894, 1942, 1998, 2051, 2094, 2135, 2179, 2221, 2269, 2320, 2370, 2420, 2469, 2518, 2569, 2619, 2665, 2711, 2756, 2800, 2845, 2891, 2933, 2973, 3020, 3067, 3122, 3180, 3240, 3297, 3344, 3388, 3449, 3499, 3563, 3632, 3676, 3721, 3766, 3817, 3867, 3916, 3965, 4014, 4060, 4111, 4162, 4212, 4264, 4309, 4354, 4399, 4443, 4488, 4534, 4580, 4628, 4690, 4752, 4796, 4843, 4890, 4940, 4991, 5048, 5104, 5163],
  widths: [47, 45, 33, 42, 42, 47, 48, 47, 47, 47, 48, 47, 47, 43, 43, 45, 43, 42, 40, 42, 40, 31, 31, 45, 39, 30, 30, 44, 39, 39, 42, 41, 42, 39, 42, 47, 44, 44, 43, 42, 43, 44, 43, 42, 43, 48, 56, 53, 43, 41, 44, 42, 48, 51, 50, 50, 49, 49, 51, 50, 46, 46, 45, 44, 45, 46, 42, 40, 47, 47, 55, 58, 60, 57, 47, 44, 61, 50, 64, 69, 44, 45, 45, 51, 50, 49, 49, 49, 46, 51, 51, 50, 52, 45, 45, 45, 44, 45, 46, 46, 48, 62, 62, 44, 47, 47, 50, 51, 57, 56, 59, 51],
  heights: [73, 74, 71, 74, 74, 73, 74, 75, 76, 73, 74, 75, 76, 75, 73, 69, 72, 71, 72, 71, 75, 72, 71, 69, 69, 69, 67, 69, 71, 77, 78, 76, 74, 73, 75, 74, 74, 72, 74, 74, 73, 72, 75, 75, 73, 60, 56, 53, 57, 60, 70, 58, 67, 60, 75, 76, 77, 78, 79, 78, 75, 76, 77, 78, 77, 76, 80, 80, 71, 72, 79, 78, 67, 63, 73, 67, 69, 62, 60, 51, 73, 73, 70, 71, 75, 81, 80, 80, 70, 69, 67, 67, 67, 74, 74, 74, 73, 69, 70, 69, 67, 67, 67, 73, 72, 72, 71, 70, 72, 72, 72, 82],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [1, -25], [-1, -25], [-1, -25], [-1, -25], [0, -25], [0, -25], [0, -25], [0, -26], [0, -26], [0, -26], [1, -25], [0, -25], [0, -22], [0, -23], [0, -25], [0, -25], [1, -22], [1, -23], [1, -23], [1, -23], [0, -23], [1, -23], [1, -25], [0, -24], [1, -22], [0, -21], [2, -24], [3, -23], [-3, -22], [0, -23], [2, -25], [2, -25], [-3, -22], [0, -22], [2, -22], [0, -21], [1, -20], [0, -22], [2, -24], [0, -22], [-1, -21], [-1, -22], [0, -23], [1, -22], [0, -21], [1, -22], [1, -23], [1, -21], [1, -20], [1, -22], [-1, -22], [0, -21], [0, -20], [0, -22], [-1, -24], [0, -22], [2, -21], [1, -22], [-1, -24], [-2, -23], [4, -22], [1, -23], [-2, -25], [-2, -25], [3, -22], [1, -22], [0, -23], [0, -23], [1, -23], [0, -23], [-1, -25], [0, -24], [-1, -22], [0, -21], [0, -18], [0, -18], [0, -18], [-2, -19], [-2, -19], [-2, -19], [-4, -18], [-4, -18], [-4, -18], [1, -16], [1, -16], [1, -16], [1, -15], [1, -15], [1, -15], [0, -16], [0, -16], [0, -16], [5, -18], [5, -18], [5, -18], [2, -19], [2, -19], [2, -19], [0, -24], [-2, -18], [0, -24], [0, -24], [-2, -18], [0, -24], [-1, -21], [-2, -18], [-1, -21], [-1, -21], [-2, -18], [-1, -21], [1, -21], [3, -18], [1, -21], [1, -21], [3, -18], [1, -21], [0, -24], [2, -18], [0, -24], [0, -24], [2, -18], [0, -24], [-3, -24], [-3, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [-3, -24], [-3, -25], [-2, -25], [-2, -26], [-2, -26], [-2, -26], [1, -25], [1, -26], [2, -26], [1, -27], [2, -26], [1, -26], [1, -25], [1, -26], [2, -26], [1, -27], [2, -26], [1, -26], [-1, -25], [-1, -26], [-1, -26], [-1, -27], [-1, -26], [-1, -26], [-1, -25], [-1, -26], [-1, -26], [-1, -27], [-1, -26], [-1, -26], [3, -24], [3, -25], [3, -25], [3, -26], [3, -26], [2, -26], [3, -24], [3, -25], [3, -25], [3, -26], [3, -26], [2, -26], [1, -26], [-3, -36], [-4, -37], [-9, -18], [-8, -19], [1, -26], [-3, -36], [-4, -37], [-9, -18], [-8, -19], [1, -25], [2, -30], [3, -30], [-7, -26], [-8, -24], [1, -25], [2, -30], [3, -30], [-7, -26], [-8, -24], [-1, -25], [-1, -30], [-3, -30], [7, -26], [9, -24], [-1, -25], [-1, -30], [-3, -30], [7, -26], [9, -24], [0, -26], [3, -36], [4, -37], [10, -18], [9, -19], [0, -26], [3, -36], [4, -37], [10, -18], [9, -19], [3, -24], [6, -22], [3, -24], [3, -24], [6, -22], [3, -24], [2, -18], [5, -16], [2, -18], [2, -18], [5, -16], [2, -18], [-2, -18], [-5, -16], [-2, -18], [-2, -18], [-5, -16], [-2, -18], [-2, -24], [-5, -22], [-2, -24], [-2, -24], [-5, -22], [-2, -24], [10, -22], [10, -22], [6, -15], [6, -15], [-6, -15], [-6, -15], [-9, -22], [-9, -22], [-5, 1], [-5, 1], [-2, 0], [-2, 0], [3, 0], [3, 0], [5, 1], [5, 1], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -25], [3, -25], [3, -24], [3, -24], [-1, -23], [-2, -25], [-2, -28], [-2, -28], [-2, -28], [1, -25], [3, -25], [3, -24], [3, -24], [-1, -23], [-2, -25], [-2, -28], [-2, -28], [-2, -28], [0, -24], [-2, -23], [-2, -22], [-2, -22], [-3, -22], [-10, -25], [-6, -29], [-6, -29], [-6, -29], [0, -24], [-2, -23], [-2, -22], [-2, -22], [-3, -22], [-10, -25], [-6, -29], [-6, -29], [-6, -29], [0, -24], [3, -23], [3, -22], [3, -22], [3, -22], [10, -25], [7, -29], [7, -29], [7, -29], [0, -24], [3, -23], [3, -22], [3, -22], [3, -22], [10, -25], [7, -29], [7, -29], [7, -29], [-1, -25], [-2, -25], [-2, -24], [-2, -24], [2, -23], [2, -25], [3, -28], [3, -28], [3, -28], [-1, -25], [-2, -25], [-2, -24], [-2, -24], [2, -23], [2, -25], [3, -28], [3, -28], [3, -28], [-2, -25], [1, -29], [1, -32], [1, -32], [1, -31], [-3, -30], [-12, -23], [-12, -23], [-2, -25], [1, -29], [1, -32], [1, -32], [1, -31], [-3, -30], [-12, -23], [-12, -23], [2, -24], [3, -24], [5, -24], [5, -24], [2, -23], [0, -23], [-10, -24], [-10, -24], [2, -24], [3, -24], [5, -24], [5, -24], [2, -23], [0, -23], [-10, -24], [-10, -24], [-2, -24], [-2, -24], [-4, -24], [-4, -24], [-2, -23], [1, -23], [11, -24], [10, -24], [-2, -24], [-2, -24], [-4, -24], [-4, -24], [-2, -23], [1, -23], [11, -24], [10, -24], [2, -25], [0, -29], [-1, -32], [-1, -32], [-1, -31], [3, -30], [12, -23], [12, -23], [2, -25], [0, -29], [-1, -32], [-1, -32], [-1, -31], [3, -30], [12, -23], [12, -23], [-1, -20], [1, -25], [3, -24], [-1, -23], [-2, -28], [-2, -28], [-1, -20], [1, -25], [3, -24], [-1, -23], [-2, -28], [-2, -28], [-2, -22], [0, -24], [-2, -22], [-3, -22], [-6, -29], [-6, -29], [-2, -22], [0, -24], [-2, -22], [-3, -22], [-6, -29], [-6, -29], [3, -22], [0, -24], [3, -22], [3, -22], [7, -29], [7, -29], [3, -22], [0, -24], [3, -22], [3, -22], [7, -29], [7, -29], [2, -20], [-1, -25], [-2, -24], [2, -23], [3, -28], [3, -28], [2, -20], [-1, -25], [-2, -24], [2, -23], [3, -28], [3, -28]],
  anchorHead: [[1, -57], [-5, -58], [6, -58], [-5, -58], [-4, -58], [1, -57], [-4, -58], [12, -74], [-5, -58], [12, -74], [12, -73], [-4, -58], [12, -73], [-11, -74], [12, -74], [-11, -74], [5, -58], [11, -73], [5, -58], [6, -58], [-11, -74], [6, -58], [1, -57], [5, -58], [1, -56], [1, -55], [1, -53], [1, -54], [1, -56], [1, -55], [1, -53], [1, -54], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [1, -41], [-4, -42], [5, -42], [-4, -42], [-3, -42], [1, -41], [-3, -42], [12, -58], [-4, -42], [12, -58], [12, -57], [-3, -42], [12, -57], [-11, -58], [12, -58], [-11, -58], [5, -42], [11, -57], [4, -42], [5, -42], [-11, -58], [5, -42], [1, -41], [4, -42], [-6, -67], [-13, -40], [-6, -67], [-6, -67], [-13, -40], [-6, -67], [-12, -67], [-12, -46], [-12, -67], [-12, -67], [-12, -46], [-12, -67], [13, -67], [13, -46], [13, -67], [13, -67], [13, -46], [13, -67], [7, -67], [14, -40], [7, -67], [7, -67], [14, -40], [7, -67], [-5, -58], [-5, -59], [-5, -60], [-5, -61], [-5, -61], [-5, -60], [-5, -58], [-5, -59], [-5, -60], [-5, -61], [-5, -61], [-5, -60], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -76], [11, -75], [11, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -76], [-10, -75], [-10, -74], [6, -58], [6, -59], [6, -60], [6, -61], [6, -61], [6, -60], [6, -58], [6, -59], [6, -60], [6, -61], [6, -61], [6, -60], [-5, -58], [-5, -62], [-6, -63], [-19, -43], [-18, -42], [-5, -58], [-5, -62], [-6, -63], [-19, -43], [-18, -42], [12, -74], [16, -71], [17, -72], [2, -72], [0, -69], [12, -74], [16, -71], [17, -72], [2, -72], [0, -69], [-11, -74], [-15, -71], [-16, -72], [-1, -72], [1, -69], [-11, -74], [-15, -71], [-16, -72], [-1, -72], [1, -69], [6, -58], [6, -62], [7, -63], [20, -43], [19, -42], [6, -58], [6, -62], [7, -63], [20, -43], [19, -42], [17, -68], [24, -65], [17, -68], [17, -68], [24, -65], [17, -68], [14, -71], [19, -67], [14, -71], [14, -71], [19, -67], [14, -71], [-13, -71], [-18, -67], [-13, -71], [-13, -71], [-18, -67], [-13, -71], [-16, -68], [-23, -65], [-16, -68], [-16, -68], [-23, -65], [-16, -68], [31, -65], [31, -65], [21, -64], [21, -64], [-20, -64], [-20, -64], [-30, -65], [-30, -65], [28, -19], [28, -19], [40, 22], [40, 22], [-39, 22], [-39, 22], [-27, -19], [-27, -19], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-6, -56], [-4, -56], [-4, -53], [-4, -53], [-7, -55], [-9, -57], [-6, -58], [-6, -58], [-6, -58], [-6, -56], [-4, -56], [-4, -53], [-4, -53], [-7, -55], [-9, -57], [-6, -58], [-6, -58], [-6, -58], [11, -69], [8, -69], [9, -65], [9, -65], [7, -65], [3, -71], [7, -71], [8, -71], [8, -71], [11, -69], [8, -69], [9, -65], [9, -65], [7, -65], [3, -71], [7, -71], [8, -71], [8, -71], [-10, -69], [-7, -69], [-8, -65], [-8, -65], [-6, -65], [-2, -71], [-6, -71], [-7, -71], [-7, -71], [-10, -69], [-7, -69], [-8, -65], [-8, -65], [-6, -65], [-2, -71], [-6, -71], [-7, -71], [-7, -71], [7, -56], [5, -56], [5, -53], [5, -53], [8, -55], [10, -57], [7, -58], [7, -58], [7, -58], [7, -56], [5, -56], [5, -53], [5, -53], [8, -55], [10, -57], [7, -58], [7, -58], [7, -58], [-5, -58], [-3, -59], [-3, -61], [-3, -61], [-3, -60], [-8, -58], [-26, -50], [-25, -50], [-5, -58], [-3, -59], [-3, -61], [-3, -61], [-3, -60], [-8, -58], [-26, -50], [-25, -50], [12, -74], [16, -73], [19, -73], [19, -73], [15, -72], [11, -71], [0, -71], [1, -71], [12, -74], [16, -73], [19, -73], [19, -73], [15, -72], [11, -71], [0, -71], [1, -71], [-11, -74], [-15, -73], [-18, -73], [-18, -73], [-14, -72], [-10, -71], [1, -71], [0, -71], [-11, -74], [-15, -73], [-18, -73], [-18, -73], [-14, -72], [-10, -71], [1, -71], [0, -71], [6, -58], [4, -59], [4, -61], [4, -61], [4, -60], [9, -58], [27, -50], [26, -50], [6, -58], [4, -59], [4, -61], [4, -61], [4, -60], [9, -58], [27, -50], [26, -50], [-5, -52], [-6, -56], [-4, -53], [-7, -55], [-6, -58], [-6, -58], [-5, -52], [-6, -56], [-4, -53], [-7, -55], [-6, -58], [-6, -58], [12, -72], [11, -69], [9, -65], [7, -65], [7, -71], [8, -71], [12, -72], [11, -69], [9, -65], [7, -65], [7, -71], [8, -71], [-11, -72], [-10, -69], [-8, -65], [-6, -65], [-6, -71], [-7, -71], [-11, -72], [-10, -69], [-8, -65], [-6, -65], [-6, -71], [-7, -71], [6, -52], [7, -56], [5, -53], [8, -55], [7, -58], [7, -58], [6, -52], [7, -56], [5, -53], [8, -55], [7, -58], [7, -58]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 88, 89, 90, 90, 91, 92, 93, 94, 95, 80, 81, 82, 82, 83, 84, 85, 86, 87, 80, 81, 82, 82, 83, 84, 85, 86, 87, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 103, 104, 105, 105, 106, 107, 108, 109, 96, 97, 98, 98, 99, 100, 101, 102, 96, 97, 98, 98, 99, 100, 101, 102, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 111, 88, 90, 91, 93, 95, 110, 80, 82, 83, 85, 87, 110, 80, 82, 83, 85, 87]
};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 81, 121, 156, 194, 234, 273, 309, 347, 387, 426, 462, 500, 535, 572, 612, 648, 680, 715, 757, 796, 830, 868, 915, 958, 993, 1035, 1083, 1128, 1161, 1197, 1240, 1278, 1314, 1350, 1388, 1424, 1464, 1504, 1543, 1583, 1623, 1662, 1700, 1740, 1790, 1848, 1917, 1985, 2038, 2081, 2122, 2162, 2203, 2249, 2294, 2339, 2385, 2432, 2479, 2522, 2566, 2610, 2654, 2697, 2739, 2797, 2841, 2902, 2964, 3029, 3077, 3119, 3175, 3231, 3287, 3329, 3382, 3425, 3471, 3528, 3592, 3642, 3687, 3729, 3780, 3822, 3868, 3922, 3988, 4033, 4082, 4131, 4191, 4251, 4314, 4366],
  widths: [38, 43, 40, 35, 38, 40, 39, 36, 38, 40, 39, 36, 38, 35, 37, 40, 36, 32, 35, 42, 39, 34, 38, 47, 43, 35, 42, 48, 45, 33, 36, 43, 38, 36, 36, 38, 36, 40, 40, 39, 40, 40, 39, 38, 40, 50, 58, 69, 68, 53, 43, 41, 40, 41, 46, 45, 45, 46, 47, 47, 43, 44, 44, 44, 43, 42, 58, 44, 61, 62, 65, 48, 42, 56, 56, 56, 42, 53, 43, 46, 57, 64, 50, 45, 42, 51, 42, 46, 54, 66, 45, 49, 49, 60, 60, 63, 52, 52],
  heights: [77, 74, 71, 78, 76, 75, 76, 79, 77, 75, 75, 79, 77, 74, 75, 74, 75, 75, 74, 72, 74, 71, 71, 71, 73, 74, 73, 72, 71, 72, 75, 72, 74, 79, 78, 74, 74, 76, 79, 72, 72, 76, 79, 72, 72, 63, 59, 43, 52, 52, 63, 54, 65, 55, 76, 75, 74, 73, 75, 76, 74, 73, 72, 71, 73, 74, 72, 67, 63, 61, 61, 80, 80, 70, 66, 65, 74, 69, 67, 64, 54, 45, 70, 80, 73, 73, 75, 67, 64, 60, 75, 74, 76, 69, 67, 67, 75, 78],
  bodyOffsets: [[1, -24], [1, -24], [1, -24], [-1, -27], [-1, -27], [-1, -27], [-2, -26], [-2, -26], [-2, -26], [1, -25], [1, -25], [1, -25], [1, -24], [1, -24], [1, -24], [0, -25], [0, -25], [0, -25], [2, -26], [2, -26], [2, -26], [2, -27], [2, -27], [2, -27], [3, -25], [3, -25], [1, -23], [2, -24], [1, -25], [2, -25], [3, -23], [2, -24], [2, -28], [1, -26], [1, -24], [1, -25], [1, -27], [1, -27], [-2, -26], [1, -26], [0, -26], [-1, -25], [-2, -24], [1, -24], [1, -25], [-4, -24], [-4, -23], [-1, -24], [1, -28], [-1, -25], [-3, -25], [-1, -25], [0, -24], [-2, -24], [-3, -23], [-1, -25], [2, -23], [2, -20], [3, -24], [2, -24], [1, -23], [1, -20], [1, -23], [2, -23], [0, -28], [1, -25], [4, -25], [1, -25], [0, -24], [2, -24], [3, -23], [1, -25], [0, -26], [1, -25], [3, -24], [0, -24], [0, -25], [4, -24], [4, -23], [2, -24], [-1, -28], [0, -26], [-1, -24], [-1, -25], [-1, -27], [0, -27], [2, -26], [0, -26], [3, -19], [3, -19], [3, -19], [1, -22], [1, -22], [1, -22], [-6, -26], [-6, -26], [-6, -26], [-6, -25], [-6, -25], [-6, -25], [1, -22], [1, -22], [1, -22], [6, -25], [6, -25], [6, -25], [7, -26], [7, -26], [7, -26], [-1, -22], [-1, -22], [-1, -22], [-1, -21], [-2, -17], [-1, -21], [-1, -21], [-2, -17], [-1, -21], [-4, -18], [-4, -15], [-4, -18], [-4, -18], [-4, -15], [-4, -18], [4, -18], [5, -15], [4, -18], [4, -18], [5, -15], [4, -18], [2, -21], [3, -17], [2, -21], [2, -21], [3, -17], [2, -21], [0, -27], [1, -26], [1, -26], [0, -25], [0, -26], [0, -27], [0, -27], [1, -26], [1, -26], [0, -25], [0, -26], [0, -27], [0, -24], [-1, -23], [-1, -23], [-1, -22], [0, -23], [0, -24], [0, -24], [-1, -23], [-1, -23], [-1, -22], [0, -23], [0, -24], [1, -24], [1, -23], [1, -23], [1, -22], [1, -23], [0, -24], [1, -24], [1, -23], [1, -23], [1, -22], [1, -23], [0, -24], [0, -27], [0, -26], [0, -26], [0, -25], [1, -26], [1, -27], [0, -27], [0, -26], [0, -26], [0, -25], [1, -26], [1, -27], [-7, -25], [0, -26], [-8, -16], [-10, -15], [-11, -15], [-7, -25], [0, -26], [-8, -16], [-10, -15], [-11, -15], [1, -28], [4, -28], [-6, -23], [-6, -21], [-6, -20], [1, -28], [4, -28], [-6, -23], [-6, -21], [-6, -20], [-1, -28], [-4, -28], [6, -23], [6, -21], [6, -20], [-1, -28], [-4, -28], [6, -23], [6, -21], [6, -20], [7, -25], [0, -26], [9, -16], [10, -15], [12, -15], [7, -25], [0, -26], [9, -16], [10, -15], [12, -15], [6, -22], [12, -20], [6, -22], [6, -22], [12, -20], [6, -22], [1, -24], [6, -22], [1, -24], [1, -24], [6, -22], [1, -24], [0, -24], [-6, -22], [0, -24], [0, -24], [-6, -22], [0, -24], [-6, -22], [-11, -20], [-6, -22], [-6, -22], [-11, -20], [-6, -22], [12, -20], [12, -20], [6, -22], [6, -22], [-6, -22], [-6, -22], [-11, -20], [-11, -20], [6, -6], [6, -6], [4, -5], [4, -5], [-4, -5], [-4, -5], [-5, -6], [-5, -6], [-1, -27], [-1, -27], [-1, -27], [-1, -27], [-1, -27], [-1, -27], [-1, -27], [-1, -27], [-7, -25], [-3, -25], [0, -26], [-8, -16], [-10, -15], [-11, -15], [-11, -15], [-11, -15], [-11, -15], [-7, -25], [-3, -25], [0, -26], [-8, -16], [-10, -15], [-11, -15], [-11, -15], [-11, -15], [-11, -15], [1, -28], [3, -28], [4, -28], [-6, -23], [-6, -21], [-6, -20], [-6, -20], [-6, -20], [-6, -20], [1, -28], [3, -28], [4, -28], [-6, -23], [-6, -21], [-6, -20], [-6, -20], [-6, -20], [-6, -20], [-1, -28], [-2, -28], [-4, -28], [6, -23], [6, -21], [6, -20], [6, -20], [6, -20], [6, -20], [-1, -28], [-2, -28], [-4, -28], [6, -23], [6, -21], [6, -20], [6, -20], [6, -20], [6, -20], [7, -25], [3, -25], [0, -26], [9, -16], [10, -15], [12, -15], [12, -15], [12, -15], [12, -15], [7, -25], [3, -25], [0, -26], [9, -16], [10, -15], [12, -15], [12, -15], [12, -15], [12, -15], [1, -25], [4, -29], [8, -31], [3, -27], [-3, -17], [-12, -14], [-12, -14], [-12, -14], [1, -25], [4, -29], [8, -31], [3, -27], [-3, -17], [-12, -14], [-12, -14], [-12, -14], [3, -23], [6, -23], [9, -25], [-7, -24], [-8, -23], [-9, -23], [-9, -23], [-9, -23], [3, -23], [6, -23], [9, -25], [-7, -24], [-8, -23], [-9, -23], [-9, -23], [-9, -23], [-2, -23], [-5, -23], [-8, -25], [7, -24], [8, -23], [10, -23], [10, -23], [10, -23], [-2, -23], [-5, -23], [-8, -25], [7, -24], [8, -23], [10, -23], [10, -23], [10, -23], [-1, -25], [-3, -29], [-8, -31], [-3, -27], [3, -17], [12, -14], [12, -14], [12, -14], [-1, -25], [-3, -29], [-8, -31], [-3, -27], [3, -17], [12, -14], [12, -14], [12, -14], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [0, -28], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25]],
  anchorHead: [[2, -57], [-2, -57], [8, -57], [-4, -58], [-3, -58], [2, -57], [-4, -58], [12, -74], [-5, -58], [12, -74], [12, -73], [-4, -58], [13, -73], [-9, -74], [13, -74], [-11, -74], [5, -58], [11, -73], [5, -58], [6, -58], [-11, -74], [5, -58], [0, -56], [4, -58], [2, -57], [2, -56], [2, -54], [2, -55], [2, -57], [2, -56], [2, -54], [2, -55], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [-4, -58], [-4, -57], [-4, -55], [-4, -56], [12, -74], [12, -73], [12, -71], [12, -72], [12, -74], [12, -73], [12, -71], [12, -72], [13, -73], [13, -72], [13, -70], [13, -71], [13, -73], [13, -72], [13, -70], [13, -71], [-11, -74], [-11, -73], [-11, -71], [-11, -72], [-11, -74], [-11, -73], [-11, -71], [-11, -72], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [5, -58], [5, -57], [5, -55], [5, -56], [2, -45], [-3, -45], [7, -45], [-4, -45], [-3, -45], [2, -44], [-3, -45], [13, -61], [-4, -45], [13, -61], [13, -60], [-3, -45], [12, -60], [-10, -61], [13, -61], [-12, -61], [4, -45], [10, -60], [4, -45], [6, -45], [-12, -61], [5, -45], [0, -44], [4, -45], [-10, -62], [-11, -42], [-10, -62], [-10, -62], [-11, -42], [-10, -62], [-14, -65], [-14, -43], [-14, -65], [-14, -65], [-14, -43], [-14, -65], [15, -65], [15, -43], [15, -65], [15, -65], [15, -43], [15, -65], [11, -62], [12, -42], [11, -62], [11, -62], [12, -42], [11, -62], [-4, -59], [-4, -58], [-4, -57], [-4, -56], [-4, -58], [-4, -59], [-4, -59], [-4, -58], [-4, -57], [-4, -56], [-4, -58], [-4, -59], [10, -72], [10, -71], [10, -70], [10, -69], [10, -71], [10, -72], [10, -72], [10, -71], [10, -70], [10, -69], [10, -71], [10, -72], [-9, -72], [-9, -71], [-9, -70], [-9, -69], [-9, -71], [-9, -72], [-9, -72], [-9, -71], [-9, -70], [-9, -69], [-9, -71], [-9, -72], [5, -59], [5, -58], [5, -57], [5, -56], [5, -58], [5, -59], [5, -59], [5, -58], [5, -57], [5, -56], [5, -58], [5, -59], [-8, -56], [-2, -55], [-28, -37], [-29, -36], [-31, -33], [-8, -56], [-2, -55], [-28, -37], [-29, -36], [-31, -33], [7, -74], [9, -75], [-1, -72], [-5, -67], [-6, -66], [7, -74], [9, -75], [-1, -72], [-5, -67], [-6, -66], [-6, -74], [-8, -75], [2, -72], [6, -67], [7, -66], [-6, -74], [-8, -75], [2, -72], [6, -67], [7, -66], [9, -56], [3, -55], [29, -37], [30, -36], [32, -33], [9, -56], [3, -55], [29, -37], [30, -36], [32, -33], [21, -67], [34, -62], [21, -67], [21, -67], [34, -62], [21, -67], [12, -75], [20, -71], [12, -75], [12, -75], [20, -71], [12, -75], [-11, -75], [-19, -71], [-11, -75], [-11, -75], [-19, -71], [-11, -75], [-20, -67], [-33, -62], [-20, -67], [-20, -67], [-33, -62], [-20, -67], [34, -62], [34, -62], [20, -71], [20, -71], [-19, -71], [-19, -71], [-33, -62], [-33, -62], [39, -25], [39, -25], [45, 16], [45, 16], [-44, 16], [-44, 16], [-38, -25], [-38, -25], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-4, -58], [-8, -56], [-7, -55], [-2, -55], [-28, -37], [-29, -36], [-31, -33], [-31, -33], [-31, -33], [-31, -33], [-8, -56], [-7, -55], [-2, -55], [-28, -37], [-29, -36], [-31, -33], [-31, -33], [-31, -33], [-31, -33], [7, -74], [8, -74], [9, -75], [-1, -72], [-5, -67], [-6, -66], [-6, -66], [-6, -66], [-6, -66], [7, -74], [8, -74], [9, -75], [-1, -72], [-5, -67], [-6, -66], [-6, -66], [-6, -66], [-6, -66], [-6, -74], [-7, -74], [-8, -75], [2, -72], [6, -67], [7, -66], [7, -66], [7, -66], [7, -66], [-6, -74], [-7, -74], [-8, -75], [2, -72], [6, -67], [7, -66], [7, -66], [7, -66], [7, -66], [9, -56], [8, -55], [3, -55], [29, -37], [30, -36], [32, -33], [32, -33], [32, -33], [32, -33], [9, -56], [8, -55], [3, -55], [29, -37], [30, -36], [32, -33], [32, -33], [32, -33], [32, -33], [-6, -57], [-1, -58], [0, -59], [-10, -50], [-22, -37], [-32, -32], [-32, -32], [-32, -32], [-6, -57], [-1, -58], [0, -59], [-10, -50], [-22, -37], [-32, -32], [-32, -32], [-32, -32], [12, -72], [14, -72], [15, -76], [4, -70], [-1, -69], [-7, -69], [-7, -69], [-7, -69], [12, -72], [14, -72], [15, -76], [4, -70], [-1, -69], [-7, -69], [-7, -69], [-7, -69], [-11, -72], [-13, -72], [-14, -76], [-3, -70], [2, -69], [8, -69], [8, -69], [8, -69], [-11, -72], [-13, -72], [-14, -76], [-3, -70], [2, -69], [8, -69], [8, -69], [8, -69], [7, -57], [2, -58], [1, -59], [11, -50], [23, -37], [33, -32], [33, -32], [33, -32], [7, -57], [2, -58], [1, -59], [11, -50], [23, -37], [33, -32], [33, -32], [33, -32], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [-3, -57], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [15, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [-14, -72], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57], [4, -57]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 77, 77, 79, 79, 79, 79, 77, 77, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 66, 82, 67, 68, 69, 70, 70, 70, 70, 66, 82, 67, 68, 69, 70, 70, 70, 70, 71, 83, 72, 73, 74, 75, 75, 75, 75, 71, 83, 72, 73, 74, 75, 75, 75, 75, 71, 83, 72, 73, 74, 75, 75, 75, 75, 71, 83, 72, 73, 74, 75, 75, 75, 75, 66, 82, 67, 68, 69, 70, 70, 70, 70, 66, 82, 67, 68, 69, 70, 70, 70, 70, 84, 85, 86, 87, 88, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 90, 91, 92, 93, 94, 95, 95, 95, 84, 85, 86, 87, 88, 89, 89, 89, 84, 85, 86, 87, 88, 89, 89, 89, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96]
};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 73, 104, 141, 178, 216, 251, 283, 318, 355, 391, 425, 460, 495, 536, 582, 622, 656, 688, 725, 758, 787, 829, 875, 918, 949, 988, 1033, 1073, 1106, 1138, 1173, 1205, 1236, 1275, 1323, 1368, 1406, 1443, 1478, 1515, 1553, 1591, 1626, 1662, 1716, 1768, 1825, 1882, 1927, 1966, 2007, 2047, 2087, 2134, 2181, 2228, 2274, 2321, 2368, 2410, 2453, 2498, 2543, 2587, 2629, 2680, 2732, 2796, 2857, 2896, 2929, 2992, 3056, 3101, 3143, 3193, 3242, 3299, 3368, 3419, 3474, 3536, 3600, 3661, 3700, 3733, 3793, 3852, 3913, 3952, 3995, 4049, 4100, 4149, 4198, 4238, 4278, 4317, 4355, 4389, 4423, 4476, 4533, 4580, 4627, 4674, 4721, 4775, 4817, 4860],
  widths: [37, 36, 31, 37, 37, 38, 35, 32, 35, 37, 36, 34, 35, 35, 41, 46, 40, 34, 32, 37, 33, 29, 42, 46, 43, 31, 39, 45, 40, 33, 32, 35, 32, 31, 39, 48, 45, 38, 37, 35, 37, 38, 38, 35, 36, 54, 52, 57, 57, 45, 39, 41, 40, 40, 47, 47, 47, 46, 47, 47, 42, 43, 45, 45, 44, 42, 51, 52, 64, 61, 39, 33, 63, 64, 45, 42, 50, 49, 57, 69, 51, 55, 62, 64, 61, 39, 33, 60, 59, 61, 39, 43, 54, 51, 49, 49, 40, 40, 39, 38, 34, 34, 53, 57, 47, 47, 47, 47, 54, 42, 43, 42],
  heights: [72, 72, 71, 69, 71, 70, 67, 68, 72, 70, 67, 68, 72, 72, 68, 65, 67, 66, 67, 65, 70, 67, 67, 65, 66, 66, 65, 64, 66, 69, 70, 68, 69, 67, 67, 64, 65, 68, 71, 69, 69, 68, 71, 68, 69, 52, 50, 48, 50, 56, 67, 57, 60, 52, 69, 70, 71, 71, 70, 68, 70, 71, 72, 72, 70, 69, 72, 76, 63, 61, 71, 73, 65, 63, 67, 66, 64, 63, 49, 44, 72, 76, 61, 59, 58, 71, 73, 65, 63, 63, 75, 74, 59, 58, 58, 58, 70, 72, 63, 62, 61, 61, 73, 79, 60, 61, 61, 72, 75, 62, 63, 63],
  bodyOffsets: [[0, -25], [0, -25], [0, -25], [-2, -25], [-2, -25], [-2, -25], [-1, -25], [-1, -25], [-1, -25], [1, -26], [1, -26], [1, -26], [1, -25], [1, -25], [1, -25], [0, -26], [0, -26], [0, -26], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [0, -25], [1, -26], [0, -23], [1, -22], [1, -25], [0, -25], [0, -23], [0, -22], [1, -24], [-1, -25], [-3, -23], [0, -23], [1, -27], [-1, -25], [0, -23], [0, -22], [1, -24], [-3, -23], [-4, -22], [-2, -23], [2, -25], [-3, -24], [-2, -22], [-2, -23], [0, -24], [-3, -24], [-3, -23], [-3, -23], [-1, -26], [-1, -25], [-1, -25], [-2, -25], [0, -26], [1, -23], [0, -22], [0, -23], [-1, -26], [-1, -23], [1, -23], [0, -23], [1, -24], [3, -24], [4, -23], [3, -23], [2, -26], [2, -25], [1, -25], [3, -25], [0, -24], [3, -23], [4, -22], [3, -23], [-1, -25], [4, -24], [3, -22], [2, -23], [0, -24], [2, -25], [3, -23], [0, -23], [-1, -27], [1, -25], [1, -23], [1, -22], [1, -12], [1, -12], [1, -12], [4, -13], [4, -13], [4, -13], [1, -13], [1, -13], [1, -13], [5, -11], [5, -11], [5, -11], [1, -8], [1, -8], [1, -8], [-4, -11], [-4, -11], [-4, -11], [0, -13], [0, -13], [0, -13], [-4, -13], [-4, -13], [-4, -13], [-3, -22], [-3, -17], [-3, -22], [-3, -22], [-3, -17], [-3, -22], [-2, -22], [-2, -18], [-2, -22], [-2, -22], [-2, -18], [-2, -22], [2, -22], [2, -18], [2, -22], [2, -22], [2, -18], [2, -22], [4, -22], [4, -17], [4, -22], [4, -22], [4, -17], [4, -22], [-4, -25], [-4, -26], [-3, -26], [-2, -26], [-2, -26], [-3, -25], [-4, -25], [-4, -26], [-3, -26], [-2, -26], [-2, -26], [-3, -25], [-5, -25], [-4, -25], [-4, -26], [-3, -26], [-4, -25], [-5, -24], [-5, -25], [-4, -25], [-4, -26], [-3, -26], [-4, -25], [-5, -24], [5, -25], [5, -25], [5, -26], [4, -26], [4, -25], [5, -24], [5, -25], [5, -25], [5, -26], [4, -26], [4, -25], [5, -24], [5, -25], [5, -26], [4, -26], [2, -26], [3, -26], [4, -25], [5, -25], [5, -26], [4, -26], [2, -26], [3, -26], [4, -25], [-2, -25], [-3, -25], [-2, -27], [-14, -10], [-15, -9], [-2, -25], [-3, -25], [-2, -27], [-14, -10], [-15, -9], [1, -26], [-2, -27], [-3, -29], [-23, -25], [-23, -24], [1, -26], [-2, -27], [-3, -29], [-23, -25], [-23, -24], [0, -26], [3, -27], [4, -29], [24, -25], [23, -24], [0, -26], [3, -27], [4, -29], [24, -25], [23, -24], [2, -25], [4, -25], [2, -27], [14, -10], [16, -9], [2, -25], [4, -25], [2, -27], [14, -10], [16, -9], [7, -22], [9, -21], [7, -22], [7, -22], [9, -21], [7, -22], [1, -25], [3, -24], [1, -25], [1, -25], [3, -24], [1, -25], [-1, -25], [-3, -24], [-1, -25], [-1, -25], [-3, -24], [-1, -25], [-6, -22], [-8, -21], [-6, -22], [-6, -22], [-8, -21], [-6, -22], [8, -21], [8, -21], [5, -22], [5, -22], [-4, -22], [-4, -22], [-8, -21], [-8, -21], [0, 0], [0, 0], [-6, 3], [-6, 3], [7, 3], [7, 3], [1, 0], [1, 0], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-2, -25], [-4, -25], [-3, -25], [-3, -27], [-3, -27], [-16, -11], [-15, -10], [-16, -10], [-16, -10], [-16, -10], [-4, -25], [-3, -25], [-3, -27], [-3, -27], [-16, -11], [-15, -10], [-16, -10], [-16, -10], [-16, -10], [-5, -25], [-2, -27], [-3, -29], [-3, -29], [-20, -26], [-20, -25], [-19, -25], [-19, -25], [-19, -25], [-5, -25], [-2, -27], [-3, -29], [-3, -29], [-20, -26], [-20, -25], [-19, -25], [-19, -25], [-19, -25], [5, -25], [3, -27], [4, -29], [4, -29], [20, -26], [21, -25], [20, -25], [20, -25], [20, -25], [5, -25], [3, -27], [4, -29], [4, -29], [20, -26], [21, -25], [20, -25], [20, -25], [20, -25], [5, -25], [4, -25], [4, -27], [4, -27], [16, -11], [15, -10], [17, -10], [17, -10], [17, -10], [5, -25], [4, -25], [4, -27], [4, -27], [16, -11], [15, -10], [17, -10], [17, -10], [17, -10], [-4, -25], [-3, -26], [-8, -26], [-11, -18], [-12, -18], [-13, -18], [-13, -18], [-13, -18], [-4, -25], [-3, -26], [-8, -26], [-11, -18], [-12, -18], [-13, -18], [-13, -18], [-13, -18], [-5, -25], [-5, -27], [-5, -28], [-2, -23], [-4, -23], [-5, -22], [-5, -22], [-5, -22], [-5, -25], [-5, -27], [-5, -28], [-2, -23], [-4, -23], [-5, -22], [-5, -22], [-5, -22], [5, -25], [5, -27], [5, -28], [3, -23], [4, -23], [5, -22], [5, -22], [5, -22], [5, -25], [5, -27], [5, -28], [3, -23], [4, -23], [5, -22], [5, -22], [5, -22], [5, -25], [4, -26], [9, -26], [11, -18], [13, -18], [14, -18], [14, -18], [14, -18], [5, -25], [4, -26], [9, -26], [11, -18], [13, -18], [14, -18], [14, -18], [14, -18], [-2, -25], [0, -25], [-4, -28], [-12, -19], [-12, -19], [-12, -19], [-2, -25], [0, -25], [-4, -28], [-12, -19], [-12, -19], [-12, -19], [1, -26], [-2, -28], [0, -29], [3, -23], [4, -23], [3, -23], [1, -26], [-2, -28], [0, -29], [3, -23], [4, -23], [3, -23], [0, -26], [3, -28], [0, -29], [-3, -23], [-3, -23], [-3, -23], [0, -26], [3, -28], [0, -29], [-3, -23], [-3, -23], [-3, -23], [2, -25], [1, -25], [5, -28], [13, -19], [13, -19], [13, -19], [2, -25], [1, -25], [5, -28], [13, -19], [13, -19], [13, -19]],
  anchorHead: [[1, -55], [-4, -56], [6, -56], [-5, -56], [-5, -56], [-1, -55], [-5, -56], [11, -72], [-6, -56], [11, -72], [11, -71], [-5, -56], [11, -71], [-11, -72], [11, -72], [-10, -72], [6, -56], [11, -71], [6, -56], [7, -56], [-10, -72], [6, -56], [1, -54], [6, -56], [1, -54], [1, -53], [1, -51], [1, -52], [1, -54], [1, -53], [1, -51], [1, -52], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [11, -70], [11, -69], [11, -67], [11, -68], [11, -70], [11, -69], [11, -67], [11, -68], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [0, -31], [-4, -32], [5, -32], [-4, -32], [-4, -32], [1, -31], [-4, -32], [12, -48], [-4, -32], [12, -48], [12, -47], [-4, -32], [12, -47], [-10, -48], [12, -48], [-11, -48], [5, -32], [11, -47], [5, -32], [5, -32], [-11, -48], [5, -32], [1, -31], [5, -32], [-10, -66], [-14, -44], [-10, -66], [-10, -66], [-14, -44], [-10, -66], [-11, -65], [-9, -44], [-11, -65], [-11, -65], [-9, -44], [-11, -65], [12, -65], [10, -44], [12, -65], [12, -65], [10, -44], [12, -65], [11, -66], [15, -44], [11, -66], [11, -66], [15, -44], [11, -66], [-6, -56], [-6, -57], [-6, -58], [-6, -58], [-6, -57], [-6, -55], [-6, -56], [-6, -57], [-6, -58], [-6, -58], [-6, -57], [-6, -55], [11, -72], [11, -73], [11, -74], [11, -74], [11, -72], [11, -71], [11, -72], [11, -73], [11, -74], [11, -74], [11, -72], [11, -71], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [-10, -72], [-10, -71], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [-10, -72], [-10, -71], [7, -56], [7, -57], [7, -58], [7, -58], [7, -57], [7, -55], [7, -56], [7, -57], [7, -58], [7, -58], [7, -57], [7, -55], [-6, -56], [-7, -57], [-5, -58], [-33, -33], [-35, -31], [-6, -56], [-7, -57], [-5, -58], [-33, -33], [-35, -31], [11, -72], [11, -73], [11, -74], [-21, -71], [-23, -69], [11, -72], [11, -73], [11, -74], [-21, -71], [-23, -69], [-10, -72], [-10, -73], [-10, -74], [22, -71], [24, -69], [-10, -72], [-10, -73], [-10, -74], [22, -71], [24, -69], [7, -56], [8, -57], [6, -58], [34, -33], [36, -31], [7, -56], [8, -57], [6, -58], [34, -33], [36, -31], [23, -67], [27, -64], [23, -67], [23, -67], [27, -64], [23, -67], [14, -74], [18, -73], [14, -74], [14, -74], [18, -73], [14, -74], [-13, -74], [-17, -73], [-13, -74], [-13, -74], [-17, -73], [-13, -74], [-22, -67], [-26, -64], [-22, -67], [-22, -67], [-26, -64], [-22, -67], [28, -64], [28, -64], [18, -72], [18, -72], [-17, -72], [-17, -72], [-27, -64], [-27, -64], [36, -20], [36, -20], [37, 25], [37, 25], [-36, 25], [-36, 25], [-35, -20], [-35, -20], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-6, -56], [-7, -58], [-6, -59], [-6, -59], [-32, -34], [-33, -32], [-34, -31], [-34, -31], [-34, -31], [-6, -56], [-7, -58], [-6, -59], [-6, -59], [-32, -34], [-33, -32], [-34, -31], [-34, -31], [-34, -31], [11, -72], [11, -73], [11, -74], [11, -74], [-17, -71], [-18, -70], [-18, -69], [-18, -69], [-18, -69], [11, -72], [11, -73], [11, -74], [11, -74], [-17, -71], [-18, -70], [-18, -69], [-18, -69], [-18, -69], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [18, -71], [19, -70], [19, -69], [19, -69], [19, -69], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [18, -71], [19, -70], [19, -69], [19, -69], [19, -69], [7, -56], [8, -58], [7, -59], [7, -59], [33, -34], [34, -32], [35, -31], [35, -31], [35, -31], [7, -56], [8, -58], [7, -59], [7, -59], [33, -34], [34, -32], [35, -31], [35, -31], [35, -31], [-6, -56], [-6, -57], [-9, -56], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [-6, -56], [-6, -57], [-9, -56], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [11, -72], [10, -73], [10, -74], [0, -62], [-1, -61], [-1, -60], [-1, -60], [-1, -60], [11, -72], [10, -73], [10, -74], [0, -62], [-1, -61], [-1, -60], [-1, -60], [-1, -60], [-10, -72], [-9, -73], [-9, -74], [1, -62], [2, -61], [2, -60], [2, -60], [2, -60], [-10, -72], [-9, -73], [-9, -74], [1, -62], [2, -61], [2, -60], [2, -60], [2, -60], [7, -56], [7, -57], [10, -56], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [7, -56], [7, -57], [10, -56], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [-6, -56], [-8, -58], [-10, -57], [-17, -46], [-17, -47], [-17, -47], [-6, -56], [-8, -58], [-10, -57], [-17, -46], [-17, -47], [-17, -47], [11, -72], [14, -76], [17, -76], [17, -67], [17, -68], [17, -68], [11, -72], [14, -76], [17, -76], [17, -67], [17, -68], [17, -68], [-10, -72], [-13, -76], [-16, -76], [-16, -67], [-16, -68], [-16, -68], [-10, -72], [-13, -76], [-16, -76], [-16, -67], [-16, -68], [-16, -68], [7, -56], [9, -58], [11, -57], [18, -46], [18, -47], [18, -47], [7, -56], [9, -58], [11, -57], [18, -46], [18, -47], [18, -47]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 80, 81, 81, 82, 83, 84, 84, 84, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 90, 91, 92, 93, 94, 95, 95, 54, 90, 91, 92, 93, 94, 95, 95, 60, 96, 97, 98, 99, 100, 101, 101, 60, 96, 97, 98, 99, 100, 101, 101, 60, 96, 97, 98, 99, 100, 101, 101, 60, 96, 97, 98, 99, 100, 101, 101, 54, 90, 91, 92, 93, 94, 95, 95, 54, 90, 91, 92, 93, 94, 95, 95, 1, 102, 103, 104, 105, 106, 1, 102, 103, 104, 105, 106, 3, 107, 108, 109, 110, 111, 3, 107, 108, 109, 110, 111, 3, 107, 108, 109, 110, 111, 3, 107, 108, 109, 110, 111, 1, 102, 103, 104, 105, 106, 1, 102, 103, 104, 105, 106]
};

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 85, 117, 156, 198, 241, 283, 325, 367, 410, 454, 497, 541, 581, 626, 672, 715, 755, 793, 831, 869, 901, 945, 989, 1031, 1066, 1109, 1151, 1187, 1223, 1260, 1298, 1335, 1371, 1408, 1448, 1485, 1526, 1568, 1609, 1651, 1692, 1734, 1775, 1817, 1887, 1943, 1997, 2045, 2105, 2141, 2180, 2218, 2265, 2312, 2359, 2406, 2452, 2499, 2546, 2592, 2639, 2688, 2735, 2781, 2826, 2867, 2918, 2971, 3028, 3085, 3124, 3159, 3188, 3239, 3289, 3339, 3382, 3439, 3494, 3553, 3632, 3683, 3739, 3798, 3857, 3916, 3950, 3979, 4030, 4080, 4130, 4179, 4225, 4280, 4330, 4380, 4430, 4466, 4503, 4548, 4582, 4615, 4647, 4697, 4746, 4796, 4844, 4889, 4939, 4987, 5048, 5110],
  widths: [44, 41, 32, 39, 42, 43, 42, 42, 42, 43, 44, 43, 44, 40, 45, 46, 43, 40, 38, 38, 38, 32, 44, 44, 42, 35, 43, 42, 36, 36, 37, 38, 37, 36, 37, 40, 37, 41, 42, 41, 42, 41, 42, 41, 42, 70, 56, 54, 48, 60, 36, 39, 38, 47, 47, 47, 47, 46, 47, 47, 46, 47, 49, 47, 46, 45, 41, 51, 53, 57, 57, 39, 35, 29, 51, 50, 50, 43, 57, 55, 59, 79, 51, 56, 59, 59, 59, 34, 29, 51, 50, 50, 49, 46, 55, 50, 50, 50, 36, 37, 45, 34, 33, 32, 50, 49, 50, 48, 45, 50, 48, 61, 62, 57],
  heights: [77, 76, 75, 74, 75, 77, 76, 75, 77, 75, 75, 75, 77, 76, 73, 72, 76, 76, 75, 76, 77, 75, 74, 72, 70, 72, 73, 72, 73, 74, 75, 71, 68, 71, 72, 69, 71, 69, 74, 70, 65, 69, 70, 70, 65, 56, 51, 51, 49, 47, 77, 65, 67, 58, 75, 76, 77, 77, 76, 74, 75, 76, 77, 77, 75, 74, 76, 77, 78, 65, 62, 74, 72, 74, 68, 67, 72, 67, 69, 66, 58, 50, 77, 78, 64, 61, 59, 72, 74, 68, 67, 67, 76, 75, 64, 63, 62, 62, 74, 74, 65, 65, 64, 64, 75, 73, 75, 74, 75, 74, 74, 77, 76, 75],
  bodyOffsets: [[0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [1, -26], [1, -26], [1, -26], [0, -25], [0, -25], [0, -25], [0, -26], [0, -26], [0, -26], [0, -25], [0, -25], [0, -25], [2, -25], [2, -25], [2, -25], [1, -24], [1, -24], [1, -22], [1, -22], [1, -25], [3, -24], [4, -22], [3, -22], [-1, -24], [-1, -24], [-1, -23], [0, -22], [-1, -24], [-1, -23], [-2, -21], [-1, -21], [0, -24], [-6, -24], [-6, -23], [-5, -25], [-1, -26], [-6, -24], [-7, -23], [-3, -23], [-1, -25], [0, -23], [0, -23], [0, -26], [-1, -26], [1, -25], [0, -24], [1, -24], [0, -27], [0, -24], [2, -24], [0, -27], [0, -27], [-1, -26], [-2, -24], [-1, -27], [1, -25], [1, -23], [0, -23], [1, -26], [1, -26], [0, -25], [0, -24], [0, -24], [0, -24], [6, -24], [6, -23], [5, -25], [2, -26], [7, -24], [7, -23], [3, -23], [1, -24], [2, -24], [1, -23], [1, -22], [1, -24], [1, -23], [2, -21], [1, -21], [0, -12], [0, -12], [0, -12], [4, -13], [4, -13], [4, -13], [-1, -13], [-1, -13], [-1, -13], [-2, -14], [-2, -14], [-2, -14], [0, -15], [0, -15], [0, -15], [2, -14], [2, -14], [2, -14], [1, -13], [1, -13], [1, -13], [-4, -13], [-4, -13], [-4, -13], [-4, -17], [-5, -11], [-4, -17], [-4, -17], [-5, -11], [-4, -17], [-4, -22], [-8, -18], [-4, -22], [-4, -22], [-8, -18], [-4, -22], [4, -22], [9, -18], [4, -22], [4, -22], [9, -18], [4, -22], [4, -17], [6, -11], [4, -17], [4, -17], [6, -11], [4, -17], [-4, -22], [-4, -23], [-3, -23], [-2, -23], [-2, -23], [-3, -22], [-4, -22], [-4, -23], [-3, -23], [-2, -23], [-2, -23], [-3, -22], [-4, -25], [-3, -26], [-3, -26], [-3, -26], [-4, -25], [-4, -25], [-4, -25], [-3, -26], [-3, -26], [-3, -26], [-4, -25], [-4, -25], [4, -25], [4, -26], [4, -26], [4, -26], [4, -25], [5, -25], [4, -25], [4, -26], [4, -26], [4, -26], [4, -25], [5, -25], [5, -22], [5, -23], [4, -23], [2, -23], [3, -23], [4, -22], [5, -22], [5, -23], [4, -23], [2, -23], [3, -23], [4, -22], [0, -25], [-2, -25], [0, -26], [-16, -8], [-16, -7], [0, -25], [-2, -25], [0, -26], [-16, -8], [-16, -7], [1, -26], [-4, -25], [-5, -27], [-4, -23], [-4, -22], [1, -26], [-4, -25], [-5, -27], [-4, -23], [-4, -22], [0, -26], [5, -25], [6, -27], [5, -23], [4, -22], [0, -26], [5, -25], [6, -27], [5, -23], [4, -22], [1, -25], [3, -25], [1, -26], [17, -8], [17, -7], [1, -25], [3, -25], [1, -26], [17, -8], [17, -7], [7, -25], [9, -23], [7, -25], [7, -25], [9, -23], [7, -25], [1, -24], [3, -23], [1, -24], [1, -24], [3, -23], [1, -24], [0, -24], [-2, -23], [0, -24], [0, -24], [-2, -23], [0, -24], [-7, -25], [-9, -23], [-7, -25], [-7, -25], [-9, -23], [-7, -25], [8, -23], [8, -23], [-1, -22], [-1, -22], [2, -22], [2, -22], [-7, -23], [-7, -23], [0, 0], [0, 0], [-9, 6], [-9, 6], [10, 6], [10, 6], [1, 0], [1, 0], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-2, -26], [-2, -27], [-2, -27], [-16, -11], [-16, -9], [-16, -8], [-16, -8], [-16, -8], [0, -25], [-2, -26], [-2, -27], [-2, -27], [-16, -11], [-16, -9], [-16, -8], [-16, -8], [-16, -8], [1, -26], [-5, -25], [-5, -27], [-5, -27], [-25, -27], [-25, -26], [-25, -26], [-25, -26], [-25, -26], [1, -26], [-5, -25], [-5, -27], [-5, -27], [-25, -27], [-25, -26], [-25, -26], [-25, -26], [-25, -26], [0, -26], [5, -25], [6, -27], [6, -27], [26, -27], [25, -26], [25, -26], [25, -26], [25, -26], [0, -26], [5, -25], [6, -27], [6, -27], [26, -27], [25, -26], [25, -26], [25, -26], [25, -26], [1, -25], [3, -26], [2, -27], [2, -27], [17, -11], [17, -9], [17, -8], [17, -8], [17, -8], [1, -25], [3, -26], [2, -27], [2, -27], [17, -11], [17, -9], [17, -8], [17, -8], [17, -8], [0, -25], [-1, -25], [-6, -24], [-10, -18], [-13, -17], [-13, -17], [-13, -17], [-13, -17], [0, -25], [-1, -25], [-6, -24], [-10, -18], [-13, -17], [-13, -17], [-13, -17], [-13, -17], [1, -26], [-8, -26], [-7, -27], [0, -23], [-6, -23], [-6, -23], [-7, -23], [-7, -23], [1, -26], [-8, -26], [-7, -27], [0, -23], [-6, -23], [-6, -23], [-7, -23], [-7, -23], [0, -26], [8, -26], [8, -27], [1, -23], [6, -23], [7, -23], [7, -23], [7, -23], [0, -26], [8, -26], [8, -27], [1, -23], [6, -23], [7, -23], [7, -23], [7, -23], [1, -25], [2, -25], [6, -24], [11, -18], [13, -17], [13, -17], [13, -17], [13, -17], [1, -25], [2, -25], [6, -24], [11, -18], [13, -17], [13, -17], [13, -17], [13, -17], [-2, -25], [2, -25], [0, -26], [-12, -19], [-14, -18], [-15, -16], [-2, -25], [2, -25], [0, -26], [-12, -19], [-14, -18], [-15, -16], [1, -26], [-4, -26], [-3, -26], [-9, -27], [-11, -27], [-12, -26], [1, -26], [-4, -26], [-3, -26], [-9, -27], [-11, -27], [-12, -26], [0, -26], [4, -26], [3, -26], [10, -27], [11, -27], [13, -26], [0, -26], [4, -26], [3, -26], [10, -27], [11, -27], [13, -26], [3, -25], [-2, -25], [1, -26], [12, -19], [14, -18], [16, -16], [3, -25], [-2, -25], [1, -26], [12, -19], [14, -18], [16, -16]],
  anchorHead: [[1, -55], [-4, -56], [6, -56], [-5, -56], [-5, -56], [-1, -55], [-5, -56], [11, -72], [-6, -56], [11, -72], [11, -71], [-5, -56], [11, -71], [-11, -72], [11, -72], [-10, -72], [6, -56], [11, -71], [6, -56], [7, -56], [-10, -72], [7, -56], [1, -54], [6, -56], [1, -54], [1, -53], [1, -51], [1, -52], [1, -54], [1, -53], [1, -51], [1, -52], [-6, -55], [-6, -54], [-6, -52], [-6, -53], [-6, -55], [-6, -54], [-6, -52], [-6, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [11, -70], [11, -69], [11, -67], [11, -68], [11, -70], [11, -69], [11, -67], [11, -68], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [7, -55], [7, -54], [7, -52], [7, -53], [7, -55], [7, -54], [7, -52], [7, -53], [0, -31], [-5, -32], [6, -32], [-5, -32], [-4, -32], [1, -31], [-4, -32], [12, -48], [-5, -32], [12, -48], [12, -47], [-4, -32], [12, -47], [-10, -48], [12, -48], [-11, -48], [5, -32], [11, -47], [5, -32], [6, -32], [-11, -48], [6, -32], [1, -31], [5, -32], [-10, -62], [-14, -44], [-10, -62], [-10, -62], [-14, -44], [-10, -62], [-11, -65], [-9, -44], [-11, -65], [-11, -65], [-9, -44], [-11, -65], [12, -65], [10, -44], [12, -65], [12, -65], [10, -44], [12, -65], [11, -62], [15, -44], [11, -62], [11, -62], [15, -44], [11, -62], [-6, -53], [-6, -54], [-6, -55], [-6, -55], [-6, -54], [-6, -52], [-6, -53], [-6, -54], [-6, -55], [-6, -55], [-6, -54], [-6, -52], [11, -72], [11, -73], [11, -74], [11, -74], [11, -72], [11, -71], [11, -72], [11, -73], [11, -74], [11, -74], [11, -72], [11, -71], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [-10, -72], [-10, -71], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [-10, -72], [-10, -71], [7, -53], [7, -54], [7, -55], [7, -55], [7, -54], [7, -52], [7, -53], [7, -54], [7, -55], [7, -55], [7, -54], [7, -52], [-5, -56], [-7, -57], [-5, -58], [-32, -31], [-34, -29], [-5, -56], [-7, -57], [-5, -58], [-32, -31], [-34, -29], [11, -72], [12, -73], [9, -77], [4, -69], [2, -67], [11, -72], [12, -73], [9, -77], [4, -69], [2, -67], [-10, -72], [-11, -73], [-8, -77], [-3, -69], [-1, -67], [-10, -72], [-11, -73], [-8, -77], [-3, -69], [-1, -67], [6, -56], [8, -57], [6, -58], [33, -31], [35, -29], [6, -56], [8, -57], [6, -58], [33, -31], [35, -29], [23, -67], [27, -64], [23, -67], [23, -67], [27, -64], [23, -67], [14, -74], [18, -73], [14, -74], [14, -74], [18, -73], [14, -74], [-13, -74], [-17, -73], [-13, -74], [-13, -74], [-17, -73], [-13, -74], [-22, -67], [-26, -64], [-22, -67], [-22, -67], [-26, -64], [-22, -67], [28, -64], [28, -64], [18, -72], [18, -72], [-17, -72], [-17, -72], [-27, -64], [-27, -64], [36, -20], [36, -20], [37, 25], [37, 25], [-36, 25], [-36, 25], [-35, -20], [-35, -20], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-7, -58], [-6, -59], [-6, -59], [-32, -34], [-33, -32], [-34, -31], [-34, -31], [-34, -31], [-5, -56], [-7, -58], [-6, -59], [-6, -59], [-32, -34], [-33, -32], [-34, -31], [-34, -31], [-34, -31], [11, -72], [11, -73], [11, -74], [11, -74], [-17, -71], [-18, -70], [-18, -69], [-18, -69], [-18, -69], [11, -72], [11, -73], [11, -74], [11, -74], [-17, -71], [-18, -70], [-18, -69], [-18, -69], [-18, -69], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [18, -71], [19, -70], [19, -69], [19, -69], [19, -69], [-10, -72], [-10, -73], [-10, -74], [-10, -74], [18, -71], [19, -70], [19, -69], [19, -69], [19, -69], [6, -56], [8, -58], [7, -59], [7, -59], [33, -34], [34, -32], [35, -31], [35, -31], [35, -31], [6, -56], [8, -58], [7, -59], [7, -59], [33, -34], [34, -32], [35, -31], [35, -31], [35, -31], [-5, -56], [-6, -57], [-9, -56], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [-5, -56], [-6, -57], [-9, -56], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [11, -72], [10, -73], [10, -74], [2, -68], [0, -67], [-1, -66], [-1, -66], [-1, -66], [11, -72], [10, -73], [10, -74], [2, -68], [0, -67], [-1, -66], [-1, -66], [-1, -66], [-10, -72], [-9, -73], [-9, -74], [-1, -68], [1, -67], [2, -66], [2, -66], [2, -66], [-10, -72], [-9, -73], [-9, -74], [-1, -68], [1, -67], [2, -66], [2, -66], [2, -66], [6, -56], [7, -57], [10, -56], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [6, -56], [7, -57], [10, -56], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [-6, -56], [-8, -56], [-10, -56], [-23, -46], [-24, -44], [-24, -43], [-6, -56], [-8, -56], [-10, -56], [-23, -46], [-24, -44], [-24, -43], [11, -72], [12, -72], [12, -72], [0, -73], [-1, -72], [-1, -71], [11, -72], [12, -72], [12, -72], [0, -73], [-1, -72], [-1, -71], [-10, -72], [-11, -72], [-11, -72], [1, -73], [2, -72], [2, -71], [-10, -72], [-11, -72], [-11, -72], [1, -73], [2, -72], [2, -71], [7, -56], [9, -56], [11, -56], [24, -46], [25, -44], [25, -43], [7, -56], [9, -56], [11, -56], [24, -46], [25, -44], [25, -43]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 83, 84, 85, 86, 86, 86, 1, 82, 83, 83, 84, 85, 86, 86, 86, 3, 87, 88, 88, 89, 90, 91, 91, 91, 3, 87, 88, 88, 89, 90, 91, 91, 91, 3, 87, 88, 88, 89, 90, 91, 91, 91, 3, 87, 88, 88, 89, 90, 91, 91, 91, 1, 82, 83, 83, 84, 85, 86, 86, 86, 1, 82, 83, 83, 84, 85, 86, 86, 86, 1, 92, 93, 94, 95, 96, 97, 97, 1, 92, 93, 94, 95, 96, 97, 97, 3, 98, 99, 100, 101, 102, 103, 103, 3, 98, 99, 100, 101, 102, 103, 103, 3, 98, 99, 100, 101, 102, 103, 103, 3, 98, 99, 100, 101, 102, 103, 103, 1, 92, 93, 94, 95, 96, 97, 97, 1, 92, 93, 94, 95, 96, 97, 97, 1, 104, 105, 106, 107, 108, 1, 104, 105, 106, 107, 108, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 1, 104, 105, 106, 107, 108, 1, 104, 105, 106, 107, 108]
};

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 43, 84, 124, 162, 206, 250, 292, 332, 374, 418, 459, 498, 539, 576, 623, 668, 707, 744, 791, 836, 877, 904, 947, 989, 1029, 1058, 1104, 1150, 1186, 1223, 1262, 1303, 1342, 1379, 1422, 1465, 1498, 1543, 1588, 1630, 1675, 1720, 1765, 1808, 1854, 1892, 1945, 2000, 2054, 2096, 2136, 2176, 2214, 2255, 2302, 2349, 2397, 2446, 2496, 2545, 2588, 2629, 2670, 2713, 2757, 2801, 2848, 2892, 2955, 3015, 3060, 3108, 3161, 3214, 3255, 3302, 3342, 3385, 3441, 3502, 3551, 3607, 3661, 3722, 3783, 3844, 3894, 3946, 3995, 4047, 4097, 4145, 4194, 4247, 4297, 4349, 4398, 4447, 4490, 4533, 4575, 4626, 4677, 4730, 4777, 4821, 4868, 4926, 4985, 5026, 5067, 5108, 5155],
  widths: [43, 41, 40, 38, 44, 44, 42, 40, 42, 44, 41, 39, 41, 37, 47, 45, 39, 37, 47, 45, 41, 27, 43, 42, 40, 29, 46, 46, 36, 37, 39, 41, 39, 37, 43, 43, 33, 45, 45, 42, 45, 45, 45, 43, 46, 38, 53, 55, 54, 42, 40, 40, 38, 41, 47, 47, 48, 49, 50, 49, 43, 41, 41, 43, 44, 44, 47, 44, 63, 60, 45, 48, 53, 53, 41, 47, 40, 43, 56, 61, 49, 56, 54, 61, 61, 61, 50, 52, 49, 52, 50, 48, 49, 53, 50, 52, 49, 49, 43, 43, 42, 51, 51, 53, 47, 44, 47, 58, 59, 41, 41, 41, 47, 46],
  heights: [77, 74, 71, 78, 77, 77, 78, 82, 79, 77, 78, 81, 79, 79, 74, 71, 77, 75, 73, 74, 78, 76, 75, 73, 74, 75, 73, 72, 74, 79, 79, 78, 76, 77, 74, 70, 75, 77, 78, 73, 71, 77, 80, 74, 72, 59, 63, 53, 57, 56, 66, 51, 71, 59, 69, 70, 71, 71, 70, 69, 70, 71, 72, 73, 72, 70, 79, 78, 66, 63, 81, 81, 73, 72, 67, 72, 68, 64, 51, 45, 67, 67, 68, 66, 64, 63, 72, 75, 68, 65, 65, 64, 69, 70, 75, 68, 68, 69, 74, 80, 85, 77, 72, 72, 78, 81, 82, 65, 65, 77, 77, 75, 68, 67],
  bodyOffsets: [[2, -23], [2, -23], [2, -23], [0, -26], [0, -26], [0, -26], [-4, -25], [-4, -25], [-4, -25], [-3, -22], [-3, -22], [-3, -22], [0, -20], [0, -20], [0, -20], [3, -22], [3, -22], [3, -22], [5, -25], [5, -25], [5, -25], [2, -26], [2, -26], [2, -26], [1, -22], [0, -21], [0, -18], [0, -19], [1, -22], [2, -21], [2, -17], [2, -19], [3, -23], [-5, -24], [-4, -23], [0, -21], [2, -24], [0, -24], [2, -23], [3, -21], [2, -22], [-7, -21], [-3, -20], [0, -21], [1, -22], [-6, -22], [-2, -21], [0, -21], [-2, -20], [-2, -19], [-1, -18], [-2, -20], [-2, -21], [-5, -22], [-4, -22], [-1, -20], [1, -19], [0, -17], [-1, -18], [0, -20], [1, -19], [2, -17], [2, -18], [1, -20], [3, -20], [3, -19], [2, -18], [3, -20], [3, -21], [6, -22], [5, -22], [2, -20], [-1, -22], [8, -21], [3, -20], [0, -21], [0, -22], [6, -22], [2, -21], [0, -21], [-2, -23], [6, -24], [5, -23], [1, -21], [-1, -24], [1, -24], [-1, -23], [-2, -21], [1, -6], [1, -6], [1, -6], [-4, -5], [-4, -5], [-4, -5], [-2, -8], [-2, -8], [-2, -8], [-3, -10], [-3, -10], [-3, -10], [1, -9], [1, -9], [1, -9], [3, -10], [3, -10], [3, -10], [3, -8], [3, -8], [3, -8], [5, -5], [5, -5], [5, -5], [-1, -22], [-1, -14], [-1, -22], [-1, -22], [-1, -14], [-1, -22], [-6, -18], [-7, -12], [-6, -18], [-6, -18], [-7, -12], [-6, -18], [6, -18], [8, -12], [6, -18], [6, -18], [8, -12], [6, -18], [1, -22], [1, -14], [1, -22], [1, -22], [1, -14], [1, -22], [-1, -16], [-1, -17], [-2, -17], [-2, -17], [-3, -17], [-2, -16], [-1, -16], [-1, -17], [-2, -17], [-2, -17], [-3, -17], [-2, -16], [-3, -16], [-2, -16], [-2, -17], [-3, -17], [-4, -17], [-4, -16], [-3, -16], [-2, -16], [-2, -17], [-3, -17], [-4, -17], [-4, -16], [4, -16], [3, -16], [3, -17], [4, -17], [4, -17], [4, -16], [4, -16], [3, -16], [3, -17], [4, -17], [4, -17], [4, -16], [2, -16], [2, -17], [2, -17], [3, -17], [3, -17], [3, -16], [2, -16], [2, -17], [2, -17], [3, -17], [3, -17], [3, -16], [-1, -16], [1, -25], [2, -27], [-9, -11], [-10, -9], [-1, -16], [1, -25], [2, -27], [-9, -11], [-10, -9], [-3, -16], [0, -21], [3, -21], [-6, -17], [-7, -19], [-3, -16], [0, -21], [3, -21], [-6, -17], [-7, -19], [4, -16], [1, -21], [-3, -21], [7, -17], [8, -19], [4, -16], [1, -21], [-3, -21], [7, -17], [8, -19], [2, -16], [0, -25], [-2, -27], [10, -11], [10, -9], [2, -16], [0, -25], [-2, -27], [10, -11], [10, -9], [4, -24], [7, -25], [4, -24], [4, -24], [7, -25], [4, -24], [6, -17], [9, -17], [6, -17], [6, -17], [9, -17], [6, -17], [-5, -17], [-8, -17], [-5, -17], [-5, -17], [-8, -17], [-5, -17], [-3, -24], [-6, -25], [-3, -24], [-3, -24], [-6, -25], [-3, -24], [10, -23], [10, -23], [9, -14], [9, -14], [-8, -14], [-8, -14], [-10, -23], [-10, -23], [5, 5], [5, 5], [-6, 10], [-6, 10], [7, 10], [7, 10], [-5, 5], [-5, 5], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-1, -16], [1, -21], [4, -22], [4, -22], [-6, -18], [-11, -15], [-11, -14], [-11, -13], [-11, -13], [-1, -16], [1, -21], [4, -22], [4, -22], [-6, -18], [-11, -15], [-11, -14], [-11, -13], [-11, -13], [-3, -16], [1, -17], [4, -18], [4, -18], [-5, -15], [-7, -13], [-8, -13], [-9, -13], [-9, -13], [-3, -16], [1, -17], [4, -18], [4, -18], [-5, -15], [-7, -13], [-8, -13], [-9, -13], [-9, -13], [4, -16], [-1, -17], [-4, -18], [-4, -18], [6, -15], [7, -13], [8, -13], [9, -13], [9, -13], [4, -16], [-1, -17], [-4, -18], [-4, -18], [6, -15], [7, -13], [8, -13], [9, -13], [9, -13], [2, -16], [0, -21], [-4, -22], [-4, -22], [6, -18], [12, -15], [12, -14], [12, -13], [12, -13], [2, -16], [0, -21], [-4, -22], [-4, -22], [6, -18], [12, -15], [12, -14], [12, -13], [12, -13], [-3, -18], [-5, -19], [-5, -22], [-4, -17], [-2, -17], [-2, -17], [-2, -17], [1, -18], [-3, -18], [-5, -19], [-5, -22], [-4, -17], [-2, -17], [-2, -17], [-2, -17], [1, -18], [-3, -15], [-3, -18], [-4, -20], [0, -18], [0, -16], [0, -16], [0, -16], [1, -15], [-3, -15], [-3, -18], [-4, -20], [0, -18], [0, -16], [0, -16], [0, -16], [1, -15], [4, -15], [4, -18], [4, -20], [1, -18], [1, -16], [1, -16], [1, -16], [0, -15], [4, -15], [4, -18], [4, -20], [1, -18], [1, -16], [1, -16], [1, -16], [0, -15], [4, -18], [6, -19], [5, -22], [4, -17], [3, -17], [3, -17], [3, -17], [0, -18], [4, -18], [6, -19], [5, -22], [4, -17], [3, -17], [3, -17], [3, -17], [0, -18], [-1, -27], [2, -28], [1, -28], [-10, -11], [-10, -11], [-1, -27], [2, -28], [1, -28], [-10, -11], [-10, -11], [-1, -26], [-2, -26], [-3, -26], [-9, -22], [-10, -21], [-1, -26], [-2, -26], [-3, -26], [-9, -22], [-10, -21], [2, -26], [3, -26], [4, -26], [10, -22], [10, -21], [2, -26], [3, -26], [4, -26], [10, -22], [10, -21], [2, -27], [-2, -28], [0, -28], [10, -11], [11, -11], [2, -27], [-2, -28], [0, -28], [10, -11], [11, -11]],
  anchorHead: [[1, -56], [-4, -57], [6, -57], [-4, -57], [-3, -57], [1, -56], [-3, -57], [12, -73], [-4, -57], [12, -73], [12, -72], [-3, -57], [12, -72], [-11, -73], [12, -73], [-11, -73], [5, -57], [11, -72], [5, -57], [6, -57], [-11, -73], [6, -57], [1, -56], [5, -57], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [12, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-12, -71], [-12, -69], [-12, -70], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [4, -56], [4, -55], [4, -53], [4, -54], [4, -56], [4, -55], [4, -53], [4, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [1, -30], [-4, -31], [6, -31], [-4, -31], [-3, -31], [1, -30], [-3, -31], [13, -47], [-4, -31], [13, -47], [12, -46], [-3, -31], [12, -46], [-10, -47], [12, -47], [-12, -47], [4, -31], [10, -46], [4, -31], [5, -31], [-12, -47], [5, -31], [0, -30], [4, -31], [-1, -71], [-7, -40], [-1, -71], [-1, -71], [-7, -40], [-1, -71], [-8, -67], [-10, -41], [-8, -67], [-8, -67], [-10, -41], [-8, -67], [9, -67], [11, -41], [9, -67], [9, -67], [11, -41], [9, -67], [2, -71], [8, -40], [2, -71], [2, -71], [8, -40], [2, -71], [-4, -45], [-4, -46], [-4, -47], [-4, -48], [-4, -47], [-4, -46], [-4, -45], [-4, -46], [-4, -47], [-4, -48], [-4, -47], [-4, -46], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [5, -45], [5, -46], [5, -47], [5, -48], [5, -47], [5, -46], [5, -45], [5, -46], [5, -47], [5, -48], [5, -47], [5, -46], [-4, -45], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [-4, -45], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [11, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [11, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [-10, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [-10, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [5, -45], [5, -50], [2, -51], [23, -37], [26, -35], [5, -45], [5, -50], [2, -51], [23, -37], [26, -35], [14, -67], [21, -68], [14, -67], [14, -67], [21, -68], [14, -67], [11, -68], [18, -67], [11, -68], [11, -68], [18, -67], [11, -68], [-10, -68], [-17, -67], [-10, -68], [-10, -68], [-17, -67], [-10, -68], [-13, -67], [-20, -68], [-13, -67], [-13, -67], [-20, -68], [-13, -67], [26, -66], [26, -66], [22, -61], [22, -61], [-21, -61], [-21, -61], [-25, -66], [-25, -66], [39, -13], [39, -13], [32, 28], [32, 28], [-31, 28], [-31, 28], [-38, -13], [-38, -13], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -45], [-3, -49], [-2, -50], [-2, -50], [-19, -45], [-31, -39], [-32, -38], [-33, -37], [-33, -37], [-4, -45], [-3, -49], [-2, -50], [-2, -50], [-19, -45], [-31, -39], [-32, -38], [-33, -37], [-33, -37], [11, -64], [16, -65], [18, -66], [18, -66], [-1, -60], [-6, -58], [-7, -58], [-8, -57], [-8, -57], [11, -64], [16, -65], [18, -66], [18, -66], [-1, -60], [-6, -58], [-7, -58], [-8, -57], [-8, -57], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [2, -60], [7, -58], [8, -58], [9, -57], [9, -57], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [2, -60], [7, -58], [8, -58], [9, -57], [9, -57], [5, -45], [4, -49], [3, -50], [3, -50], [20, -45], [32, -39], [33, -38], [34, -37], [34, -37], [5, -45], [4, -49], [3, -50], [3, -50], [20, -45], [32, -39], [33, -38], [34, -37], [34, -37], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [14, -62], [14, -63], [14, -64], [19, -60], [19, -59], [19, -59], [19, -59], [22, -58], [14, -62], [14, -63], [14, -64], [19, -60], [19, -59], [19, -59], [19, -59], [22, -58], [-13, -62], [-13, -63], [-13, -64], [-18, -60], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [-13, -62], [-13, -63], [-13, -64], [-18, -60], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [-4, -57], [-3, -58], [-3, -58], [-33, -31], [-34, -31], [-4, -57], [-3, -58], [-3, -58], [-33, -31], [-34, -31], [12, -74], [11, -75], [10, -76], [-11, -66], [-11, -65], [12, -74], [11, -75], [10, -76], [-11, -66], [-11, -65], [-11, -74], [-10, -75], [-9, -76], [12, -66], [12, -65], [-11, -74], [-10, -75], [-9, -76], [12, -66], [12, -65], [5, -57], [4, -58], [4, -58], [34, -31], [35, -31], [5, -57], [4, -58], [4, -58], [34, -31], [35, -31]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108]
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 38, 71, 106, 146, 186, 227, 265, 300, 338, 379, 418, 455, 494, 526, 564, 610, 651, 683, 722, 766, 805, 833, 875, 923, 965, 992, 1033, 1081, 1121, 1152, 1190, 1232, 1270, 1301, 1339, 1386, 1430, 1469, 1508, 1543, 1582, 1621, 1660, 1695, 1734, 1782, 1837, 1896, 1949, 1991, 2025, 2064, 2105, 2153, 2191, 2229, 2267, 2306, 2348, 2388, 2428, 2467, 2506, 2545, 2586, 2627, 2662, 2694, 2726, 2793, 2855, 2895, 2934, 2972, 3021, 3068, 3113, 3159, 3215, 3280, 3345, 3393, 3433, 3479, 3527, 3575, 3625, 3677, 3729, 3776, 3810, 3851, 3893, 3935, 3979, 4026, 4073, 4121, 4161, 4221, 4265, 4311, 4363, 4402, 4453, 4490, 4524],
  widths: [38, 33, 35, 40, 40, 41, 38, 35, 38, 41, 39, 37, 39, 32, 38, 46, 41, 32, 39, 44, 39, 28, 42, 48, 42, 27, 41, 48, 40, 31, 38, 42, 38, 31, 38, 47, 44, 39, 39, 35, 39, 39, 39, 35, 39, 48, 55, 59, 53, 42, 34, 39, 41, 48, 38, 38, 38, 39, 42, 40, 40, 39, 39, 39, 41, 41, 35, 32, 32, 67, 62, 40, 39, 38, 49, 47, 45, 46, 56, 65, 65, 48, 40, 46, 48, 48, 50, 52, 52, 47, 34, 41, 42, 42, 44, 47, 47, 48, 40, 60, 44, 46, 52, 39, 51, 37, 34, 56],
  heights: [74, 73, 71, 71, 73, 69, 72, 75, 73, 69, 72, 75, 73, 74, 71, 68, 70, 70, 71, 73, 76, 72, 71, 69, 68, 69, 68, 68, 70, 72, 74, 70, 70, 67, 68, 67, 68, 68, 70, 67, 67, 68, 70, 67, 67, 61, 55, 44, 43, 38, 68, 57, 60, 50, 70, 72, 74, 75, 74, 72, 67, 69, 71, 72, 71, 69, 76, 77, 76, 65, 67, 69, 69, 69, 69, 66, 69, 62, 48, 42, 66, 66, 74, 73, 74, 73, 69, 68, 68, 71, 71, 70, 69, 72, 66, 65, 65, 62, 70, 77, 70, 68, 67, 69, 73, 68, 67, 68],
  bodyOffsets: [[0, -29], [0, -29], [0, -29], [-1, -29], [-1, -29], [-1, -29], [-4, -29], [-4, -29], [-4, -29], [-4, -30], [-4, -30], [-4, -30], [0, -29], [0, -29], [0, -29], [3, -30], [3, -30], [3, -30], [4, -29], [4, -29], [4, -29], [1, -29], [1, -29], [1, -29], [-2, -29], [0, -27], [1, -24], [1, -26], [0, -29], [-2, -27], [-2, -24], [-2, -26], [-1, -27], [-3, -27], [-3, -27], [-1, -27], [-1, -29], [-1, -27], [-2, -24], [-1, -24], [-3, -26], [-3, -25], [-4, -24], [-3, -26], [-2, -27], [-4, -27], [-4, -25], [-4, -25], [-2, -28], [-3, -26], [-1, -26], [-3, -27], [-2, -30], [-5, -29], [-3, -27], [-3, -28], [0, -29], [0, -27], [1, -25], [0, -26], [0, -29], [0, -27], [-1, -25], [-1, -27], [3, -28], [3, -26], [1, -26], [3, -27], [3, -30], [5, -29], [4, -27], [3, -28], [3, -26], [3, -25], [4, -24], [3, -26], [3, -27], [5, -27], [4, -25], [4, -25], [1, -27], [3, -27], [3, -27], [2, -27], [1, -29], [2, -27], [2, -24], [2, -24], [-4, -10], [-4, -10], [-4, -10], [-6, -12], [-6, -12], [-6, -12], [-11, -18], [-11, -18], [-11, -18], [-14, -17], [-14, -17], [-14, -17], [-4, -22], [-4, -22], [-4, -22], [14, -17], [14, -17], [14, -17], [12, -18], [12, -18], [12, -18], [7, -12], [7, -12], [7, -12], [2, -25], [0, -18], [2, -25], [2, -25], [0, -18], [2, -25], [-3, -25], [-7, -22], [-3, -25], [-3, -25], [-7, -22], [-3, -25], [4, -25], [7, -22], [4, -25], [4, -25], [7, -22], [4, -25], [-2, -25], [1, -18], [-2, -25], [-2, -25], [1, -18], [-2, -25], [0, -28], [0, -29], [0, -30], [0, -30], [0, -30], [1, -29], [0, -28], [0, -29], [0, -30], [0, -30], [0, -30], [1, -29], [-2, -28], [-2, -29], [-2, -30], [-2, -31], [-1, -30], [-1, -29], [-2, -28], [-2, -29], [-2, -30], [-2, -31], [-1, -30], [-1, -29], [2, -28], [3, -29], [3, -30], [3, -31], [2, -30], [2, -29], [2, -28], [3, -29], [3, -30], [3, -31], [2, -30], [2, -29], [0, -28], [0, -29], [0, -30], [1, -30], [0, -30], [-1, -29], [0, -28], [0, -29], [0, -30], [1, -30], [0, -30], [-1, -29], [-4, -29], [-3, -29], [-3, -29], [-15, -16], [-16, -17], [-4, -29], [-3, -29], [-3, -29], [-15, -16], [-16, -17], [-4, -32], [-4, -33], [-5, -33], [-9, -26], [-9, -25], [-4, -32], [-4, -33], [-5, -33], [-9, -26], [-9, -25], [4, -32], [5, -33], [5, -33], [10, -26], [10, -25], [4, -32], [5, -33], [5, -33], [10, -26], [10, -25], [5, -29], [3, -29], [3, -29], [16, -16], [16, -17], [5, -29], [3, -29], [3, -29], [16, -16], [16, -17], [9, -28], [16, -31], [9, -28], [9, -28], [16, -31], [9, -28], [-1, -25], [5, -24], [-1, -25], [-1, -25], [5, -24], [-1, -25], [1, -25], [-5, -24], [1, -25], [1, -25], [-5, -24], [1, -25], [-8, -28], [-15, -31], [-8, -28], [-8, -28], [-15, -31], [-8, -28], [20, -32], [20, -32], [7, -24], [7, -24], [-7, -24], [-7, -24], [-19, -32], [-19, -32], [4, -9], [4, -9], [5, -6], [5, -6], [-4, -6], [-4, -6], [-4, -9], [-4, -9], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [0, -29], [-4, -29], [-3, -29], [-3, -29], [-15, -16], [-15, -17], [-16, -17], [-16, -17], [-16, -17], [-16, -17], [-4, -29], [-3, -29], [-3, -29], [-15, -16], [-15, -17], [-16, -17], [-16, -17], [-16, -17], [-16, -17], [-4, -32], [-4, -33], [-5, -33], [-9, -26], [-11, -27], [-9, -25], [-9, -25], [-9, -25], [-9, -25], [-4, -32], [-4, -33], [-5, -33], [-9, -26], [-11, -27], [-9, -25], [-9, -25], [-9, -25], [-9, -25], [4, -32], [5, -33], [5, -33], [10, -26], [11, -27], [10, -25], [10, -25], [10, -25], [10, -25], [4, -32], [5, -33], [5, -33], [10, -26], [11, -27], [10, -25], [10, -25], [10, -25], [10, -25], [5, -29], [3, -29], [3, -29], [16, -16], [16, -17], [16, -17], [16, -17], [16, -17], [16, -17], [5, -29], [3, -29], [3, -29], [16, -16], [16, -17], [16, -17], [16, -17], [16, -17], [16, -17], [0, -26], [0, -25], [0, -26], [0, -25], [4, -23], [5, -23], [5, -23], [3, -24], [0, -26], [0, -25], [0, -26], [0, -25], [4, -23], [5, -23], [5, -23], [3, -24], [-1, -28], [-2, -28], [-1, -27], [-1, -29], [4, -26], [6, -25], [6, -25], [6, -23], [-1, -28], [-2, -28], [-1, -27], [-1, -29], [4, -26], [6, -25], [6, -25], [6, -23], [1, -28], [3, -28], [1, -27], [1, -29], [-4, -26], [-5, -25], [-5, -25], [-6, -23], [1, -28], [3, -28], [1, -27], [1, -29], [-4, -26], [-5, -25], [-5, -25], [-6, -23], [0, -26], [0, -25], [0, -26], [0, -25], [-4, -23], [-5, -23], [-5, -23], [-2, -24], [0, -26], [0, -25], [0, -26], [0, -25], [-4, -23], [-5, -23], [-5, -23], [-2, -24], [0, -29], [0, -29], [2, -31], [0, -28], [-1, -28], [-11, -21], [0, -29], [0, -29], [2, -31], [0, -28], [-1, -28], [-11, -21], [-4, -28], [-4, -25], [-4, -27], [-1, -24], [0, -23], [-10, -29], [-4, -28], [-4, -25], [-4, -27], [-1, -24], [0, -23], [-10, -29], [4, -28], [5, -25], [5, -27], [2, -24], [0, -23], [10, -29], [4, -28], [5, -25], [5, -27], [2, -24], [0, -23], [10, -29], [0, -29], [0, -29], [-2, -31], [0, -28], [1, -28], [11, -21], [0, -29], [0, -29], [-2, -31], [0, -28], [1, -28], [11, -21]],
  anchorHead: [[-1, -61], [-6, -62], [5, -62], [-6, -62], [-5, -62], [-1, -61], [-5, -62], [11, -78], [-6, -62], [11, -78], [11, -77], [-5, -62], [11, -77], [-11, -78], [11, -78], [-11, -78], [5, -62], [11, -77], [5, -62], [6, -62], [-11, -78], [6, -62], [1, -61], [5, -62], [-1, -58], [-1, -57], [-1, -55], [-1, -56], [-1, -58], [-1, -57], [-1, -55], [-1, -56], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [-5, -59], [-5, -58], [-5, -56], [-5, -57], [11, -75], [11, -74], [11, -72], [11, -73], [11, -75], [11, -74], [11, -72], [11, -73], [11, -74], [11, -73], [11, -71], [11, -72], [11, -74], [11, -73], [11, -71], [11, -72], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -73], [6, -59], [6, -58], [6, -56], [6, -57], [6, -59], [6, -58], [6, -56], [6, -57], [7, -59], [7, -58], [7, -56], [7, -57], [7, -59], [7, -58], [7, -56], [7, -57], [-1, -34], [-7, -35], [4, -35], [-6, -35], [-5, -35], [-1, -34], [-5, -35], [11, -51], [-6, -35], [11, -51], [11, -50], [-5, -35], [11, -50], [-11, -51], [11, -51], [-11, -51], [5, -35], [11, -50], [5, -35], [6, -35], [-11, -51], [7, -35], [1, -34], [6, -35], [-9, -73], [-16, -41], [-9, -73], [-9, -73], [-16, -41], [-9, -73], [-16, -69], [-20, -47], [-16, -69], [-16, -69], [-20, -47], [-16, -69], [17, -69], [21, -47], [17, -69], [17, -69], [21, -47], [17, -69], [10, -73], [17, -41], [10, -73], [10, -73], [17, -41], [10, -73], [-5, -58], [-5, -60], [-5, -62], [-5, -63], [-5, -62], [-5, -60], [-5, -58], [-5, -60], [-5, -62], [-5, -63], [-5, -62], [-5, -60], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [12, -74], [12, -76], [12, -78], [12, -79], [12, -78], [12, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [-11, -74], [-11, -76], [-11, -78], [-11, -79], [-11, -78], [-11, -76], [6, -58], [6, -60], [6, -62], [6, -63], [6, -62], [6, -60], [6, -58], [6, -60], [6, -62], [6, -63], [6, -62], [6, -60], [-5, -62], [-4, -63], [-6, -62], [-21, -36], [-23, -39], [-5, -62], [-4, -63], [-6, -62], [-21, -36], [-23, -39], [11, -80], [12, -82], [9, -82], [0, -72], [1, -72], [11, -80], [12, -82], [9, -82], [0, -72], [1, -72], [-10, -80], [-11, -82], [-8, -82], [1, -72], [0, -72], [-10, -80], [-11, -82], [-8, -82], [1, -72], [0, -72], [6, -62], [5, -63], [7, -62], [22, -36], [24, -39], [6, -62], [5, -63], [7, -62], [22, -36], [24, -39], [27, -71], [37, -74], [27, -71], [27, -71], [37, -74], [27, -71], [16, -73], [25, -70], [16, -73], [16, -73], [25, -70], [16, -73], [-15, -73], [-24, -70], [-15, -73], [-15, -73], [-24, -70], [-15, -73], [-26, -71], [-36, -74], [-26, -71], [-26, -71], [-36, -74], [-26, -71], [45, -72], [45, -72], [33, -65], [33, -65], [-32, -65], [-32, -65], [-44, -72], [-44, -72], [41, -26], [41, -26], [44, 13], [44, 13], [-43, 13], [-43, 13], [-40, -26], [-40, -26], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-1, -61], [-5, -62], [-4, -63], [-6, -62], [-21, -36], [-23, -38], [-23, -39], [-23, -39], [-23, -39], [-23, -39], [-5, -62], [-4, -63], [-6, -62], [-21, -36], [-23, -38], [-23, -39], [-23, -39], [-23, -39], [-23, -39], [11, -80], [12, -82], [9, -82], [0, -72], [-1, -73], [1, -72], [1, -72], [1, -72], [1, -72], [11, -80], [12, -82], [9, -82], [0, -72], [-1, -73], [1, -72], [1, -72], [1, -72], [1, -72], [-10, -80], [-11, -82], [-8, -82], [1, -72], [2, -73], [0, -72], [0, -72], [0, -72], [0, -72], [-10, -80], [-11, -82], [-8, -82], [1, -72], [2, -73], [0, -72], [0, -72], [0, -72], [0, -72], [6, -62], [5, -63], [7, -62], [22, -36], [24, -38], [24, -39], [24, -39], [24, -39], [24, -39], [6, -62], [5, -63], [7, -62], [22, -36], [24, -38], [24, -39], [24, -39], [24, -39], [24, -39], [-3, -58], [-2, -57], [0, -56], [0, -54], [4, -53], [5, -52], [5, -52], [0, -54], [-3, -58], [-2, -57], [0, -56], [0, -54], [4, -53], [5, -52], [5, -52], [0, -54], [13, -76], [16, -75], [20, -74], [21, -73], [23, -71], [24, -70], [24, -70], [25, -66], [13, -76], [16, -75], [20, -74], [21, -73], [23, -71], [24, -70], [24, -70], [25, -66], [-12, -76], [-15, -75], [-19, -74], [-20, -73], [-22, -71], [-23, -70], [-23, -70], [-24, -66], [-12, -76], [-15, -75], [-19, -74], [-20, -73], [-22, -71], [-23, -70], [-23, -70], [-24, -66], [4, -58], [3, -57], [1, -56], [1, -54], [-3, -53], [-4, -52], [-4, -52], [1, -54], [4, -58], [3, -57], [1, -56], [1, -54], [-3, -53], [-4, -52], [-4, -52], [1, -54], [-5, -59], [-3, -60], [-3, -65], [-5, -56], [-4, -54], [-11, -50], [-5, -59], [-3, -60], [-3, -65], [-5, -56], [-4, -54], [-11, -50], [10, -73], [10, -70], [11, -75], [11, -72], [11, -71], [5, -71], [10, -73], [10, -70], [11, -75], [11, -72], [11, -71], [5, -71], [-9, -73], [-9, -70], [-10, -75], [-10, -72], [-10, -71], [-4, -71], [-9, -73], [-9, -70], [-10, -75], [-10, -72], [-10, -71], [-4, -71], [6, -59], [4, -60], [4, -65], [6, -56], [5, -54], [12, -50], [6, -59], [4, -60], [4, -65], [6, -56], [5, -54], [12, -50]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 68, 69, 80, 70, 70, 70, 70, 66, 67, 68, 69, 80, 70, 70, 70, 70, 71, 72, 73, 74, 81, 75, 75, 75, 75, 71, 72, 73, 74, 81, 75, 75, 75, 75, 71, 72, 73, 74, 81, 75, 75, 75, 75, 71, 72, 73, 74, 81, 75, 75, 75, 75, 66, 67, 68, 69, 80, 70, 70, 70, 70, 66, 67, 68, 69, 80, 70, 70, 70, 70, 82, 83, 84, 85, 86, 87, 88, 89, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 90, 91, 92, 93, 94, 95, 96, 97, 82, 83, 84, 85, 86, 87, 88, 89, 82, 83, 84, 85, 86, 87, 88, 89, 54, 98, 99, 100, 101, 102, 54, 98, 99, 100, 101, 102, 60, 103, 104, 105, 106, 107, 60, 103, 104, 105, 106, 107, 60, 103, 104, 105, 106, 107, 60, 103, 104, 105, 106, 107, 54, 98, 99, 100, 101, 102, 54, 98, 99, 100, 101, 102]
};

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 51, 100, 137, 180, 226, 276, 326, 375, 425, 475, 525, 574, 624, 668, 713, 757, 799, 843, 889, 935, 981, 1017, 1064, 1111, 1155, 1194, 1243, 1292, 1334, 1373, 1414, 1455, 1496, 1535, 1571, 1607, 1643, 1687, 1730, 1772, 1815, 1859, 1901, 1942, 1984, 2061, 2123, 2176, 2225, 2291, 2336, 2381, 2423, 2472, 2520, 2568, 2615, 2661, 2708, 2755, 2805, 2854, 2904, 2952, 3002, 3052, 3104, 3159, 3225, 3285, 3326, 3364, 3419, 3469, 3531, 3585, 3652, 3721, 3790, 3874, 3926, 3981, 4047, 4107, 4167, 4208, 4246, 4301, 4354, 4404, 4458, 4512, 4577, 4641, 4698, 4752, 4806, 4850, 4895, 4947, 4997, 5041, 5076, 5110, 5165, 5219, 5268, 5315, 5361, 5412, 5461, 5522, 5586],
  widths: [51, 49, 37, 43, 46, 50, 50, 49, 50, 50, 50, 49, 50, 44, 45, 44, 42, 44, 46, 46, 46, 36, 47, 47, 44, 39, 49, 49, 42, 39, 41, 41, 41, 39, 36, 36, 36, 44, 43, 42, 43, 44, 42, 41, 42, 77, 62, 53, 49, 66, 45, 45, 42, 49, 48, 48, 47, 46, 47, 47, 50, 49, 50, 48, 50, 50, 52, 55, 66, 60, 41, 38, 55, 50, 62, 54, 67, 69, 69, 84, 52, 55, 66, 60, 60, 41, 38, 55, 53, 50, 54, 54, 65, 64, 57, 54, 54, 44, 45, 52, 50, 44, 35, 34, 55, 54, 49, 47, 46, 51, 49, 61, 64, 57],
  heights: [78, 78, 77, 74, 75, 78, 77, 77, 78, 76, 76, 77, 78, 78, 75, 74, 78, 78, 77, 78, 79, 77, 76, 74, 74, 75, 75, 75, 75, 74, 75, 71, 70, 71, 72, 70, 71, 69, 74, 70, 69, 69, 70, 70, 69, 53, 53, 52, 53, 46, 79, 74, 70, 68, 78, 78, 79, 79, 78, 76, 78, 78, 79, 79, 77, 76, 79, 80, 67, 63, 75, 75, 72, 71, 77, 70, 75, 69, 67, 50, 79, 80, 67, 65, 63, 75, 75, 72, 72, 71, 79, 78, 66, 65, 64, 64, 67, 76, 76, 69, 70, 67, 68, 68, 78, 76, 78, 77, 76, 74, 74, 77, 76, 75],
  bodyOffsets: [[1, -25], [1, -25], [1, -25], [-1, -26], [-1, -26], [-1, -26], [0, -26], [0, -26], [0, -26], [1, -26], [1, -26], [1, -26], [0, -25], [0, -25], [0, -25], [0, -26], [0, -26], [0, -26], [1, -26], [1, -26], [1, -26], [2, -26], [2, -26], [2, -26], [1, -24], [0, -23], [0, -21], [0, -22], [1, -25], [1, -24], [2, -21], [1, -22], [0, -25], [-1, -25], [-2, -24], [0, -23], [0, -25], [0, -24], [0, -22], [0, -22], [0, -25], [-4, -25], [-4, -24], [-3, -25], [-1, -26], [-4, -25], [-4, -23], [-1, -24], [-1, -25], [-1, -23], [-1, -23], [-1, -25], [-1, -26], [-2, -25], [-2, -24], [-2, -24], [-1, -27], [-1, -24], [-2, -24], [-1, -25], [-1, -27], [-1, -26], [0, -24], [-1, -25], [2, -25], [2, -23], [2, -23], [2, -25], [2, -26], [2, -25], [2, -24], [2, -24], [0, -25], [5, -25], [5, -24], [3, -25], [2, -26], [5, -25], [5, -23], [1, -24], [0, -25], [2, -25], [2, -24], [0, -23], [0, -25], [0, -24], [0, -22], [0, -22], [1, -13], [1, -13], [1, -13], [4, -14], [4, -14], [4, -14], [3, -15], [3, -15], [3, -15], [0, -13], [0, -13], [0, -13], [0, -16], [0, -16], [0, -16], [1, -13], [1, -13], [1, -13], [-2, -15], [-2, -15], [-2, -15], [-4, -14], [-4, -14], [-4, -14], [-8, -16], [-9, -11], [-8, -16], [-8, -16], [-9, -11], [-8, -16], [-5, -23], [-8, -21], [-5, -23], [-5, -23], [-8, -21], [-5, -23], [5, -23], [9, -21], [5, -23], [5, -23], [9, -21], [5, -23], [9, -16], [10, -11], [9, -16], [9, -16], [10, -11], [9, -16], [-4, -24], [-4, -24], [-3, -24], [-2, -24], [-2, -24], [-3, -23], [-4, -24], [-4, -24], [-3, -24], [-2, -24], [-2, -24], [-3, -23], [1, -31], [1, -31], [0, -31], [0, -31], [1, -30], [1, -30], [1, -31], [1, -31], [0, -31], [0, -31], [1, -30], [1, -30], [-1, -31], [0, -31], [0, -31], [0, -31], [-1, -30], [-1, -30], [-1, -31], [0, -31], [0, -31], [0, -31], [-1, -30], [-1, -30], [4, -24], [4, -24], [4, -24], [2, -24], [3, -24], [4, -23], [4, -24], [4, -24], [4, -24], [2, -24], [3, -24], [4, -23], [-1, -26], [-2, -26], [-2, -27], [-14, -12], [-18, -8], [-1, -26], [-2, -26], [-2, -27], [-14, -12], [-18, -8], [1, -26], [-2, -26], [-2, -27], [-29, -28], [-32, -27], [1, -26], [-2, -26], [-2, -27], [-29, -28], [-32, -27], [0, -26], [3, -26], [2, -27], [30, -28], [32, -27], [0, -26], [3, -26], [2, -27], [30, -28], [32, -27], [2, -26], [2, -26], [3, -27], [14, -12], [18, -8], [2, -26], [2, -26], [3, -27], [14, -12], [18, -8], [7, -22], [9, -21], [7, -22], [7, -22], [9, -21], [7, -22], [1, -25], [3, -24], [1, -25], [1, -25], [3, -24], [1, -25], [-1, -25], [-3, -24], [-1, -25], [-1, -25], [-3, -24], [-1, -25], [-7, -22], [-9, -21], [-7, -22], [-7, -22], [-9, -21], [-7, -22], [9, -20], [9, -20], [-2, -22], [-2, -22], [3, -22], [3, -22], [-8, -20], [-8, -20], [8, 2], [8, 2], [-9, 9], [-9, 9], [9, 9], [9, 9], [-7, 2], [-7, 2], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-4, -24], [-3, -27], [-3, -28], [-3, -28], [-14, -13], [-17, -12], [-17, -11], [-17, -11], [-17, -11], [-4, -24], [-3, -27], [-3, -28], [-3, -28], [-14, -13], [-17, -12], [-17, -11], [-17, -11], [-17, -11], [-1, -29], [-1, -28], [-1, -29], [-1, -29], [-22, -29], [-22, -29], [-24, -28], [-24, -28], [-24, -28], [-1, -29], [-1, -28], [-1, -29], [-1, -29], [-22, -29], [-22, -29], [-24, -28], [-24, -28], [-24, -28], [1, -29], [2, -28], [1, -29], [1, -29], [23, -29], [23, -29], [24, -28], [24, -28], [24, -28], [1, -29], [2, -28], [1, -29], [1, -29], [23, -29], [23, -29], [24, -28], [24, -28], [24, -28], [4, -24], [3, -27], [4, -28], [4, -28], [14, -13], [17, -12], [17, -11], [17, -11], [17, -11], [4, -24], [3, -27], [4, -28], [4, -28], [14, -13], [17, -12], [17, -11], [17, -11], [17, -11], [-4, -24], [-3, -28], [-3, -28], [-10, -21], [-11, -20], [-14, -20], [-16, -20], [-16, -18], [-4, -24], [-3, -28], [-3, -28], [-10, -21], [-11, -20], [-14, -20], [-16, -20], [-16, -18], [-1, -29], [-3, -29], [-2, -30], [2, -27], [0, -28], [-4, -26], [-8, -27], [-8, -27], [-1, -29], [-3, -29], [-2, -30], [2, -27], [0, -28], [-4, -26], [-8, -27], [-8, -27], [1, -29], [3, -29], [3, -30], [-2, -27], [0, -28], [4, -26], [9, -27], [8, -27], [1, -29], [3, -29], [3, -30], [-2, -27], [0, -28], [4, -26], [9, -27], [8, -27], [4, -24], [3, -28], [3, -28], [11, -21], [11, -20], [15, -20], [16, -20], [16, -18], [4, -24], [3, -28], [3, -28], [11, -21], [11, -20], [15, -20], [16, -20], [16, -18], [-1, -26], [2, -26], [-1, -27], [-11, -20], [-15, -17], [-16, -17], [-1, -26], [2, -26], [-1, -27], [-11, -20], [-15, -17], [-16, -17], [1, -26], [-3, -26], [-3, -26], [-9, -27], [-10, -27], [-12, -26], [1, -26], [-3, -26], [-3, -26], [-9, -27], [-10, -27], [-12, -26], [0, -26], [4, -26], [4, -26], [10, -27], [10, -27], [13, -26], [0, -26], [4, -26], [4, -26], [10, -27], [10, -27], [13, -26], [2, -26], [-1, -26], [1, -27], [12, -20], [16, -17], [16, -17], [2, -26], [-1, -26], [1, -27], [12, -20], [16, -17], [16, -17]],
  anchorHead: [[1, -55], [-4, -56], [6, -56], [-5, -56], [-5, -56], [-1, -55], [-5, -56], [11, -72], [-6, -56], [11, -72], [11, -71], [-5, -56], [11, -71], [-11, -72], [11, -72], [-10, -72], [6, -56], [11, -71], [6, -56], [7, -56], [-10, -72], [6, -56], [1, -54], [6, -56], [1, -54], [1, -53], [1, -51], [1, -52], [1, -54], [1, -53], [1, -51], [1, -52], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [-5, -55], [-5, -54], [-5, -52], [-5, -53], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [11, -70], [11, -69], [11, -67], [11, -68], [11, -70], [11, -69], [11, -67], [11, -68], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [-10, -71], [-10, -70], [-10, -68], [-10, -69], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [6, -55], [6, -54], [6, -52], [6, -53], [0, -31], [-4, -32], [5, -32], [-4, -32], [-4, -32], [1, -31], [-4, -32], [12, -48], [-4, -32], [12, -48], [12, -47], [-4, -32], [12, -47], [-10, -48], [12, -48], [-11, -48], [5, -32], [11, -47], [5, -32], [5, -32], [-11, -48], [5, -32], [1, -31], [5, -32], [-14, -67], [-18, -40], [-14, -67], [-14, -67], [-18, -40], [-14, -67], [-11, -69], [-12, -50], [-11, -69], [-11, -69], [-12, -50], [-11, -69], [12, -69], [13, -50], [12, -69], [12, -69], [13, -50], [12, -69], [15, -67], [19, -40], [15, -67], [15, -67], [19, -40], [15, -67], [-6, -54], [-6, -55], [-6, -56], [-6, -56], [-6, -55], [-6, -53], [-6, -54], [-6, -55], [-6, -56], [-6, -56], [-6, -55], [-6, -53], [13, -77], [13, -78], [13, -79], [13, -79], [13, -77], [13, -76], [13, -77], [13, -78], [13, -79], [13, -79], [13, -77], [13, -76], [-12, -77], [-12, -78], [-12, -79], [-12, -79], [-12, -77], [-12, -76], [-12, -77], [-12, -78], [-12, -79], [-12, -79], [-12, -77], [-12, -76], [7, -54], [7, -55], [7, -56], [7, -56], [7, -55], [7, -53], [7, -54], [7, -55], [7, -56], [7, -56], [7, -55], [7, -53], [-5, -56], [-6, -57], [-6, -58], [-33, -33], [-36, -27], [-5, -56], [-6, -57], [-6, -58], [-33, -33], [-36, -27], [11, -72], [9, -73], [7, -76], [-26, -72], [-29, -69], [11, -72], [9, -73], [7, -76], [-26, -72], [-29, -69], [-10, -72], [-8, -73], [-6, -76], [27, -72], [30, -69], [-10, -72], [-8, -73], [-6, -76], [27, -72], [30, -69], [6, -56], [7, -57], [7, -58], [34, -33], [37, -27], [6, -56], [7, -57], [7, -58], [34, -33], [37, -27], [23, -63], [27, -62], [23, -63], [23, -63], [27, -62], [23, -63], [14, -73], [18, -72], [14, -73], [14, -73], [18, -72], [14, -73], [-13, -73], [-17, -72], [-13, -73], [-13, -73], [-17, -72], [-13, -73], [-22, -63], [-26, -62], [-22, -63], [-22, -63], [-26, -62], [-22, -63], [28, -61], [28, -61], [18, -71], [18, -71], [-17, -71], [-17, -71], [-27, -61], [-27, -61], [36, -20], [36, -20], [37, 25], [37, 25], [-36, 25], [-36, 25], [-35, -20], [-35, -20], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-5, -56], [-6, -54], [-7, -58], [-6, -59], [-6, -59], [-35, -33], [-36, -31], [-37, -29], [-37, -29], [-37, -29], [-6, -54], [-7, -58], [-6, -59], [-6, -59], [-35, -33], [-36, -31], [-37, -29], [-37, -29], [-37, -29], [11, -75], [10, -75], [9, -78], [9, -78], [-18, -76], [-20, -74], [-20, -72], [-20, -72], [-20, -72], [11, -75], [10, -75], [9, -78], [9, -78], [-18, -76], [-20, -74], [-20, -72], [-20, -72], [-20, -72], [-10, -75], [-9, -75], [-8, -78], [-8, -78], [19, -76], [21, -74], [21, -72], [21, -72], [21, -72], [-10, -75], [-9, -75], [-8, -78], [-8, -78], [19, -76], [21, -74], [21, -72], [21, -72], [21, -72], [7, -54], [8, -58], [7, -59], [7, -59], [36, -33], [37, -31], [38, -29], [38, -29], [38, -29], [7, -54], [8, -58], [7, -59], [7, -59], [36, -33], [37, -31], [38, -29], [38, -29], [38, -29], [-6, -54], [-6, -59], [-8, -58], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [-6, -54], [-6, -59], [-8, -58], [-25, -43], [-26, -42], [-27, -41], [-27, -41], [-27, -41], [11, -75], [10, -75], [10, -76], [2, -71], [1, -70], [0, -69], [0, -69], [0, -69], [11, -75], [10, -75], [10, -76], [2, -71], [1, -70], [0, -69], [0, -69], [0, -69], [-10, -75], [-9, -75], [-9, -76], [-1, -71], [0, -70], [1, -69], [1, -69], [1, -69], [-10, -75], [-9, -75], [-9, -76], [-1, -71], [0, -70], [1, -69], [1, -69], [1, -69], [7, -54], [7, -59], [9, -58], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [7, -54], [7, -59], [9, -58], [26, -43], [27, -42], [28, -41], [28, -41], [28, -41], [-5, -56], [-5, -56], [-7, -56], [-22, -46], [-24, -43], [-24, -42], [-5, -56], [-5, -56], [-7, -56], [-22, -46], [-24, -43], [-24, -42], [11, -72], [11, -72], [10, -72], [0, -75], [-1, -74], [-1, -73], [11, -72], [11, -72], [10, -72], [0, -75], [-1, -74], [-1, -73], [-10, -72], [-10, -72], [-9, -72], [1, -75], [2, -74], [2, -73], [-10, -72], [-10, -72], [-9, -72], [1, -75], [2, -74], [2, -73], [6, -56], [6, -56], [8, -56], [23, -46], [25, -43], [25, -42], [6, -56], [6, -56], [8, -56], [23, -46], [25, -43], [25, -42]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 80, 81, 81, 82, 83, 84, 84, 84, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 60, 85, 86, 86, 87, 88, 89, 89, 89, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 80, 81, 81, 82, 83, 84, 84, 84, 54, 90, 91, 92, 93, 94, 95, 96, 54, 90, 91, 92, 93, 94, 95, 96, 60, 97, 98, 99, 100, 101, 102, 103, 60, 97, 98, 99, 100, 101, 102, 103, 60, 97, 98, 99, 100, 101, 102, 103, 60, 97, 98, 99, 100, 101, 102, 103, 54, 90, 91, 92, 93, 94, 95, 96, 54, 90, 91, 92, 93, 94, 95, 96, 1, 104, 105, 106, 107, 108, 1, 104, 105, 106, 107, 108, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 3, 109, 110, 111, 112, 113, 1, 104, 105, 106, 107, 108, 1, 104, 105, 106, 107, 108]
};

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 43, 79, 114, 149, 192, 234, 274, 310, 348, 389, 429, 466, 505, 539, 578, 624, 663, 696, 732, 772, 807, 835, 875, 921, 967, 993, 1033, 1078, 1120, 1152, 1188, 1229, 1265, 1296, 1333, 1375, 1416, 1456, 1496, 1535, 1574, 1614, 1654, 1692, 1731, 1777, 1819, 1860, 1902, 1946, 1981, 2017, 2059, 2103, 2139, 2177, 2216, 2256, 2294, 2330, 2364, 2401, 2440, 2482, 2521, 2559, 2600, 2649, 2686, 2738, 2783, 2832, 2878, 2921, 2977, 3042, 3081, 3123, 3165, 3210, 3268, 3326, 3364, 3401, 3438, 3475, 3523, 3569, 3605, 3640, 3674, 3708, 3754, 3801, 3832, 3862, 3893, 3924, 3970, 4015, 4049, 4083, 4115, 4162, 4208, 4250, 4284, 4318, 4353, 4408, 4464],
  widths: [43, 36, 35, 35, 43, 42, 40, 36, 38, 41, 40, 37, 39, 34, 39, 46, 39, 33, 36, 40, 35, 28, 40, 46, 46, 26, 40, 45, 42, 32, 36, 41, 36, 31, 37, 42, 41, 40, 40, 39, 39, 40, 40, 38, 39, 46, 42, 41, 42, 44, 35, 36, 42, 44, 36, 38, 39, 40, 38, 36, 34, 37, 39, 42, 39, 38, 41, 49, 37, 52, 45, 49, 46, 43, 56, 65, 39, 42, 42, 45, 58, 58, 38, 37, 37, 37, 48, 46, 36, 35, 34, 34, 46, 47, 31, 30, 31, 31, 46, 45, 34, 34, 32, 47, 46, 42, 34, 34, 35, 55, 56, 51],
  heights: [74, 73, 69, 72, 71, 71, 68, 69, 73, 71, 68, 69, 73, 74, 69, 67, 68, 67, 68, 67, 71, 69, 69, 67, 67, 67, 68, 65, 67, 69, 70, 68, 69, 67, 67, 64, 65, 69, 72, 70, 70, 69, 72, 69, 70, 49, 48, 45, 41, 42, 61, 56, 62, 57, 73, 74, 74, 73, 72, 72, 72, 73, 73, 71, 70, 71, 63, 64, 63, 63, 68, 65, 66, 63, 46, 43, 69, 69, 69, 69, 69, 67, 70, 69, 68, 68, 65, 66, 75, 75, 76, 76, 66, 65, 73, 73, 72, 72, 72, 71, 73, 74, 75, 72, 70, 69, 72, 72, 72, 72, 71, 70],
  bodyOffsets: [[1, -25], [1, -25], [1, -25], [1, -26], [1, -26], [1, -26], [-2, -28], [-2, -28], [-2, -28], [-1, -24], [-1, -24], [-1, -24], [1, -24], [1, -24], [1, -24], [2, -24], [2, -24], [2, -24], [3, -28], [3, -28], [3, -28], [-1, -26], [-1, -26], [-1, -26], [0, -24], [0, -25], [0, -22], [0, -21], [0, -24], [0, -25], [1, -22], [1, -21], [0, -25], [-1, -26], [-3, -25], [0, -26], [1, -28], [1, -27], [1, -25], [1, -24], [0, -27], [-3, -26], [-3, -25], [-2, -26], [0, -28], [-2, -27], [0, -26], [-2, -26], [0, -24], [0, -23], [0, -22], [0, -22], [0, -25], [0, -24], [-2, -24], [-1, -24], [1, -24], [1, -22], [1, -21], [0, -22], [0, -24], [0, -22], [1, -21], [1, -22], [0, -24], [0, -23], [1, -22], [0, -22], [1, -25], [1, -24], [2, -24], [2, -24], [0, -27], [3, -26], [3, -25], [2, -26], [0, -28], [2, -27], [1, -26], [2, -26], [0, -25], [2, -26], [3, -25], [1, -26], [0, -28], [-1, -27], [-1, -25], [0, -24], [-1, -17], [-1, -17], [-1, -17], [0, -18], [0, -18], [0, -18], [-3, -19], [-3, -19], [-3, -19], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [0, -20], [4, -19], [4, -19], [4, -19], [0, -18], [0, -18], [0, -18], [-4, -20], [-7, -18], [-4, -20], [-4, -20], [-7, -18], [-4, -20], [-6, -21], [-5, -18], [-6, -21], [-6, -21], [-5, -18], [-6, -21], [6, -21], [5, -18], [6, -21], [6, -21], [5, -18], [6, -21], [5, -20], [7, -18], [5, -20], [5, -20], [7, -18], [5, -20], [1, -26], [1, -27], [2, -27], [2, -26], [2, -26], [2, -26], [1, -26], [1, -27], [2, -27], [2, -26], [2, -26], [2, -26], [-1, -24], [0, -24], [1, -24], [1, -24], [1, -24], [0, -23], [-1, -24], [0, -24], [1, -24], [1, -24], [1, -24], [0, -23], [1, -24], [1, -24], [0, -24], [-1, -24], [0, -24], [0, -23], [1, -24], [1, -24], [0, -24], [-1, -24], [0, -24], [0, -23], [-1, -26], [-1, -27], [-1, -27], [-2, -26], [-2, -26], [-2, -26], [-1, -26], [-1, -27], [-1, -27], [-2, -26], [-2, -26], [-2, -26], [1, -22], [0, -34], [1, -26], [1, -26], [1, -26], [1, -22], [0, -34], [1, -26], [1, -26], [1, -26], [-3, -17], [-6, -32], [-1, -24], [-1, -24], [-1, -24], [-3, -17], [-6, -32], [-1, -24], [-1, -24], [-1, -24], [4, -17], [6, -32], [2, -24], [2, -24], [2, -24], [4, -17], [6, -32], [2, -24], [2, -24], [2, -24], [0, -22], [1, -34], [-1, -26], [-1, -26], [-1, -26], [0, -22], [1, -34], [-1, -26], [-1, -26], [-1, -26], [2, -24], [2, -24], [2, -24], [2, -24], [2, -24], [2, -24], [6, -25], [6, -22], [6, -25], [6, -25], [6, -22], [6, -25], [-6, -25], [-5, -22], [-6, -25], [-6, -25], [-5, -22], [-6, -25], [-1, -24], [-1, -24], [-1, -24], [-1, -24], [-1, -24], [-1, -24], [4, -23], [4, -23], [9, -18], [9, -18], [-8, -18], [-8, -18], [-3, -23], [-3, -23], [6, -12], [6, -12], [13, -7], [13, -7], [-12, -7], [-12, -7], [-6, -12], [-6, -12], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [1, -26], [3, -32], [3, -32], [3, -32], [1, -32], [-17, -24], [-18, -23], [-18, -23], [-18, -23], [-18, -23], [3, -32], [3, -32], [3, -32], [1, -32], [-17, -24], [-18, -23], [-18, -23], [-18, -23], [-18, -23], [-6, -24], [-5, -23], [-5, -23], [-5, -23], [-14, -25], [-15, -26], [-15, -26], [-15, -26], [-15, -26], [-6, -24], [-5, -23], [-5, -23], [-5, -23], [-14, -25], [-15, -26], [-15, -26], [-15, -26], [-15, -26], [6, -24], [6, -23], [6, -23], [6, -23], [14, -25], [15, -26], [15, -26], [15, -26], [15, -26], [6, -24], [6, -23], [6, -23], [6, -23], [14, -25], [15, -26], [15, -26], [15, -26], [15, -26], [-2, -32], [-3, -32], [-3, -32], [0, -32], [17, -24], [18, -23], [18, -23], [18, -23], [18, -23], [-2, -32], [-3, -32], [-3, -32], [0, -32], [17, -24], [18, -23], [18, -23], [18, -23], [18, -23], [-4, -23], [-2, -23], [-2, -24], [-2, -24], [-12, -12], [-11, -11], [-11, -11], [-11, -11], [-4, -23], [-2, -23], [-2, -24], [-2, -24], [-12, -12], [-11, -11], [-11, -11], [-11, -11], [-1, -21], [0, -20], [1, -20], [1, -20], [-4, -11], [-4, -9], [-4, -9], [-4, -9], [-1, -21], [0, -20], [1, -20], [1, -20], [-4, -11], [-4, -9], [-4, -9], [-4, -9], [2, -21], [0, -20], [0, -20], [0, -20], [4, -11], [5, -9], [5, -9], [5, -9], [2, -21], [0, -20], [0, -20], [0, -20], [4, -11], [5, -9], [5, -9], [5, -9], [4, -23], [3, -23], [2, -24], [2, -24], [12, -12], [12, -11], [12, -11], [12, -11], [4, -23], [3, -23], [2, -24], [2, -24], [12, -12], [12, -11], [12, -11], [12, -11], [-1, -26], [-1, -27], [-2, -27], [-6, -23], [-8, -22], [-10, -21], [-1, -26], [-1, -27], [-2, -27], [-6, -23], [-8, -22], [-10, -21], [-1, -24], [-1, -24], [-1, -25], [-10, -25], [-12, -24], [-14, -24], [-1, -24], [-1, -24], [-1, -25], [-10, -25], [-12, -24], [-14, -24], [1, -24], [1, -24], [2, -25], [11, -25], [12, -24], [15, -24], [1, -24], [1, -24], [2, -25], [11, -25], [12, -24], [15, -24], [1, -26], [1, -27], [2, -27], [7, -23], [8, -22], [10, -21], [1, -26], [1, -27], [2, -27], [7, -23], [8, -22], [10, -21]],
  anchorHead: [[1, -57], [-4, -58], [7, -58], [-5, -58], [-4, -58], [0, -57], [-4, -58], [12, -74], [-5, -58], [12, -74], [12, -73], [-4, -58], [12, -73], [-10, -74], [12, -74], [-11, -74], [5, -58], [11, -73], [5, -58], [6, -58], [-11, -74], [6, -58], [1, -57], [5, -58], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [0, -37], [-5, -38], [6, -38], [-5, -38], [-4, -38], [0, -37], [-5, -38], [11, -54], [-6, -38], [11, -54], [11, -53], [-4, -38], [11, -53], [-11, -54], [12, -54], [-10, -54], [6, -38], [12, -53], [6, -38], [7, -38], [-10, -54], [6, -38], [0, -36], [5, -38], [-13, -66], [-22, -42], [-13, -66], [-13, -66], [-22, -42], [-13, -66], [-17, -65], [-13, -47], [-17, -65], [-17, -65], [-13, -47], [-17, -65], [18, -65], [14, -47], [18, -65], [18, -65], [14, -47], [18, -65], [14, -66], [23, -42], [14, -66], [14, -66], [23, -42], [14, -66], [-5, -58], [-5, -59], [-5, -59], [-5, -58], [-5, -57], [-5, -57], [-5, -58], [-5, -59], [-5, -59], [-5, -58], [-5, -57], [-5, -57], [12, -74], [12, -75], [12, -75], [12, -74], [12, -73], [12, -73], [12, -74], [12, -75], [12, -75], [12, -74], [12, -73], [12, -73], [-11, -74], [-11, -75], [-11, -75], [-11, -74], [-11, -73], [-11, -73], [-11, -74], [-11, -75], [-11, -75], [-11, -74], [-11, -73], [-11, -73], [6, -58], [6, -59], [6, -59], [6, -58], [6, -57], [6, -57], [6, -58], [6, -59], [6, -59], [6, -58], [6, -57], [6, -57], [-7, -49], [-9, -61], [-5, -58], [-5, -58], [-5, -58], [-7, -49], [-9, -61], [-5, -58], [-5, -58], [-5, -58], [12, -62], [7, -77], [12, -74], [12, -74], [12, -74], [12, -62], [7, -77], [12, -74], [12, -74], [12, -74], [-11, -62], [-6, -77], [-11, -74], [-11, -74], [-11, -74], [-11, -62], [-6, -77], [-11, -74], [-11, -74], [-11, -74], [8, -49], [10, -61], [6, -58], [6, -58], [6, -58], [8, -49], [10, -61], [6, -58], [6, -58], [6, -58], [18, -67], [22, -66], [18, -67], [18, -67], [22, -66], [18, -67], [14, -76], [19, -71], [14, -76], [14, -76], [19, -71], [14, -76], [-13, -76], [-18, -71], [-13, -76], [-13, -76], [-18, -71], [-13, -76], [-17, -67], [-21, -66], [-17, -67], [-17, -67], [-21, -66], [-17, -67], [27, -64], [27, -64], [28, -65], [28, -65], [-27, -65], [-27, -65], [-26, -64], [-26, -64], [43, -30], [43, -30], [56, 15], [56, 15], [-55, 15], [-55, 15], [-42, -30], [-42, -30], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [-5, -58], [5, -66], [7, -66], [7, -66], [2, -66], [-21, -55], [-22, -53], [-22, -53], [-22, -53], [-22, -53], [5, -66], [7, -66], [7, -66], [2, -66], [-21, -55], [-22, -53], [-22, -53], [-22, -53], [-22, -53], [9, -77], [10, -76], [10, -75], [10, -75], [-6, -74], [-7, -75], [-7, -75], [-7, -75], [-7, -75], [9, -77], [10, -76], [10, -75], [10, -75], [-6, -74], [-7, -75], [-7, -75], [-7, -75], [-7, -75], [-8, -77], [-9, -76], [-9, -75], [-9, -75], [7, -74], [8, -75], [8, -75], [8, -75], [8, -75], [-8, -77], [-9, -76], [-9, -75], [-9, -75], [7, -74], [8, -75], [8, -75], [8, -75], [8, -75], [-4, -66], [-6, -66], [-6, -66], [-1, -66], [22, -55], [23, -53], [23, -53], [23, -53], [23, -53], [-4, -66], [-6, -66], [-6, -66], [-1, -66], [22, -55], [23, -53], [23, -53], [23, -53], [23, -53], [-7, -55], [-6, -55], [-5, -56], [-5, -56], [-18, -38], [-20, -36], [-20, -36], [-20, -36], [-7, -55], [-6, -55], [-5, -56], [-5, -56], [-18, -38], [-20, -36], [-20, -36], [-20, -36], [14, -75], [15, -74], [16, -73], [16, -73], [2, -63], [2, -61], [2, -61], [2, -61], [14, -75], [15, -74], [16, -73], [16, -73], [2, -63], [2, -61], [2, -61], [2, -61], [-13, -75], [-14, -74], [-15, -73], [-15, -73], [-1, -63], [-1, -61], [-1, -61], [-1, -61], [-13, -75], [-14, -74], [-15, -73], [-15, -73], [-1, -63], [-1, -61], [-1, -61], [-1, -61], [8, -55], [7, -55], [6, -56], [6, -56], [19, -38], [21, -36], [21, -36], [21, -36], [8, -55], [7, -55], [6, -56], [6, -56], [19, -38], [21, -36], [21, -36], [21, -36], [-6, -58], [-4, -59], [-4, -60], [-14, -53], [-15, -51], [-15, -50], [-6, -58], [-4, -59], [-4, -60], [-14, -53], [-15, -51], [-15, -50], [12, -74], [14, -74], [14, -75], [4, -75], [2, -74], [2, -73], [12, -74], [14, -74], [14, -75], [4, -75], [2, -74], [2, -73], [-11, -74], [-13, -74], [-13, -75], [-3, -75], [-1, -74], [-1, -73], [-11, -74], [-13, -74], [-13, -75], [-3, -75], [-1, -74], [-1, -73], [7, -58], [5, -59], [5, -60], [15, -53], [16, -51], [16, -50], [7, -58], [5, -59], [5, -60], [15, -53], [16, -51], [16, -50]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 1, 1, 1, 66, 67, 1, 1, 1, 68, 69, 3, 3, 3, 68, 69, 3, 3, 3, 68, 69, 3, 3, 3, 68, 69, 3, 3, 3, 66, 67, 1, 1, 1, 66, 67, 1, 1, 1, 70, 71, 70, 70, 71, 70, 72, 73, 72, 72, 73, 72, 72, 73, 72, 72, 73, 72, 70, 71, 70, 70, 71, 70, 71, 71, 73, 73, 73, 73, 71, 71, 74, 74, 75, 75, 75, 75, 74, 74, 1, 1, 1, 1, 1, 1, 1, 1, 76, 77, 78, 79, 80, 81, 81, 81, 81, 76, 77, 78, 79, 80, 81, 81, 81, 81, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 76, 77, 78, 79, 80, 81, 81, 81, 81, 76, 77, 78, 79, 80, 81, 81, 81, 81, 88, 89, 90, 91, 92, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 88, 89, 90, 91, 92, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 100, 101, 102, 103, 104, 105, 100, 101, 102, 103, 104, 105]
};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 34, 69, 97, 125, 158, 192, 225, 257, 290, 324, 358, 391, 424, 458, 500, 541, 577, 611, 649, 686, 721, 747, 794, 839, 873, 899, 944, 987, 1019, 1049, 1080, 1117, 1148, 1177, 1217, 1264, 1306, 1339, 1371, 1401, 1433, 1466, 1496, 1525, 1555, 1615, 1663, 1698, 1750, 1806, 1839, 1873, 1903, 1937, 1972, 2007, 2042, 2077, 2112, 2147, 2175, 2203, 2231, 2259, 2287, 2315, 2359, 2409, 2469, 2530, 2572, 2604, 2655, 2705, 2748, 2793, 2831, 2874, 2919, 2965, 3023, 3083, 3115, 3145, 3174, 3222, 3268, 3297, 3330, 3365, 3416, 3467, 3505, 3543, 3587, 3641, 3695, 3728, 3763, 3805, 3852],
  widths: [34, 35, 28, 28, 33, 34, 33, 32, 33, 34, 34, 33, 33, 34, 42, 41, 36, 34, 38, 37, 35, 26, 47, 45, 34, 26, 45, 43, 32, 30, 31, 37, 31, 29, 40, 47, 42, 33, 32, 30, 32, 33, 30, 29, 30, 60, 48, 35, 52, 56, 33, 34, 30, 34, 35, 35, 35, 35, 35, 35, 28, 28, 28, 28, 28, 28, 44, 50, 60, 61, 42, 32, 51, 50, 43, 45, 38, 43, 45, 46, 58, 60, 32, 30, 29, 48, 46, 29, 33, 35, 51, 51, 38, 38, 44, 54, 54, 33, 35, 42, 47, 49],
  heights: [73, 71, 72, 71, 70, 73, 71, 73, 76, 73, 73, 73, 76, 72, 68, 65, 69, 70, 68, 71, 75, 72, 71, 69, 67, 69, 68, 67, 70, 71, 73, 71, 71, 69, 71, 69, 67, 69, 73, 71, 69, 69, 73, 70, 68, 44, 49, 53, 49, 41, 65, 54, 65, 54, 71, 72, 73, 73, 72, 71, 71, 72, 73, 73, 72, 71, 71, 78, 64, 63, 69, 78, 67, 66, 71, 69, 69, 68, 65, 69, 39, 53, 71, 71, 71, 74, 72, 71, 71, 71, 59, 56, 62, 59, 71, 71, 71, 63, 61, 77, 77, 76],
  bodyOffsets: [[2, -28], [2, -28], [2, -28], [1, -29], [1, -29], [1, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-1, -30], [-1, -30], [-1, -30], [2, -29], [2, -29], [2, -29], [2, -29], [2, -29], [2, -29], [0, -29], [0, -29], [0, -29], [2, -28], [2, -28], [1, -25], [2, -25], [2, -28], [1, -27], [0, -25], [1, -25], [1, -29], [-2, -30], [1, -29], [1, -28], [1, -30], [1, -30], [4, -26], [3, -25], [-2, -29], [-6, -28], [-1, -27], [0, -29], [-2, -30], [-7, -30], [-1, -28], [0, -28], [-2, -29], [-2, -27], [-4, -26], [-2, -27], [-2, -30], [-4, -28], [-4, -27], [-1, -29], [-1, -30], [-1, -27], [-1, -26], [-1, -28], [-1, -30], [-1, -27], [0, -27], [-1, -29], [2, -29], [3, -27], [5, -26], [3, -27], [3, -30], [4, -28], [5, -27], [1, -29], [2, -29], [7, -28], [2, -27], [0, -29], [2, -30], [8, -30], [2, -28], [0, -28], [-1, -29], [2, -30], [0, -29], [-1, -28], [-1, -30], [-1, -30], [-3, -26], [-2, -25], [1, -11], [1, -11], [1, -11], [0, -8], [0, -8], [0, -8], [0, -6], [0, -6], [0, -6], [1, -8], [1, -8], [1, -8], [0, -12], [0, -12], [0, -12], [-1, -8], [-1, -8], [-1, -8], [1, -6], [1, -6], [1, -6], [0, -8], [0, -8], [0, -8], [0, -26], [0, -21], [0, -26], [0, -26], [0, -21], [0, -26], [-3, -26], [-7, -21], [-3, -26], [-3, -26], [-7, -21], [-3, -26], [3, -26], [7, -21], [3, -26], [3, -26], [7, -21], [3, -26], [1, -26], [0, -21], [1, -26], [1, -26], [0, -21], [1, -26], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [-1, -30], [-1, -29], [-1, -29], [-1, -30], [-1, -30], [-1, -30], [-1, -30], [-1, -29], [-2, -29], [-2, -30], [-2, -30], [-2, -30], [-2, -30], [-2, -29], [-2, -29], [-2, -30], [-2, -30], [-2, -30], [-2, -30], [-2, -29], [2, -29], [2, -30], [2, -30], [2, -30], [2, -30], [2, -29], [2, -29], [2, -30], [2, -30], [2, -30], [2, -30], [2, -29], [2, -29], [2, -30], [2, -30], [2, -30], [2, -30], [2, -29], [2, -29], [2, -30], [2, -30], [2, -30], [2, -30], [2, -29], [-1, -29], [3, -29], [3, -33], [-22, -15], [-22, -14], [-1, -29], [3, -29], [3, -33], [-22, -15], [-22, -14], [-2, -29], [-3, -29], [0, -34], [-17, -28], [-18, -28], [-2, -29], [-3, -29], [0, -34], [-17, -28], [-18, -28], [2, -29], [3, -29], [0, -34], [18, -28], [18, -28], [2, -29], [3, -29], [0, -34], [18, -28], [18, -28], [2, -29], [-3, -29], [-3, -33], [22, -15], [23, -14], [2, -29], [-3, -29], [-3, -33], [22, -15], [23, -14], [0, -29], [3, -28], [0, -29], [0, -29], [3, -28], [0, -29], [1, -24], [5, -24], [1, -24], [1, -24], [5, -24], [1, -24], [-1, -24], [-4, -24], [-1, -24], [-1, -24], [-4, -24], [-1, -24], [1, -29], [-2, -28], [1, -29], [1, -29], [-2, -28], [1, -29], [3, -28], [3, -28], [8, -21], [8, -21], [-8, -21], [-8, -21], [-2, -28], [-2, -28], [-2, 0], [-2, 0], [0, 0], [0, 0], [0, 0], [0, 0], [2, 0], [2, 0], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [1, -29], [0, -29], [2, -29], [3, -29], [3, -29], [-5, -21], [-5, -20], [-5, -21], [-5, -21], [-5, -21], [0, -29], [2, -29], [3, -29], [3, -29], [-5, -21], [-5, -20], [-5, -21], [-5, -21], [-5, -21], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-12, -27], [-12, -26], [-12, -27], [-12, -27], [-12, -27], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-12, -27], [-12, -26], [-12, -27], [-12, -27], [-12, -27], [2, -29], [2, -29], [2, -29], [2, -29], [13, -27], [13, -26], [13, -27], [13, -27], [13, -27], [2, -29], [2, -29], [2, -29], [2, -29], [13, -27], [13, -26], [13, -27], [13, -27], [13, -27], [0, -29], [-2, -29], [-2, -29], [-2, -29], [5, -21], [5, -20], [5, -21], [5, -21], [5, -21], [0, -29], [-2, -29], [-2, -29], [-2, -29], [5, -21], [5, -20], [5, -21], [5, -21], [5, -21], [0, -29], [2, -29], [3, -29], [3, -29], [-5, -21], [-5, -20], [-5, -21], [-5, -21], [0, -29], [2, -29], [3, -29], [3, -29], [-5, -21], [-5, -20], [-5, -21], [-5, -21], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-12, -27], [-12, -26], [-12, -27], [-12, -27], [-1, -29], [-1, -29], [-1, -29], [-1, -29], [-12, -27], [-12, -26], [-12, -27], [-12, -27], [2, -29], [2, -29], [2, -29], [2, -29], [13, -27], [13, -26], [13, -27], [13, -27], [2, -29], [2, -29], [2, -29], [2, -29], [13, -27], [13, -26], [13, -27], [13, -27], [0, -29], [-2, -29], [-2, -29], [-2, -29], [5, -21], [5, -20], [5, -21], [5, -21], [0, -29], [-2, -29], [-2, -29], [-2, -29], [5, -21], [5, -20], [5, -21], [5, -21], [-1, -29], [2, -27], [2, -25], [-3, -28], [2, -28], [4, -28], [-1, -29], [2, -27], [2, -25], [-3, -28], [2, -28], [4, -28], [-2, -29], [0, -21], [1, -19], [-13, -27], [-10, -27], [-9, -27], [-2, -29], [0, -21], [1, -19], [-13, -27], [-10, -27], [-9, -27], [2, -29], [1, -21], [0, -19], [13, -27], [11, -27], [10, -27], [2, -29], [1, -21], [0, -19], [13, -27], [11, -27], [10, -27], [2, -29], [-2, -27], [-2, -25], [3, -28], [-2, -28], [-4, -28], [2, -29], [-2, -27], [-2, -25], [3, -28], [-2, -28], [-4, -28]],
  anchorHead: [[1, -60], [-5, -61], [7, -61], [-4, -61], [-3, -61], [1, -60], [-4, -61], [11, -77], [-5, -61], [11, -77], [11, -76], [-5, -61], [11, -76], [-11, -77], [11, -77], [-10, -77], [6, -61], [12, -76], [5, -61], [6, -61], [-11, -77], [5, -61], [1, -60], [4, -61], [1, -60], [1, -59], [1, -57], [1, -58], [1, -60], [1, -59], [1, -57], [1, -58], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [-4, -61], [-4, -60], [-4, -58], [-4, -59], [11, -77], [11, -76], [11, -74], [11, -75], [11, -77], [11, -76], [11, -74], [11, -75], [11, -76], [11, -75], [11, -73], [11, -74], [11, -76], [11, -75], [11, -73], [11, -74], [-10, -77], [-10, -76], [-10, -74], [-10, -75], [-10, -77], [-10, -76], [-10, -74], [-10, -75], [5, -61], [5, -60], [5, -58], [5, -59], [5, -61], [5, -60], [5, -58], [5, -59], [5, -61], [5, -60], [5, -58], [5, -59], [5, -61], [5, -60], [5, -58], [5, -59], [1, -28], [-5, -29], [7, -29], [-4, -29], [-3, -29], [1, -28], [-4, -29], [11, -45], [-5, -29], [11, -45], [11, -44], [-5, -29], [11, -44], [-11, -45], [11, -45], [-10, -45], [6, -29], [12, -44], [5, -29], [6, -29], [-11, -45], [5, -29], [1, -28], [4, -29], [-5, -73], [-9, -43], [-5, -73], [-5, -73], [-9, -43], [-5, -73], [-10, -70], [-14, -48], [-10, -70], [-10, -70], [-14, -48], [-10, -70], [11, -70], [15, -48], [11, -70], [11, -70], [15, -48], [11, -70], [6, -73], [10, -43], [6, -73], [6, -73], [10, -43], [6, -73], [-4, -61], [-4, -62], [-4, -63], [-4, -63], [-4, -62], [-4, -61], [-4, -61], [-4, -62], [-4, -63], [-4, -63], [-4, -62], [-4, -61], [11, -77], [11, -78], [11, -79], [11, -79], [11, -78], [11, -77], [11, -77], [11, -78], [11, -79], [11, -79], [11, -78], [11, -77], [-10, -77], [-10, -78], [-10, -79], [-10, -79], [-10, -78], [-10, -77], [-10, -77], [-10, -78], [-10, -79], [-10, -79], [-10, -78], [-10, -77], [5, -61], [5, -62], [5, -63], [5, -63], [5, -62], [5, -61], [5, -61], [5, -62], [5, -63], [5, -63], [5, -62], [5, -61], [-4, -61], [-3, -61], [-1, -62], [-36, -40], [-37, -39], [-4, -61], [-3, -61], [-1, -62], [-36, -40], [-37, -39], [11, -77], [12, -77], [13, -79], [-11, -77], [-12, -76], [11, -77], [12, -77], [13, -79], [-11, -77], [-12, -76], [-10, -77], [-11, -77], [-12, -79], [12, -77], [13, -76], [-10, -77], [-11, -77], [-12, -79], [12, -77], [13, -76], [5, -61], [4, -61], [2, -62], [37, -40], [38, -39], [5, -61], [4, -61], [2, -62], [37, -40], [38, -39], [19, -77], [22, -75], [19, -77], [19, -77], [22, -75], [19, -77], [16, -79], [22, -78], [16, -79], [16, -79], [22, -78], [16, -79], [-15, -79], [-21, -78], [-15, -79], [-15, -79], [-21, -78], [-15, -79], [-18, -77], [-21, -75], [-18, -77], [-18, -77], [-21, -75], [-18, -77], [24, -73], [24, -73], [27, -69], [27, -69], [-26, -69], [-26, -69], [-23, -73], [-23, -73], [35, -13], [35, -13], [38, 19], [38, 19], [-37, 19], [-37, 19], [-34, -13], [-34, -13], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-3, -61], [-2, -61], [-2, -61], [-6, -43], [-8, -40], [-7, -42], [-6, -43], [-6, -43], [-4, -61], [-3, -61], [-2, -61], [-2, -61], [-6, -43], [-8, -40], [-7, -42], [-6, -43], [-6, -43], [11, -77], [12, -77], [13, -77], [13, -77], [-2, -66], [-4, -65], [-2, -67], [-2, -67], [-2, -67], [11, -77], [12, -77], [13, -77], [13, -77], [-2, -66], [-4, -65], [-2, -67], [-2, -67], [-2, -67], [-10, -77], [-11, -77], [-12, -77], [-12, -77], [3, -66], [5, -65], [3, -67], [3, -67], [3, -67], [-10, -77], [-11, -77], [-12, -77], [-12, -77], [3, -66], [5, -65], [3, -67], [3, -67], [3, -67], [5, -61], [4, -61], [3, -61], [3, -61], [7, -43], [9, -40], [8, -42], [7, -43], [7, -43], [5, -61], [4, -61], [3, -61], [3, -61], [7, -43], [9, -40], [8, -42], [7, -43], [7, -43], [-4, -61], [-3, -61], [-2, -61], [-2, -61], [-6, -43], [-8, -40], [-7, -42], [-6, -43], [-4, -61], [-3, -61], [-2, -61], [-2, -61], [-6, -43], [-8, -40], [-7, -42], [-6, -43], [11, -77], [12, -77], [13, -77], [13, -77], [-2, -66], [-4, -65], [-2, -67], [-2, -67], [11, -77], [12, -77], [13, -77], [13, -77], [-2, -66], [-4, -65], [-2, -67], [-2, -67], [-10, -77], [-11, -77], [-12, -77], [-12, -77], [3, -66], [5, -65], [3, -67], [3, -67], [-10, -77], [-11, -77], [-12, -77], [-12, -77], [3, -66], [5, -65], [3, -67], [3, -67], [5, -61], [4, -61], [3, -61], [3, -61], [7, -43], [9, -40], [8, -42], [7, -43], [5, -61], [4, -61], [3, -61], [3, -61], [7, -43], [9, -40], [8, -42], [7, -43], [-4, -61], [-10, -55], [-11, -50], [-3, -60], [-1, -60], [1, -60], [-4, -61], [-10, -55], [-11, -50], [-3, -60], [-1, -60], [1, -60], [11, -77], [2, -61], [2, -58], [5, -71], [7, -71], [8, -71], [11, -77], [2, -61], [2, -58], [5, -71], [7, -71], [8, -71], [-10, -77], [-1, -61], [-1, -58], [-4, -71], [-6, -71], [-7, -71], [-10, -77], [-1, -61], [-1, -58], [-4, -71], [-6, -71], [-7, -71], [5, -61], [11, -55], [12, -50], [4, -60], [2, -60], [0, -60], [5, -61], [11, -55], [12, -50], [4, -60], [2, -60], [0, -60]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 84, 84, 85, 86, 85, 85, 85, 82, 83, 84, 84, 85, 86, 85, 85, 85, 87, 88, 89, 89, 90, 91, 90, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 90, 82, 83, 84, 84, 85, 86, 85, 85, 85, 82, 83, 84, 84, 85, 86, 85, 85, 85, 82, 83, 84, 84, 85, 86, 85, 85, 82, 83, 84, 84, 85, 86, 85, 85, 87, 88, 89, 89, 90, 91, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 87, 88, 89, 89, 90, 91, 90, 90, 82, 83, 84, 84, 85, 86, 85, 85, 82, 83, 84, 84, 85, 86, 85, 85, 54, 92, 93, 94, 95, 96, 54, 92, 93, 94, 95, 96, 60, 97, 98, 99, 100, 101, 60, 97, 98, 99, 100, 101, 60, 97, 98, 99, 100, 101, 60, 97, 98, 99, 100, 101, 54, 92, 93, 94, 95, 96, 54, 92, 93, 94, 95, 96]
};

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 86, 124, 164, 208, 248, 287, 325, 364, 404, 443, 480, 519, 557, 606, 651, 688, 722, 760, 796, 832, 863, 908, 946, 981, 1011, 1053, 1090, 1122, 1160, 1196, 1233, 1269, 1310, 1352, 1392, 1430, 1470, 1509, 1548, 1587, 1627, 1667, 1705, 1745, 1790, 1852, 1917, 1968, 2010, 2051, 2092, 2137, 2183, 2232, 2280, 2329, 2379, 2430, 2480, 2525, 2568, 2610, 2655, 2702, 2749, 2792, 2831, 2892, 2949, 2991, 3034, 3088, 3140, 3180, 3222, 3263, 3305, 3363, 3424, 3473, 3529, 3582, 3644, 3706, 3768, 3817, 3867, 3924, 3981, 4034, 4082, 4131, 4184, 4232, 4286, 4339, 4392, 4436, 4479, 4521, 4570, 4621, 4672, 4714, 4754, 4798, 4852, 4907, 4946, 4985, 5022, 5072],
  widths: [44, 42, 38, 40, 44, 40, 39, 38, 39, 40, 39, 37, 39, 38, 49, 45, 37, 34, 38, 36, 36, 31, 45, 38, 35, 30, 42, 37, 32, 38, 36, 37, 36, 41, 42, 40, 38, 40, 39, 39, 39, 40, 40, 38, 40, 45, 62, 65, 51, 42, 41, 41, 45, 46, 49, 48, 49, 50, 51, 50, 45, 43, 42, 45, 47, 47, 43, 39, 61, 57, 42, 43, 54, 52, 40, 42, 41, 42, 58, 61, 49, 56, 53, 62, 62, 62, 49, 50, 57, 57, 53, 48, 49, 53, 48, 54, 53, 53, 44, 43, 42, 49, 51, 51, 42, 40, 44, 54, 55, 39, 39, 37, 50, 47],
  heights: [71, 70, 72, 69, 69, 72, 72, 77, 74, 72, 72, 76, 73, 72, 68, 65, 69, 67, 66, 67, 72, 72, 71, 69, 69, 71, 70, 69, 70, 71, 71, 69, 68, 71, 70, 65, 67, 70, 72, 66, 67, 71, 72, 67, 65, 62, 52, 47, 46, 48, 65, 51, 59, 51, 71, 72, 73, 73, 72, 71, 68, 69, 70, 70, 69, 68, 77, 75, 61, 59, 80, 80, 67, 65, 64, 66, 65, 61, 50, 46, 67, 66, 66, 61, 60, 59, 72, 73, 67, 62, 63, 62, 69, 70, 74, 68, 68, 68, 71, 80, 87, 78, 73, 73, 77, 80, 81, 62, 62, 76, 76, 75, 67, 66],
  bodyOffsets: [[3, -24], [3, -24], [3, -24], [0, -25], [0, -25], [0, -25], [-1, -25], [-1, -25], [-1, -25], [0, -26], [0, -26], [0, -26], [-1, -26], [-1, -26], [-1, -26], [0, -26], [0, -26], [0, -26], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [1, -23], [1, -22], [0, -18], [1, -20], [1, -23], [2, -22], [2, -18], [2, -20], [0, -23], [-4, -24], [-3, -23], [1, -22], [0, -25], [-3, -25], [-2, -22], [0, -21], [-1, -23], [-6, -22], [-3, -21], [-1, -22], [-1, -23], [-8, -23], [-3, -21], [-1, -22], [2, -24], [2, -23], [2, -22], [2, -24], [1, -24], [1, -24], [2, -24], [2, -24], [1, -25], [1, -23], [1, -24], [1, -24], [1, -24], [1, -23], [1, -23], [1, -25], [-2, -24], [-2, -23], [-1, -22], [-2, -24], [0, -24], [-1, -24], [-2, -24], [-2, -24], [2, -23], [7, -22], [3, -21], [2, -22], [1, -23], [8, -23], [4, -21], [1, -22], [0, -23], [5, -24], [4, -23], [0, -22], [0, -25], [3, -25], [2, -22], [0, -21], [2, -4], [2, -4], [2, -4], [-4, -9], [-4, -9], [-4, -9], [-6, -11], [-6, -11], [-6, -11], [-4, -14], [-4, -14], [-4, -14], [3, -15], [3, -15], [3, -15], [5, -14], [5, -14], [5, -14], [9, -11], [9, -11], [9, -11], [5, -9], [5, -9], [5, -9], [-1, -22], [-1, -15], [-1, -22], [-1, -22], [-1, -15], [-1, -22], [2, -20], [-1, -16], [2, -20], [2, -20], [-1, -16], [2, -20], [-1, -20], [1, -16], [-1, -20], [-1, -20], [1, -16], [-1, -20], [2, -22], [2, -15], [2, -22], [2, -22], [2, -15], [2, -22], [-2, -16], [-2, -17], [-2, -17], [-3, -17], [-3, -17], [-3, -16], [-2, -16], [-2, -17], [-2, -17], [-3, -17], [-3, -17], [-3, -16], [-2, -17], [-1, -17], [-2, -18], [-2, -18], [-2, -17], [-2, -17], [-2, -17], [-1, -17], [-2, -18], [-2, -18], [-2, -17], [-2, -17], [3, -17], [2, -17], [2, -18], [3, -18], [3, -17], [3, -17], [3, -17], [2, -17], [2, -18], [3, -18], [3, -17], [3, -17], [3, -16], [2, -17], [3, -17], [3, -17], [4, -17], [3, -16], [3, -16], [2, -17], [3, -17], [3, -17], [4, -17], [3, -16], [-2, -16], [1, -26], [3, -27], [-9, -11], [-10, -10], [-2, -16], [1, -26], [3, -27], [-9, -11], [-10, -10], [-1, -17], [-1, -23], [2, -23], [-3, -17], [-4, -19], [-1, -17], [-1, -23], [2, -23], [-3, -17], [-4, -19], [2, -17], [1, -23], [-1, -23], [3, -17], [4, -19], [2, -17], [1, -23], [-1, -23], [3, -17], [4, -19], [3, -16], [0, -26], [-2, -27], [10, -11], [11, -10], [3, -16], [0, -26], [-2, -27], [10, -11], [11, -10], [4, -24], [7, -25], [4, -24], [4, -24], [7, -25], [4, -24], [6, -17], [9, -17], [6, -17], [6, -17], [9, -17], [6, -17], [-6, -17], [-9, -17], [-6, -17], [-6, -17], [-9, -17], [-6, -17], [-4, -24], [-7, -25], [-4, -24], [-4, -24], [-7, -25], [-4, -24], [10, -23], [10, -23], [9, -14], [9, -14], [-9, -14], [-9, -14], [-9, -23], [-9, -23], [5, 5], [5, 5], [-6, 10], [-6, 10], [7, 10], [7, 10], [-5, 5], [-5, 5], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-2, -16], [1, -21], [4, -23], [4, -23], [-6, -18], [-14, -15], [-14, -15], [-14, -14], [-14, -14], [-2, -16], [1, -21], [4, -23], [4, -23], [-6, -18], [-14, -15], [-14, -15], [-14, -14], [-14, -14], [-2, -17], [2, -19], [4, -19], [4, -19], [1, -17], [-1, -15], [-2, -15], [-5, -15], [-5, -15], [-2, -17], [2, -19], [4, -19], [4, -19], [1, -17], [-1, -15], [-2, -15], [-5, -15], [-5, -15], [3, -17], [-1, -19], [-4, -19], [-4, -19], [0, -17], [2, -15], [3, -15], [5, -15], [5, -15], [3, -17], [-1, -19], [-4, -19], [-4, -19], [0, -17], [2, -15], [3, -15], [5, -15], [5, -15], [3, -16], [0, -21], [-4, -23], [-4, -23], [7, -18], [14, -15], [14, -15], [14, -14], [14, -14], [3, -16], [0, -21], [-4, -23], [-4, -23], [7, -18], [14, -15], [14, -15], [14, -14], [14, -14], [-3, -17], [-6, -18], [-6, -20], [-3, -17], [-2, -17], [-2, -17], [-2, -17], [1, -18], [-3, -17], [-6, -18], [-6, -20], [-3, -17], [-2, -17], [-2, -17], [-2, -17], [1, -18], [-2, -15], [0, -19], [-1, -22], [1, -19], [2, -16], [2, -16], [2, -16], [4, -15], [-2, -15], [0, -19], [-1, -22], [1, -19], [2, -16], [2, -16], [2, -16], [4, -15], [2, -15], [1, -19], [1, -22], [0, -19], [-1, -16], [-1, -16], [-1, -16], [-3, -15], [2, -15], [1, -19], [1, -22], [0, -19], [-1, -16], [-1, -16], [-1, -16], [-3, -15], [4, -17], [7, -18], [6, -20], [3, -17], [3, -17], [3, -17], [3, -17], [0, -18], [4, -17], [7, -18], [6, -20], [3, -17], [3, -17], [3, -17], [3, -17], [0, -18], [0, -28], [0, -30], [0, -30], [-8, -13], [-8, -13], [0, -28], [0, -30], [0, -30], [-8, -13], [-8, -13], [0, -30], [0, -30], [-1, -29], [-9, -24], [-10, -24], [0, -30], [0, -30], [-1, -29], [-9, -24], [-10, -24], [1, -30], [1, -30], [2, -29], [9, -24], [11, -24], [1, -30], [1, -30], [2, -29], [9, -24], [11, -24], [0, -28], [0, -30], [0, -30], [8, -13], [9, -13], [0, -28], [0, -30], [0, -30], [8, -13], [9, -13]],
  anchorHead: [[1, -56], [-4, -57], [6, -57], [-4, -57], [-4, -57], [1, -56], [-4, -57], [11, -73], [-5, -57], [12, -73], [12, -72], [-3, -57], [12, -72], [-10, -73], [12, -73], [-11, -73], [4, -57], [10, -72], [4, -57], [5, -57], [-12, -73], [5, -57], [1, -56], [5, -57], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [-4, -56], [-4, -55], [-4, -53], [-4, -54], [13, -72], [13, -71], [13, -69], [13, -70], [13, -72], [13, -71], [13, -69], [13, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [-12, -72], [-12, -71], [-12, -69], [-12, -70], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [5, -56], [5, -55], [5, -53], [5, -54], [1, -30], [-4, -31], [6, -31], [-3, -31], [-2, -31], [2, -31], [-3, -31], [13, -47], [-4, -31], [12, -47], [12, -46], [-4, -31], [12, -46], [-10, -47], [12, -47], [-10, -47], [6, -31], [12, -46], [6, -31], [7, -31], [-10, -47], [5, -31], [0, -30], [5, -31], [-3, -71], [-11, -39], [-3, -71], [-3, -71], [-11, -39], [-3, -71], [-7, -64], [-6, -41], [-7, -64], [-7, -64], [-6, -41], [-7, -64], [8, -64], [7, -41], [8, -64], [8, -64], [7, -41], [8, -64], [4, -71], [12, -39], [4, -71], [4, -71], [12, -39], [4, -71], [-5, -48], [-5, -49], [-5, -50], [-5, -50], [-5, -49], [-5, -48], [-5, -48], [-5, -49], [-5, -50], [-5, -50], [-5, -49], [-5, -48], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [11, -64], [11, -65], [11, -66], [11, -67], [11, -66], [11, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [-10, -64], [-10, -65], [-10, -66], [-10, -67], [-10, -66], [-10, -65], [6, -48], [6, -49], [6, -50], [6, -50], [6, -49], [6, -48], [6, -48], [6, -49], [6, -50], [6, -50], [6, -49], [6, -48], [-5, -48], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [-5, -48], [-4, -50], [-1, -51], [-22, -37], [-25, -35], [12, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [12, -64], [15, -65], [19, -66], [-3, -61], [-3, -63], [-11, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [-11, -64], [-14, -65], [-18, -66], [4, -61], [4, -63], [6, -48], [5, -50], [2, -51], [23, -37], [26, -35], [6, -48], [5, -50], [2, -51], [23, -37], [26, -35], [14, -67], [21, -68], [14, -67], [14, -67], [21, -68], [14, -67], [11, -68], [18, -67], [11, -68], [11, -68], [18, -67], [11, -68], [-10, -68], [-17, -67], [-10, -68], [-10, -68], [-17, -67], [-10, -68], [-13, -67], [-20, -68], [-13, -67], [-13, -67], [-20, -68], [-13, -67], [26, -66], [26, -66], [22, -61], [22, -61], [-21, -61], [-21, -61], [-25, -66], [-25, -66], [39, -13], [39, -13], [32, 28], [32, 28], [-31, 28], [-31, 28], [-38, -13], [-38, -13], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-4, -57], [-5, -48], [-3, -51], [-2, -52], [-2, -52], [-17, -47], [-33, -42], [-34, -41], [-36, -39], [-36, -39], [-5, -48], [-3, -51], [-2, -52], [-2, -52], [-17, -47], [-33, -42], [-34, -41], [-36, -39], [-36, -39], [11, -64], [16, -65], [18, -66], [18, -66], [2, -63], [-2, -60], [-3, -60], [-4, -59], [-4, -59], [11, -64], [16, -65], [18, -66], [18, -66], [2, -63], [-2, -60], [-3, -60], [-4, -59], [-4, -59], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [-1, -63], [3, -60], [4, -60], [5, -59], [5, -59], [-10, -64], [-15, -65], [-17, -66], [-17, -66], [-1, -63], [3, -60], [4, -60], [5, -59], [5, -59], [6, -48], [4, -51], [3, -52], [3, -52], [18, -47], [34, -42], [35, -41], [37, -39], [37, -39], [6, -48], [4, -51], [3, -52], [3, -52], [18, -47], [34, -42], [35, -41], [37, -39], [37, -39], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [-5, -48], [-6, -49], [-6, -51], [-4, -47], [-2, -47], [-2, -47], [-2, -47], [1, -48], [14, -62], [14, -63], [14, -64], [17, -61], [19, -59], [19, -59], [19, -59], [22, -58], [14, -62], [14, -63], [14, -64], [17, -61], [19, -59], [19, -59], [19, -59], [22, -58], [-13, -62], [-13, -63], [-13, -64], [-16, -61], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [-13, -62], [-13, -63], [-13, -64], [-16, -61], [-18, -59], [-18, -59], [-18, -59], [-21, -58], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [6, -48], [7, -49], [7, -51], [5, -47], [3, -47], [3, -47], [3, -47], [0, -48], [-4, -58], [-3, -59], [-3, -60], [-26, -35], [-27, -34], [-4, -58], [-3, -59], [-3, -60], [-26, -35], [-27, -34], [12, -74], [11, -75], [10, -76], [-11, -66], [-11, -65], [12, -74], [11, -75], [10, -76], [-11, -66], [-11, -65], [-11, -74], [-10, -75], [-9, -76], [12, -66], [12, -65], [-11, -74], [-10, -75], [-9, -76], [12, -66], [12, -65], [5, -58], [4, -59], [4, -60], [27, -35], [28, -34], [5, -58], [4, -59], [4, -60], [27, -35], [28, -34]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 60, 70, 71, 72, 73, 54, 66, 67, 68, 69, 54, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 60, 86, 87, 87, 88, 89, 90, 91, 91, 54, 80, 81, 81, 82, 83, 84, 85, 85, 54, 80, 81, 81, 82, 83, 84, 85, 85, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 109, 110, 111, 112, 113, 104, 105, 106, 107, 108, 104, 105, 106, 107, 108]
};

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 37, 74, 103, 138, 176, 213, 248, 282, 318, 355, 391, 426, 461, 495, 540, 584, 620, 653, 691, 732, 768, 796, 842, 884, 917, 944, 989, 1032, 1063, 1095, 1131, 1170, 1206, 1242, 1288, 1332, 1367, 1404, 1441, 1477, 1514, 1551, 1585, 1619, 1654, 1685, 1727, 1770, 1808, 1843, 1879, 1918, 1959, 2000, 2041, 2082, 2125, 2170, 2212, 2251, 2285, 2319, 2354, 2391, 2425, 2459, 2503, 2546, 2593, 2639, 2672, 2708, 2758, 2806, 2846, 2885, 2924, 2963, 3003, 3047, 3096, 3149, 3192, 3236, 3282, 3324, 3358, 3389, 3421, 3452, 3507, 3562, 3616, 3671, 3724, 3767, 3812, 3857, 3912],
  widths: [37, 37, 29, 35, 38, 37, 35, 34, 36, 37, 36, 35, 35, 34, 45, 44, 36, 33, 38, 41, 36, 28, 46, 42, 33, 27, 45, 43, 31, 32, 36, 39, 36, 36, 46, 44, 35, 37, 37, 36, 37, 37, 34, 34, 35, 31, 42, 43, 38, 35, 36, 39, 41, 41, 41, 41, 43, 45, 42, 39, 34, 34, 35, 37, 34, 34, 44, 43, 47, 46, 33, 36, 50, 48, 40, 39, 39, 39, 40, 44, 49, 53, 43, 44, 46, 42, 34, 31, 32, 31, 55, 55, 54, 55, 53, 43, 45, 45, 55, 53],
  heights: [66, 69, 68, 65, 63, 68, 66, 68, 71, 67, 64, 67, 69, 71, 69, 69, 68, 68, 68, 70, 71, 68, 67, 65, 65, 66, 63, 64, 66, 70, 66, 66, 61, 64, 65, 62, 66, 69, 68, 61, 66, 69, 70, 62, 65, 47, 46, 42, 47, 47, 65, 61, 61, 57, 64, 65, 67, 68, 67, 65, 64, 65, 67, 68, 67, 65, 71, 70, 54, 53, 78, 79, 59, 56, 60, 58, 58, 56, 57, 52, 49, 41, 75, 58, 56, 57, 76, 62, 62, 63, 59, 59, 61, 60, 58, 67, 67, 67, 66, 63],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [1, -25], [1, -25], [1, -25], [3, -27], [3, -27], [3, -27], [-1, -27], [-1, -27], [-1, -27], [1, -29], [1, -29], [1, -29], [2, -27], [2, -27], [2, -27], [-2, -27], [-2, -27], [-2, -27], [0, -25], [0, -25], [0, -25], [1, -26], [0, -26], [0, -23], [0, -22], [0, -26], [0, -27], [0, -23], [1, -23], [3, -25], [0, -25], [2, -24], [3, -26], [4, -27], [3, -26], [3, -24], [2, -24], [3, -26], [-1, -25], [2, -24], [6, -25], [4, -27], [-3, -27], [0, -25], [2, -25], [-1, -23], [-1, -24], [2, -22], [-1, -25], [-2, -26], [-2, -24], [-1, -24], [-1, -23], [2, -23], [2, -23], [2, -24], [2, -23], [1, -23], [0, -22], [0, -24], [0, -23], [1, -23], [1, -24], [-1, -22], [1, -25], [2, -26], [2, -24], [1, -24], [2, -23], [-3, -26], [1, -25], [-2, -24], [-5, -25], [-3, -27], [4, -27], [1, -25], [-1, -25], [-3, -25], [1, -25], [-2, -24], [-3, -26], [-3, -27], [-3, -26], [-2, -24], [-2, -24], [1, -15], [1, -15], [1, -15], [2, -17], [2, -17], [2, -17], [-1, -18], [-1, -18], [-1, -18], [-2, -15], [-2, -15], [-2, -15], [1, -16], [1, -16], [1, -16], [2, -15], [2, -15], [2, -15], [2, -18], [2, -18], [2, -18], [-2, -17], [-2, -17], [-2, -17], [4, -23], [6, -21], [4, -23], [4, -23], [6, -21], [4, -23], [-5, -25], [-5, -23], [-5, -25], [-5, -25], [-5, -23], [-5, -25], [6, -25], [6, -23], [6, -25], [6, -25], [6, -23], [6, -25], [-4, -23], [-5, -21], [-4, -23], [-4, -23], [-5, -21], [-4, -23], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [1, -27], [1, -27], [2, -28], [2, -29], [0, -28], [0, -27], [1, -27], [1, -27], [2, -28], [2, -29], [0, -28], [0, -27], [6, -34], [6, -35], [6, -35], [-2, -21], [-2, -20], [6, -34], [6, -35], [6, -35], [-2, -21], [-2, -20], [3, -34], [5, -34], [5, -34], [0, -24], [-1, -23], [3, -34], [5, -34], [5, -34], [0, -24], [-1, -23], [-2, -34], [-5, -34], [-5, -34], [0, -24], [1, -23], [-2, -34], [-5, -34], [-5, -34], [0, -24], [1, -23], [-6, -34], [-5, -35], [-5, -35], [3, -21], [2, -20], [-6, -34], [-5, -35], [-5, -35], [3, -21], [2, -20], [-2, -23], [2, -26], [-2, -23], [-2, -23], [2, -26], [-2, -23], [0, -28], [3, -25], [0, -28], [0, -28], [3, -25], [0, -28], [1, -28], [-2, -25], [1, -28], [1, -28], [-2, -25], [1, -28], [2, -23], [-1, -26], [2, -23], [2, -23], [-1, -26], [2, -23], [6, -24], [6, -24], [9, -24], [9, -24], [-9, -24], [-9, -24], [-6, -24], [-6, -24], [6, -8], [6, -8], [14, -2], [14, -2], [-13, -2], [-13, -2], [-5, -8], [-5, -8], [6, -34], [6, -34], [6, -34], [6, -34], [6, -34], [6, -34], [6, -34], [6, -34], [2, -33], [2, -33], [2, -33], [2, -33], [-2, -25], [-3, -24], [-1, -24], [-1, -24], [-1, -24], [2, -33], [2, -33], [2, -33], [2, -33], [-2, -25], [-3, -24], [-1, -24], [-1, -24], [-1, -24], [2, -32], [2, -32], [2, -32], [2, -32], [-1, -25], [-2, -25], [-1, -25], [-1, -25], [-1, -25], [2, -32], [2, -32], [2, -32], [2, -32], [-1, -25], [-2, -25], [-1, -25], [-1, -25], [-1, -25], [-2, -32], [-2, -32], [-2, -32], [-2, -32], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [-2, -32], [-2, -32], [-2, -32], [-2, -32], [2, -25], [2, -25], [2, -25], [2, -25], [2, -25], [-1, -33], [-1, -33], [-1, -33], [-1, -33], [2, -25], [3, -24], [1, -24], [1, -24], [1, -24], [-1, -33], [-1, -33], [-1, -33], [-1, -33], [2, -25], [3, -24], [1, -24], [1, -24], [1, -24], [-2, -27], [-2, -27], [-8, -29], [-8, -28], [-9, -17], [-8, -16], [-8, -16], [-8, -16], [-2, -27], [-2, -27], [-8, -29], [-8, -28], [-9, -17], [-8, -16], [-8, -16], [-8, -16], [-4, -27], [-4, -27], [-8, -28], [-7, -28], [-14, -28], [-13, -26], [-13, -26], [-13, -26], [-4, -27], [-4, -27], [-8, -28], [-7, -28], [-14, -28], [-13, -26], [-13, -26], [-13, -26], [5, -27], [5, -27], [9, -28], [8, -28], [15, -28], [14, -26], [14, -26], [14, -26], [5, -27], [5, -27], [9, -28], [8, -28], [15, -28], [14, -26], [14, -26], [14, -26], [3, -27], [3, -27], [9, -29], [8, -28], [10, -17], [9, -16], [9, -16], [9, -16], [3, -27], [3, -27], [9, -29], [8, -28], [10, -17], [9, -16], [9, -16], [9, -16], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [-1, -28], [-1, -29], [0, -28], [1, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [0, -28], [-1, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [0, -27], [0, -27], [1, -28], [2, -29], [0, -28], [0, -27], [1, -27], [1, -27], [2, -28], [2, -29], [0, -28], [0, -27], [1, -27], [1, -27], [2, -28], [2, -29], [0, -28], [0, -27]],
  anchorHead: [[1, -56], [-3, -57], [4, -57], [-2, -58], [-3, -58], [1, -57], [-3, -59], [13, -74], [-3, -58], [12, -74], [12, -73], [-4, -58], [12, -74], [-11, -74], [12, -74], [-10, -74], [5, -58], [11, -74], [4, -59], [4, -58], [-12, -74], [4, -58], [1, -57], [4, -57], [1, -56], [1, -55], [1, -53], [1, -54], [1, -56], [1, -55], [1, -53], [1, -54], [-2, -58], [-2, -57], [-2, -55], [-2, -56], [-2, -58], [-2, -57], [-2, -55], [-2, -56], [-3, -59], [-3, -58], [-3, -56], [-3, -58], [-3, -59], [-3, -58], [-3, -56], [-3, -57], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [4, -59], [4, -58], [4, -56], [4, -58], [4, -59], [4, -58], [4, -56], [4, -57], [3, -58], [3, -57], [3, -55], [3, -56], [3, -58], [3, -57], [3, -55], [3, -56], [1, -35], [-3, -36], [5, -36], [-3, -37], [-4, -37], [1, -35], [-4, -38], [12, -54], [-3, -37], [12, -53], [11, -52], [-5, -37], [12, -52], [-11, -53], [12, -53], [-11, -53], [6, -37], [12, -52], [5, -38], [4, -37], [-11, -54], [4, -37], [0, -35], [5, -37], [-6, -63], [-4, -44], [-6, -61], [-6, -63], [-4, -44], [-6, -61], [-16, -65], [-15, -44], [-16, -63], [-16, -65], [-15, -44], [-16, -63], [17, -65], [16, -44], [17, -63], [17, -65], [16, -44], [17, -63], [7, -63], [5, -44], [7, -61], [7, -63], [5, -44], [7, -61], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [0, -58], [2, -59], [3, -59], [-14, -46], [-15, -44], [0, -58], [2, -59], [3, -59], [-14, -46], [-15, -44], [13, -71], [17, -72], [18, -72], [3, -64], [2, -62], [13, -71], [17, -72], [18, -72], [3, -64], [2, -62], [-12, -71], [-16, -72], [-17, -72], [-2, -64], [-1, -62], [-12, -71], [-16, -72], [-17, -72], [-2, -64], [-1, -62], [1, -58], [-1, -59], [-2, -59], [15, -46], [16, -44], [1, -58], [-1, -59], [-2, -59], [15, -46], [16, -44], [10, -64], [14, -65], [10, -64], [10, -64], [14, -65], [10, -64], [2, -71], [5, -67], [2, -71], [2, -71], [5, -67], [2, -71], [-1, -71], [-4, -67], [-1, -71], [-1, -71], [-4, -67], [-1, -71], [-9, -64], [-13, -65], [-9, -64], [-9, -64], [-13, -65], [-9, -64], [29, -64], [29, -64], [20, -64], [20, -64], [-19, -64], [-19, -64], [-28, -64], [-28, -64], [26, -26], [26, -26], [43, 8], [43, 8], [-42, 8], [-42, 8], [-25, -26], [-25, -26], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [0, -58], [-1, -56], [0, -56], [1, -56], [1, -56], [-11, -52], [-14, -49], [-12, -50], [-11, -50], [-10, -51], [-1, -56], [0, -56], [1, -56], [1, -56], [-11, -52], [-14, -49], [-12, -50], [-11, -50], [-10, -51], [16, -71], [17, -71], [18, -71], [18, -71], [10, -68], [7, -68], [9, -68], [10, -68], [10, -68], [16, -71], [17, -71], [18, -71], [18, -71], [10, -68], [7, -68], [9, -68], [10, -68], [10, -68], [-15, -71], [-16, -71], [-17, -71], [-17, -71], [-9, -68], [-6, -68], [-8, -68], [-9, -68], [-9, -68], [-15, -71], [-16, -71], [-17, -71], [-17, -71], [-9, -68], [-6, -68], [-8, -68], [-9, -68], [-9, -68], [2, -56], [1, -56], [0, -56], [0, -56], [12, -52], [15, -49], [13, -50], [12, -50], [11, -51], [2, -56], [1, -56], [0, -56], [0, -56], [12, -52], [15, -49], [13, -50], [12, -50], [11, -51], [-2, -54], [-1, -54], [-8, -55], [-10, -54], [-24, -44], [-25, -42], [-25, -41], [-25, -41], [-2, -54], [-1, -54], [-8, -55], [-10, -54], [-24, -44], [-25, -42], [-25, -41], [-25, -41], [11, -69], [12, -69], [5, -69], [3, -70], [0, -70], [-1, -68], [-1, -68], [-1, -68], [11, -69], [12, -69], [5, -69], [3, -70], [0, -70], [-1, -68], [-1, -68], [-1, -68], [-10, -69], [-11, -69], [-4, -69], [-2, -70], [1, -70], [2, -68], [2, -68], [2, -68], [-10, -69], [-11, -69], [-4, -69], [-2, -70], [1, -70], [2, -68], [2, -68], [2, -68], [3, -54], [2, -54], [9, -55], [11, -54], [25, -44], [26, -42], [26, -41], [26, -41], [3, -54], [2, -54], [9, -55], [11, -54], [25, -44], [26, -42], [26, -41], [26, -41], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [-2, -57], [-2, -58], [-2, -60], [-2, -61], [-2, -60], [-2, -58], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [13, -72], [12, -73], [12, -75], [12, -76], [12, -75], [12, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [-12, -72], [-11, -73], [-11, -75], [-11, -76], [-11, -75], [-11, -73], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58], [3, -57], [3, -58], [3, -60], [3, -61], [3, -60], [3, -58]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 66, 66, 66, 66, 66, 66, 66, 66, 82, 82, 82, 82, 83, 84, 85, 85, 85, 82, 82, 82, 82, 83, 84, 85, 85, 85, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 86, 86, 86, 86, 87, 88, 89, 89, 89, 82, 82, 82, 82, 83, 84, 85, 85, 85, 82, 82, 82, 82, 83, 84, 85, 85, 85, 90, 90, 91, 92, 93, 94, 94, 94, 90, 90, 91, 92, 93, 94, 94, 94, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 95, 95, 96, 97, 98, 99, 99, 99, 90, 90, 91, 92, 93, 94, 94, 94, 90, 90, 91, 92, 93, 94, 94, 94, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59]
};

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 83, 113, 151, 194, 235, 276, 316, 357, 399, 440, 480, 521, 559, 603, 647, 687, 725, 764, 804, 841, 868, 913, 954, 992, 1022, 1066, 1110, 1144, 1181, 1221, 1261, 1300, 1335, 1377, 1421, 1456, 1497, 1538, 1579, 1620, 1661, 1702, 1743, 1784, 1831, 1879, 1931, 1987, 2033, 2067, 2104, 2142, 2185, 2229, 2274, 2320, 2366, 2413, 2459, 2507, 2553, 2598, 2644, 2694, 2742, 2794, 2850, 2906, 2962, 2991, 3027, 3078, 3127, 3177, 3217, 3274, 3331, 3391, 3453, 3498, 3542, 3584, 3626, 3669, 3725, 3781, 3837, 3864, 3895, 3928, 3961, 3994, 4049, 4104, 4159, 4217, 4274, 4330, 4386, 4455, 4525, 4595, 4645, 4694, 4745, 4796, 4855, 4915, 4975, 5030, 5075, 5138, 5199, 5252, 5293, 5354],
  widths: [44, 39, 30, 38, 43, 41, 41, 40, 41, 42, 41, 40, 41, 38, 44, 44, 40, 38, 39, 40, 37, 27, 45, 41, 38, 30, 44, 44, 34, 37, 40, 40, 39, 35, 42, 44, 35, 41, 41, 41, 41, 41, 41, 41, 41, 47, 48, 52, 56, 46, 34, 37, 38, 43, 44, 45, 46, 46, 47, 46, 48, 46, 45, 46, 50, 48, 52, 56, 56, 56, 29, 36, 51, 49, 50, 40, 57, 57, 60, 62, 45, 44, 42, 42, 43, 56, 56, 56, 27, 31, 33, 33, 33, 55, 55, 55, 58, 57, 56, 56, 69, 70, 70, 50, 49, 51, 51, 59, 60, 60, 55, 45, 63, 61, 53, 41, 61, 61],
  heights: [76, 74, 70, 71, 74, 69, 66, 66, 69, 71, 68, 69, 71, 69, 66, 63, 68, 66, 65, 68, 72, 70, 69, 68, 68, 67, 66, 66, 69, 70, 70, 70, 66, 67, 66, 65, 67, 67, 69, 70, 68, 67, 69, 70, 68, 51, 53, 48, 54, 52, 64, 51, 65, 55, 69, 70, 72, 73, 72, 71, 71, 72, 73, 74, 73, 72, 76, 85, 62, 60, 70, 69, 67, 65, 73, 66, 68, 54, 49, 51, 74, 75, 76, 77, 76, 76, 76, 76, 70, 71, 71, 71, 70, 80, 80, 80, 79, 80, 80, 78, 68, 67, 67, 81, 79, 75, 71, 71, 70, 70, 52, 74, 57, 69, 53, 70, 80, 70],
  bodyOffsets: [[1, -25], [1, -25], [1, -25], [0, -25], [0, -25], [0, -25], [1, -25], [1, -25], [1, -25], [2, -25], [2, -25], [2, -25], [2, -26], [2, -26], [2, -26], [2, -25], [2, -25], [2, -25], [0, -25], [0, -25], [0, -25], [1, -25], [1, -25], [1, -25], [0, -26], [-1, -27], [-2, -25], [-1, -24], [-1, -25], [1, -26], [1, -23], [1, -23], [0, -26], [-4, -27], [-2, -26], [-1, -25], [2, -28], [1, -27], [1, -24], [1, -23], [2, -24], [-4, -23], [0, -22], [2, -23], [3, -25], [-4, -25], [-3, -23], [0, -22], [3, -25], [2, -24], [2, -22], [3, -25], [3, -26], [1, -26], [1, -24], [2, -24], [2, -28], [2, -26], [2, -24], [2, -26], [2, -28], [2, -26], [2, -24], [2, -26], [-2, -25], [-2, -24], [-2, -22], [-2, -25], [-2, -26], [-1, -26], [-1, -24], [-1, -24], [-1, -24], [5, -23], [1, -22], [-2, -23], [-3, -25], [4, -25], [3, -23], [0, -22], [0, -26], [4, -27], [2, -26], [1, -25], [-2, -28], [0, -27], [-1, -24], [0, -23], [2, -3], [2, -3], [2, -3], [1, -1], [1, -1], [1, -1], [5, -2], [5, -2], [5, -2], [4, 1], [4, 1], [4, 1], [2, -2], [2, -2], [2, -2], [-4, 1], [-4, 1], [-4, 1], [-5, -2], [-5, -2], [-5, -2], [-1, -1], [-1, -1], [-1, -1], [-3, -20], [-1, -13], [-3, -20], [-3, -20], [-1, -13], [-3, -20], [-1, -22], [-3, -17], [-1, -22], [-1, -22], [-3, -17], [-1, -22], [1, -22], [4, -17], [1, -22], [1, -22], [4, -17], [1, -22], [3, -20], [2, -13], [3, -20], [3, -20], [2, -13], [3, -20], [-1, -23], [-1, -24], [-2, -25], [-2, -25], [-2, -25], [-2, -24], [-1, -23], [-1, -24], [-2, -25], [-2, -25], [-2, -25], [-2, -24], [-2, -22], [-2, -23], [-1, -23], [-2, -24], [-2, -23], [-2, -23], [-2, -22], [-2, -23], [-1, -23], [-2, -24], [-2, -23], [-2, -23], [2, -22], [2, -23], [2, -23], [2, -24], [2, -23], [2, -23], [2, -22], [2, -23], [2, -23], [2, -24], [2, -23], [2, -23], [1, -23], [2, -24], [2, -25], [2, -25], [3, -25], [2, -24], [1, -23], [2, -24], [2, -25], [2, -25], [3, -25], [2, -24], [0, -25], [0, -25], [-3, -29], [-17, -15], [-17, -14], [0, -25], [0, -25], [-3, -29], [-17, -15], [-17, -14], [2, -25], [1, -25], [-2, -27], [-19, -25], [-20, -24], [2, -25], [1, -25], [-2, -27], [-19, -25], [-20, -24], [-2, -25], [0, -25], [2, -27], [20, -25], [21, -24], [-2, -25], [0, -25], [2, -27], [20, -25], [21, -24], [1, -25], [0, -25], [3, -29], [17, -15], [17, -14], [1, -25], [0, -25], [3, -29], [17, -15], [17, -14], [-6, -23], [-3, -23], [-6, -23], [-6, -23], [-3, -23], [-6, -23], [2, -22], [4, -21], [2, -22], [2, -22], [4, -21], [2, -22], [-2, -22], [-4, -21], [-2, -22], [-2, -22], [-4, -21], [-2, -22], [6, -23], [3, -23], [6, -23], [6, -23], [3, -23], [6, -23], [0, -21], [0, -21], [13, -16], [13, -16], [-12, -16], [-12, -16], [1, -21], [1, -21], [1, 1], [1, 1], [1, 1], [1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-1, -25], [0, -25], [-1, -26], [-3, -26], [-5, -26], [-5, -26], [-17, -20], [-17, -20], [-17, -20], [-1, -25], [0, -25], [-1, -26], [-3, -26], [-5, -26], [-5, -26], [-17, -20], [-17, -20], [-17, -20], [1, -25], [-2, -25], [-3, -26], [-4, -26], [-4, -26], [-4, -26], [-16, -28], [-16, -28], [-16, -28], [1, -25], [-2, -25], [-3, -26], [-4, -26], [-4, -26], [-4, -26], [-16, -28], [-16, -28], [-16, -28], [0, -25], [3, -25], [4, -26], [5, -26], [5, -26], [5, -26], [17, -28], [17, -28], [17, -28], [0, -25], [3, -25], [4, -26], [5, -26], [5, -26], [5, -26], [17, -28], [17, -28], [17, -28], [2, -25], [0, -25], [1, -26], [3, -26], [6, -26], [6, -26], [17, -20], [17, -20], [17, -20], [2, -25], [0, -25], [1, -26], [3, -26], [6, -26], [6, -26], [17, -20], [17, -20], [17, -20], [-6, -24], [-5, -26], [-5, -27], [-5, -29], [-5, -29], [-11, -12], [-12, -11], [-12, -11], [-6, -24], [-5, -26], [-5, -27], [-5, -29], [-5, -29], [-11, -12], [-12, -11], [-12, -11], [-2, -28], [-1, -27], [-2, -25], [-2, -23], [-2, -23], [-8, -22], [-10, -22], [-10, -22], [-2, -28], [-1, -27], [-2, -25], [-2, -23], [-2, -23], [-8, -22], [-10, -22], [-10, -22], [2, -28], [2, -27], [3, -25], [3, -23], [3, -23], [9, -22], [10, -22], [10, -22], [2, -28], [2, -27], [3, -25], [3, -23], [3, -23], [9, -22], [10, -22], [10, -22], [6, -24], [6, -26], [5, -27], [5, -29], [5, -29], [12, -12], [12, -11], [12, -11], [6, -24], [6, -26], [5, -27], [5, -29], [5, -29], [12, -12], [12, -11], [12, -11], [-1, -23], [-6, -24], [-4, -17], [0, -25], [-18, -14], [-3, -20], [-1, -23], [-6, -24], [-4, -17], [0, -25], [-18, -14], [-3, -20], [-2, -22], [0, -28], [2, -14], [3, -25], [-16, -29], [1, -23], [-2, -22], [0, -28], [2, -14], [3, -25], [-16, -29], [1, -23], [2, -22], [0, -28], [-1, -14], [-2, -25], [17, -29], [0, -23], [2, -22], [0, -28], [-1, -14], [-2, -25], [17, -29], [0, -23], [1, -23], [6, -24], [5, -17], [1, -25], [19, -14], [4, -20], [1, -23], [6, -24], [5, -17], [1, -25], [19, -14], [4, -20]],
  anchorHead: [[1, -56], [-4, -57], [6, -57], [-5, -57], [-4, -57], [0, -56], [-3, -57], [13, -73], [-4, -57], [14, -73], [14, -72], [-2, -57], [13, -72], [-9, -73], [13, -73], [-9, -73], [7, -57], [13, -72], [5, -57], [6, -57], [-11, -73], [6, -57], [1, -56], [5, -57], [1, -55], [1, -54], [1, -52], [1, -53], [1, -55], [1, -54], [1, -52], [1, -53], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [-3, -56], [-3, -55], [-3, -53], [-3, -54], [14, -72], [14, -71], [14, -69], [14, -70], [14, -72], [14, -71], [14, -69], [14, -70], [13, -71], [13, -70], [13, -68], [13, -69], [13, -71], [13, -70], [13, -68], [13, -69], [-13, -72], [-13, -71], [-13, -69], [-13, -70], [-13, -72], [-13, -71], [-13, -69], [-13, -70], [4, -56], [4, -55], [4, -53], [4, -54], [4, -56], [4, -55], [4, -53], [4, -54], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -55], [6, -53], [6, -54], [1, -22], [-4, -23], [7, -23], [-4, -23], [-3, -23], [2, -22], [-2, -23], [14, -39], [-3, -23], [13, -39], [13, -38], [-2, -23], [12, -38], [-10, -39], [12, -39], [-12, -39], [4, -23], [10, -38], [3, -23], [4, -23], [-13, -39], [5, -23], [-1, -22], [4, -23], [-13, -66], [-16, -39], [-13, -66], [-13, -66], [-16, -39], [-13, -66], [-9, -66], [-12, -45], [-9, -66], [-9, -66], [-12, -45], [-9, -66], [10, -66], [13, -45], [10, -66], [10, -66], [13, -45], [10, -66], [14, -66], [17, -39], [14, -66], [14, -66], [17, -39], [14, -66], [-5, -53], [-5, -54], [-5, -56], [-5, -57], [-5, -56], [-5, -55], [-5, -53], [-5, -54], [-5, -56], [-5, -57], [-5, -56], [-5, -55], [13, -69], [13, -70], [13, -71], [13, -72], [13, -71], [13, -70], [13, -69], [13, -70], [13, -71], [13, -72], [13, -71], [13, -70], [-12, -69], [-12, -70], [-12, -71], [-12, -72], [-12, -71], [-12, -70], [-12, -69], [-12, -70], [-12, -71], [-12, -72], [-12, -71], [-12, -70], [6, -53], [6, -54], [6, -56], [6, -57], [6, -56], [6, -55], [6, -53], [6, -54], [6, -56], [6, -57], [6, -56], [6, -55], [-5, -57], [-5, -58], [-8, -58], [-30, -39], [-32, -37], [-5, -57], [-5, -58], [-8, -58], [-30, -39], [-32, -37], [14, -73], [13, -74], [13, -76], [-10, -73], [-13, -71], [14, -73], [13, -74], [13, -76], [-10, -73], [-13, -71], [-13, -73], [-12, -74], [-12, -76], [11, -73], [14, -71], [-13, -73], [-12, -74], [-12, -76], [11, -73], [14, -71], [6, -57], [6, -58], [9, -58], [31, -39], [33, -37], [6, -57], [6, -58], [9, -58], [31, -39], [33, -37], [13, -69], [20, -67], [13, -69], [13, -69], [20, -67], [13, -69], [10, -73], [15, -71], [10, -73], [10, -73], [15, -71], [10, -73], [-9, -73], [-14, -71], [-9, -73], [-9, -73], [-14, -71], [-9, -73], [-12, -69], [-19, -67], [-12, -69], [-12, -69], [-19, -67], [-12, -69], [21, -64], [21, -64], [30, -61], [30, -61], [-29, -61], [-29, -61], [-20, -64], [-20, -64], [39, -18], [39, -18], [40, 24], [40, 24], [-39, 24], [-39, 24], [-38, -18], [-38, -18], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -58], [-6, -59], [-8, -60], [-10, -59], [-10, -59], [-21, -42], [-21, -41], [-21, -40], [-5, -57], [-5, -58], [-6, -59], [-8, -60], [-10, -59], [-10, -59], [-21, -42], [-21, -41], [-21, -40], [12, -73], [11, -74], [10, -75], [9, -75], [8, -74], [8, -74], [-5, -72], [-5, -72], [-5, -72], [12, -73], [11, -74], [10, -75], [9, -75], [8, -74], [8, -74], [-5, -72], [-5, -72], [-5, -72], [-11, -73], [-10, -74], [-9, -75], [-8, -75], [-7, -74], [-7, -74], [6, -72], [6, -72], [6, -72], [-11, -73], [-10, -74], [-9, -75], [-8, -75], [-7, -74], [-7, -74], [6, -72], [6, -72], [6, -72], [6, -57], [6, -58], [7, -59], [9, -60], [11, -59], [11, -59], [22, -42], [22, -41], [22, -40], [6, -57], [6, -58], [7, -59], [9, -60], [11, -59], [11, -59], [22, -42], [22, -41], [22, -40], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [-6, -46], [-5, -46], [-4, -46], [-6, -45], [-6, -45], [-21, -36], [-22, -35], [-22, -35], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [12, -67], [13, -67], [14, -67], [12, -66], [12, -66], [3, -63], [2, -62], [2, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [-11, -67], [-12, -67], [-13, -67], [-11, -66], [-11, -66], [-2, -63], [-1, -62], [-1, -62], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [7, -46], [6, -46], [5, -46], [7, -45], [7, -45], [22, -36], [23, -35], [23, -35], [-5, -53], [-6, -46], [-13, -31], [-4, -57], [-34, -37], [-11, -44], [-5, -53], [-6, -46], [-13, -31], [-4, -57], [-34, -37], [-11, -44], [13, -69], [13, -67], [4, -49], [15, -72], [-11, -73], [12, -66], [13, -69], [13, -67], [4, -49], [15, -72], [-11, -73], [12, -66], [-12, -69], [-12, -67], [-3, -49], [-14, -72], [12, -73], [-11, -66], [-12, -69], [-12, -67], [-3, -49], [-14, -72], [12, -73], [-11, -66], [6, -53], [7, -46], [14, -31], [5, -57], [35, -37], [12, -44], [6, -53], [7, -46], [14, -31], [5, -57], [35, -37], [12, -44]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 88, 89, 90, 91, 92, 92, 93, 94, 95, 80, 81, 82, 83, 84, 84, 85, 86, 87, 80, 81, 82, 83, 84, 84, 85, 86, 87, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 103, 104, 105, 106, 106, 107, 108, 109, 96, 97, 98, 99, 99, 100, 101, 102, 96, 97, 98, 99, 99, 100, 101, 102, 54, 96, 110, 111, 112, 113, 54, 96, 110, 111, 112, 113, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 60, 103, 114, 115, 116, 117, 54, 96, 110, 111, 112, 113, 54, 96, 110, 111, 112, 113]
};

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 32, 66, 97, 130, 163, 202, 239, 275, 312, 351, 388, 424, 461, 493, 530, 571, 609, 641, 674, 713, 748, 774, 809, 854, 896, 925, 958, 1000, 1040, 1072, 1104, 1138, 1169, 1201, 1239, 1284, 1325, 1363, 1399, 1433, 1469, 1507, 1543, 1577, 1613, 1659, 1712, 1764, 1818, 1862, 1898, 1934, 1970, 2007, 2047, 2084, 2125, 2165, 2205, 2245, 2285, 2325, 2363, 2402, 2441, 2483, 2523, 2562, 2603, 2643, 2699, 2754, 2796, 2838, 2886, 2933, 2974, 3014, 3052, 3089, 3135, 3179, 3239, 3288, 3328, 3368, 3419, 3478, 3537, 3596, 3632, 3667, 3708, 3750, 3792, 3834, 3873, 3911, 3952, 3998, 4048, 4104, 4155, 4191, 4223, 4259, 4299, 4340, 4387, 4431, 4472, 4512, 4552, 4592, 4639, 4685, 4723, 4762, 4802, 4845, 4886],
  widths: [32, 34, 31, 33, 33, 39, 37, 36, 37, 39, 37, 36, 37, 32, 37, 41, 38, 32, 33, 39, 35, 26, 35, 45, 42, 29, 33, 42, 40, 32, 32, 34, 31, 32, 38, 45, 41, 38, 36, 34, 36, 38, 36, 34, 36, 46, 53, 52, 54, 44, 36, 36, 36, 37, 40, 37, 41, 40, 40, 40, 40, 40, 38, 39, 39, 42, 40, 39, 41, 40, 56, 55, 42, 42, 48, 47, 41, 40, 38, 37, 46, 44, 60, 49, 40, 40, 51, 59, 59, 59, 36, 35, 41, 42, 42, 42, 39, 38, 41, 46, 50, 56, 51, 36, 32, 36, 40, 41, 47, 44, 41, 40, 40, 40, 47, 46, 38, 39, 40, 43, 41, 41],
  heights: [70, 72, 70, 67, 69, 68, 64, 68, 69, 68, 64, 68, 69, 69, 67, 63, 64, 67, 68, 66, 68, 68, 67, 65, 66, 65, 64, 65, 66, 68, 69, 69, 70, 64, 66, 64, 65, 67, 69, 68, 67, 67, 69, 68, 68, 60, 58, 46, 40, 40, 60, 58, 61, 61, 53, 61, 65, 66, 68, 68, 67, 66, 65, 67, 68, 69, 67, 66, 77, 74, 63, 62, 80, 79, 63, 62, 65, 64, 58, 58, 59, 52, 43, 46, 67, 65, 63, 68, 66, 65, 67, 67, 64, 70, 68, 67, 67, 63, 59, 60, 65, 60, 62, 64, 63, 64, 64, 64, 63, 63, 65, 67, 69, 69, 65, 64, 65, 67, 68, 68, 66, 65],
  bodyOffsets: [[2, -24], [2, -24], [2, -24], [3, -23], [3, -23], [3, -23], [0, -25], [0, -25], [0, -25], [-1, -27], [-1, -27], [-1, -27], [1, -26], [1, -26], [1, -26], [2, -27], [2, -27], [2, -27], [1, -25], [1, -25], [1, -25], [-3, -23], [-3, -23], [-3, -23], [0, -27], [1, -28], [1, -24], [1, -24], [0, -27], [-1, -28], [-2, -24], [-1, -24], [0, -26], [-1, -26], [-1, -26], [-1, -27], [0, -27], [0, -26], [1, -25], [0, -25], [0, -27], [-3, -26], [-3, -25], [-1, -26], [-1, -28], [-3, -28], [-3, -25], [-1, -26], [0, -27], [0, -25], [-1, -24], [1, -26], [0, -30], [-2, -27], [-1, -26], [0, -27], [1, -27], [1, -25], [1, -24], [1, -25], [1, -27], [1, -25], [1, -24], [1, -26], [0, -27], [0, -25], [1, -24], [0, -26], [0, -30], [2, -27], [2, -26], [1, -27], [0, -27], [4, -26], [4, -25], [1, -26], [2, -28], [4, -28], [3, -25], [1, -26], [0, -26], [2, -26], [2, -26], [1, -27], [0, -27], [1, -26], [0, -25], [1, -25], [-1, -11], [-1, -11], [-1, -11], [-5, -11], [-5, -11], [-5, -11], [-12, -16], [-12, -16], [-12, -16], [-10, -21], [-10, -21], [-10, -21], [1, -22], [1, -22], [1, -22], [10, -21], [10, -21], [10, -21], [12, -16], [12, -16], [12, -16], [6, -11], [6, -11], [6, -11], [3, -18], [2, -17], [3, -18], [3, -18], [2, -17], [3, -18], [-1, -15], [-3, -12], [-1, -15], [-1, -15], [-3, -12], [-1, -15], [2, -15], [3, -12], [2, -15], [2, -15], [3, -12], [2, -15], [-3, -18], [-2, -17], [-3, -18], [-3, -18], [-2, -17], [-3, -18], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [0, -26], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [0, -25], [1, -26], [1, -27], [0, -27], [0, -26], [1, -26], [0, -25], [1, -26], [1, -27], [0, -27], [0, -26], [1, -26], [0, -25], [0, -26], [0, -27], [0, -27], [0, -26], [0, -26], [0, -25], [0, -26], [0, -27], [0, -27], [0, -26], [0, -26], [1, -26], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [1, -26], [0, -27], [0, -28], [0, -28], [0, -27], [0, -27], [1, -33], [1, -35], [-7, -22], [-7, -22], [-7, -22], [1, -33], [1, -35], [-7, -22], [-7, -22], [-7, -22], [0, -33], [5, -32], [-7, -24], [-7, -24], [-7, -24], [0, -33], [5, -32], [-7, -24], [-7, -24], [-7, -24], [0, -33], [-5, -32], [7, -24], [8, -24], [8, -24], [0, -33], [-5, -32], [7, -24], [8, -24], [8, -24], [0, -33], [-1, -35], [7, -22], [8, -22], [8, -22], [0, -33], [-1, -35], [7, -22], [8, -22], [8, -22], [6, -20], [8, -23], [6, -20], [6, -20], [8, -23], [6, -20], [-1, -20], [2, -18], [-1, -20], [-1, -20], [2, -18], [-1, -20], [1, -20], [-1, -18], [1, -20], [1, -20], [-1, -18], [1, -20], [-5, -20], [-8, -23], [-5, -20], [-5, -20], [-8, -23], [-5, -20], [11, -19], [11, -19], [9, -14], [9, -14], [-9, -14], [-9, -14], [-11, -19], [-11, -19], [2, -10], [2, -10], [8, -4], [8, -4], [-7, -4], [-7, -4], [-2, -10], [-2, -10], [3, -29], [3, -29], [3, -29], [3, -29], [3, -29], [3, -29], [3, -29], [3, -29], [3, -29], [4, -30], [4, -30], [4, -30], [-5, -24], [-9, -27], [-9, -26], [-9, -25], [-9, -25], [3, -29], [4, -30], [4, -30], [4, -30], [-5, -24], [-9, -27], [-9, -26], [-9, -25], [-9, -25], [-1, -25], [1, -25], [1, -25], [1, -25], [-4, -26], [-6, -30], [-6, -29], [-6, -28], [-6, -28], [-1, -25], [1, -25], [1, -25], [1, -25], [-4, -26], [-6, -30], [-6, -29], [-6, -28], [-6, -28], [1, -25], [0, -25], [0, -25], [0, -25], [5, -26], [6, -30], [6, -29], [6, -28], [6, -28], [1, -25], [0, -25], [0, -25], [0, -25], [5, -26], [6, -30], [6, -29], [6, -28], [6, -28], [-3, -29], [-4, -30], [-4, -30], [-4, -30], [6, -24], [10, -27], [10, -26], [10, -25], [10, -25], [-3, -29], [-4, -30], [-4, -30], [-4, -30], [6, -24], [10, -27], [10, -26], [10, -25], [10, -25], [1, -28], [2, -28], [4, -32], [1, -30], [-1, -26], [-9, -24], [-6, -25], [-6, -25], [1, -28], [2, -28], [4, -32], [1, -30], [-1, -26], [-9, -24], [-6, -25], [-6, -25], [1, -25], [5, -24], [11, -25], [4, -25], [1, -25], [-6, -24], [-4, -24], [-4, -24], [1, -25], [5, -24], [11, -25], [4, -25], [1, -25], [-6, -24], [-4, -24], [-4, -24], [-1, -25], [-5, -24], [-11, -25], [-4, -25], [0, -25], [7, -24], [4, -24], [4, -24], [-1, -25], [-5, -24], [-11, -25], [-4, -25], [0, -25], [7, -24], [4, -24], [4, -24], [0, -28], [-2, -28], [-3, -32], [-1, -30], [1, -26], [9, -24], [7, -25], [7, -25], [0, -28], [-2, -28], [-3, -32], [-1, -30], [1, -26], [9, -24], [7, -25], [7, -25], [0, -26], [0, -27], [0, -28], [0, -28], [-3, -26], [-3, -26], [0, -26], [0, -27], [0, -28], [0, -28], [-3, -26], [-3, -26], [0, -25], [1, -26], [0, -27], [0, -27], [-1, -26], [-1, -25], [0, -25], [1, -26], [0, -27], [0, -27], [-1, -26], [-1, -25], [0, -25], [0, -26], [0, -27], [1, -27], [2, -26], [2, -25], [0, -25], [0, -26], [0, -27], [1, -27], [2, -26], [2, -25], [1, -26], [0, -27], [0, -28], [0, -28], [4, -26], [3, -26], [1, -26], [0, -27], [0, -28], [0, -28], [4, -26], [3, -26]],
  anchorHead: [[1, -55], [-3, -56], [5, -56], [-3, -56], [-3, -56], [1, -56], [-3, -56], [13, -72], [-3, -56], [13, -72], [13, -71], [-3, -56], [12, -71], [-9, -72], [12, -72], [-12, -72], [4, -56], [10, -71], [4, -56], [4, -56], [-12, -72], [4, -56], [0, -56], [4, -56], [0, -57], [0, -56], [0, -54], [0, -55], [0, -57], [0, -56], [0, -54], [0, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [14, -72], [14, -71], [14, -69], [14, -70], [14, -72], [14, -71], [14, -69], [14, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-13, -72], [-13, -71], [-13, -69], [-13, -70], [-13, -72], [-13, -71], [-13, -69], [-13, -70], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [0, -36], [-4, -36], [3, -36], [-4, -35], [-4, -35], [-1, -34], [-4, -35], [12, -51], [-4, -35], [12, -52], [11, -51], [-4, -36], [12, -51], [-9, -52], [12, -52], [-11, -52], [5, -36], [12, -51], [5, -35], [5, -35], [-11, -51], [5, -35], [2, -34], [5, -35], [-7, -56], [-11, -42], [-7, -54], [-7, -56], [-11, -42], [-7, -54], [-7, -56], [-12, -38], [-8, -54], [-7, -56], [-12, -38], [-8, -54], [8, -56], [13, -38], [9, -54], [8, -56], [13, -38], [9, -54], [8, -56], [12, -42], [8, -54], [8, -56], [12, -42], [8, -54], [-6, -57], [-6, -59], [-6, -60], [-6, -60], [-6, -59], [-6, -58], [-6, -57], [-6, -59], [-6, -60], [-6, -60], [-6, -59], [-6, -58], [14, -72], [14, -74], [14, -75], [14, -75], [14, -74], [14, -73], [14, -72], [14, -74], [14, -75], [14, -75], [14, -74], [14, -73], [-13, -72], [-13, -74], [-13, -75], [-13, -75], [-13, -74], [-13, -73], [-13, -72], [-13, -74], [-13, -75], [-13, -75], [-13, -74], [-13, -73], [7, -57], [7, -59], [7, -60], [7, -60], [7, -59], [7, -58], [7, -57], [7, -59], [7, -60], [7, -60], [7, -59], [7, -58], [-4, -57], [-2, -58], [-14, -47], [-16, -44], [-16, -44], [-4, -57], [-2, -58], [-14, -47], [-16, -44], [-16, -44], [15, -72], [19, -72], [2, -65], [0, -64], [0, -64], [15, -72], [19, -72], [2, -65], [0, -64], [0, -64], [-14, -72], [-18, -72], [-1, -65], [1, -64], [1, -64], [-14, -72], [-18, -72], [-1, -65], [1, -64], [1, -64], [5, -57], [3, -58], [15, -47], [17, -44], [17, -44], [5, -57], [3, -58], [15, -47], [17, -44], [17, -44], [13, -55], [17, -57], [13, -55], [13, -55], [17, -57], [13, -55], [7, -64], [12, -60], [7, -64], [7, -64], [12, -60], [7, -64], [-6, -64], [-11, -60], [-6, -64], [-6, -64], [-11, -60], [-6, -64], [-12, -55], [-16, -57], [-12, -55], [-12, -55], [-16, -57], [-12, -55], [29, -51], [29, -51], [24, -53], [24, -53], [-23, -53], [-23, -53], [-28, -51], [-28, -51], [29, -24], [29, -24], [38, 0], [38, 0], [-37, 0], [-37, 0], [-28, -24], [-28, -24], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-5, -57], [-4, -57], [-3, -57], [-3, -57], [-14, -51], [-15, -49], [-16, -47], [-16, -46], [-16, -46], [-5, -57], [-4, -57], [-3, -57], [-3, -57], [-14, -51], [-15, -49], [-16, -47], [-16, -46], [-16, -46], [14, -71], [16, -71], [17, -71], [17, -71], [9, -67], [0, -65], [-1, -62], [-1, -61], [-1, -61], [14, -71], [16, -71], [17, -71], [17, -71], [9, -67], [0, -65], [-1, -62], [-1, -61], [-1, -61], [-13, -71], [-15, -71], [-16, -71], [-16, -71], [-8, -67], [1, -65], [2, -62], [2, -61], [2, -61], [-13, -71], [-15, -71], [-16, -71], [-16, -71], [-8, -67], [1, -65], [2, -62], [2, -61], [2, -61], [6, -57], [5, -57], [4, -57], [4, -57], [15, -51], [16, -49], [17, -47], [17, -46], [17, -46], [6, -57], [5, -57], [4, -57], [4, -57], [15, -51], [16, -49], [17, -47], [17, -46], [17, -46], [-5, -58], [-2, -59], [1, -60], [-2, -59], [-4, -58], [-20, -50], [-16, -51], [-15, -52], [-5, -58], [-2, -59], [1, -60], [-2, -59], [-4, -58], [-20, -50], [-16, -51], [-15, -52], [13, -72], [18, -71], [26, -68], [21, -69], [16, -70], [4, -69], [8, -69], [9, -69], [13, -72], [18, -71], [26, -68], [21, -69], [16, -70], [4, -69], [8, -69], [9, -69], [-12, -72], [-17, -71], [-25, -68], [-20, -69], [-15, -70], [-3, -69], [-7, -69], [-8, -69], [-12, -72], [-17, -71], [-25, -68], [-20, -69], [-15, -70], [-3, -69], [-7, -69], [-8, -69], [6, -58], [3, -59], [0, -60], [3, -59], [5, -58], [21, -50], [17, -51], [16, -52], [6, -58], [3, -59], [0, -60], [3, -59], [5, -58], [21, -50], [17, -51], [16, -52], [-6, -57], [-6, -59], [-6, -61], [-5, -61], [-8, -57], [-7, -56], [-6, -57], [-6, -59], [-6, -61], [-5, -61], [-8, -57], [-7, -56], [15, -72], [15, -74], [15, -75], [15, -75], [14, -73], [14, -72], [15, -72], [15, -74], [15, -75], [15, -75], [14, -73], [14, -72], [-14, -72], [-14, -74], [-14, -75], [-14, -75], [-13, -73], [-13, -72], [-14, -72], [-14, -74], [-14, -75], [-14, -75], [-13, -73], [-13, -72], [7, -57], [7, -59], [7, -61], [6, -61], [9, -57], [8, -56], [7, -57], [7, -59], [7, -61], [6, -61], [9, -57], [8, -56]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 52, 50, 51, 52, 53, 54, 55, 53, 54, 55, 53, 54, 55, 53, 54, 55, 50, 51, 52, 50, 51, 52, 56, 57, 58, 59, 60, 61, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 62, 63, 64, 65, 66, 67, 56, 57, 58, 59, 60, 61, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 71, 68, 69, 70, 71, 71, 72, 73, 74, 75, 75, 72, 73, 74, 75, 75, 72, 73, 74, 75, 75, 72, 73, 74, 75, 75, 68, 69, 70, 71, 71, 68, 69, 70, 71, 71, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 83, 83, 83, 83, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 86, 87, 88, 89, 89, 84, 85, 85, 85, 86, 87, 88, 89, 89, 90, 91, 91, 91, 92, 93, 94, 95, 95, 90, 91, 91, 91, 92, 93, 94, 95, 95, 90, 91, 91, 91, 92, 93, 94, 95, 95, 90, 91, 91, 91, 92, 93, 94, 95, 95, 84, 85, 85, 85, 86, 87, 88, 89, 89, 84, 85, 85, 85, 86, 87, 88, 89, 89, 96, 97, 98, 99, 100, 101, 102, 102, 96, 97, 98, 99, 100, 101, 102, 102, 103, 104, 105, 106, 107, 108, 109, 109, 103, 104, 105, 106, 107, 108, 109, 109, 103, 104, 105, 106, 107, 108, 109, 109, 103, 104, 105, 106, 107, 108, 109, 109, 96, 97, 98, 99, 100, 101, 102, 102, 96, 97, 98, 99, 100, 101, 102, 102, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115]
};

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 44, 86, 123, 160, 202, 241, 278, 309, 345, 384, 421, 452, 489, 518, 548, 584, 617, 646, 683, 724, 763, 791, 832, 877, 916, 943, 984, 1032, 1076, 1113, 1156, 1198, 1233, 1269, 1305, 1341, 1376, 1414, 1451, 1484, 1521, 1559, 1596, 1629, 1666, 1703, 1745, 1791, 1843, 1877, 1916, 1957, 1993, 2027, 2067, 2109, 2151, 2192, 2233, 2273, 2310, 2348, 2387, 2426, 2464, 2501, 2539, 2588, 2630, 2696, 2757, 2792, 2844, 2880, 2941, 2995, 3035, 3074, 3117, 3160, 3220, 3272, 3314, 3356, 3405, 3460, 3513, 3561, 3597, 3634, 3683, 3726, 3766, 3810, 3853, 3895, 3932, 4004, 4041, 4090, 4129, 4168, 4199, 4261, 4301, 4346, 4392, 4457, 4504, 4559, 4588, 4623, 4684, 4722, 4769, 4800, 4866, 4903],
  widths: [44, 42, 37, 37, 42, 39, 37, 31, 36, 39, 37, 31, 37, 29, 30, 36, 33, 29, 37, 41, 39, 28, 41, 45, 39, 27, 41, 48, 44, 37, 43, 42, 35, 36, 36, 36, 35, 38, 37, 33, 37, 38, 37, 33, 37, 37, 42, 46, 52, 34, 39, 41, 36, 34, 40, 42, 42, 41, 41, 40, 37, 38, 39, 39, 38, 37, 38, 49, 42, 66, 61, 35, 52, 36, 61, 54, 40, 39, 43, 43, 60, 52, 42, 42, 49, 55, 53, 48, 36, 37, 49, 43, 40, 44, 43, 42, 37, 72, 37, 49, 39, 39, 31, 62, 40, 45, 46, 65, 47, 55, 29, 35, 61, 38, 47, 31, 66, 37, 67],
  heights: [72, 69, 71, 70, 69, 70, 68, 68, 70, 70, 68, 68, 70, 69, 67, 69, 73, 71, 69, 67, 71, 67, 66, 65, 66, 67, 66, 65, 65, 68, 65, 66, 72, 72, 71, 71, 68, 66, 70, 67, 66, 66, 71, 67, 66, 64, 60, 52, 42, 44, 52, 44, 50, 42, 66, 65, 64, 63, 64, 65, 66, 65, 64, 63, 64, 65, 62, 63, 65, 61, 60, 62, 63, 66, 61, 60, 58, 57, 56, 54, 38, 43, 65, 68, 72, 80, 82, 70, 66, 67, 66, 75, 76, 63, 66, 67, 69, 66, 69, 69, 67, 65, 64, 63, 65, 60, 58, 56, 67, 67, 69, 59, 60, 74, 74, 66, 63, 64, 64],
  bodyOffsets: [[-2, -26], [-2, -26], [-2, -26], [-2, -28], [-2, -28], [-2, -28], [-5, -27], [-5, -27], [-5, -27], [-2, -26], [-2, -26], [-2, -26], [-1, -26], [-1, -26], [-1, -26], [3, -26], [3, -26], [3, -26], [6, -27], [6, -27], [6, -27], [2, -28], [2, -28], [2, -28], [-1, -25], [-1, -25], [-2, -23], [-3, -23], [-1, -25], [-1, -25], [0, -23], [0, -23], [-1, -26], [0, -26], [-1, -24], [-1, -22], [-1, -25], [0, -25], [-1, -24], [1, -23], [-2, -27], [-6, -27], [-5, -25], [-1, -26], [-1, -27], [-3, -27], [-5, -25], [-3, -26], [-3, -26], [-3, -26], [-2, -24], [-1, -21], [-1, -23], [0, -22], [-1, -20], [-1, -23], [0, -26], [1, -23], [2, -23], [1, -24], [0, -26], [0, -22], [-1, -23], [0, -24], [4, -26], [4, -26], [2, -24], [2, -21], [1, -23], [0, -22], [1, -20], [2, -23], [2, -27], [7, -27], [6, -25], [2, -26], [2, -27], [4, -27], [5, -25], [3, -26], [2, -26], [0, -26], [1, -24], [2, -22], [2, -25], [1, -25], [2, -24], [0, -23], [0, -6], [0, -6], [0, -6], [-2, -9], [-2, -9], [-2, -9], [-6, -11], [-6, -11], [-6, -11], [-9, -14], [-9, -14], [-9, -14], [0, -13], [0, -13], [0, -13], [9, -14], [9, -14], [9, -14], [6, -11], [6, -11], [6, -11], [2, -9], [2, -9], [2, -9], [-2, -21], [-1, -17], [-2, -21], [-2, -21], [-1, -17], [-2, -21], [-5, -19], [-4, -15], [-5, -19], [-5, -19], [-4, -15], [-5, -19], [5, -19], [4, -15], [5, -19], [5, -19], [4, -15], [5, -19], [3, -21], [2, -17], [3, -21], [3, -21], [2, -17], [3, -21], [-1, -28], [-1, -27], [-1, -27], [-1, -26], [-1, -27], [-2, -27], [-1, -28], [-1, -27], [-1, -27], [-1, -26], [-1, -27], [-2, -27], [2, -26], [2, -25], [3, -25], [3, -24], [2, -25], [2, -25], [2, -26], [2, -25], [3, -25], [3, -24], [2, -25], [2, -25], [-1, -26], [-2, -25], [-2, -25], [-2, -24], [-2, -25], [-1, -25], [-1, -26], [-2, -25], [-2, -25], [-2, -24], [-2, -25], [-1, -25], [1, -28], [1, -27], [1, -27], [2, -26], [2, -27], [2, -27], [1, -28], [1, -27], [1, -27], [2, -26], [2, -27], [2, -27], [-2, -23], [-1, -41], [-1, -26], [-22, -24], [-20, -24], [-2, -23], [-1, -41], [-1, -26], [-22, -24], [-20, -24], [-1, -21], [-4, -39], [1, -24], [-15, -32], [-15, -32], [-1, -21], [-4, -39], [1, -24], [-15, -32], [-15, -32], [2, -21], [4, -39], [-1, -24], [16, -32], [15, -32], [2, -21], [4, -39], [-1, -24], [16, -32], [15, -32], [2, -23], [2, -41], [1, -26], [22, -24], [21, -24], [2, -23], [2, -41], [1, -26], [22, -24], [21, -24], [-3, -22], [-2, -21], [-3, -22], [-3, -22], [-2, -21], [-3, -22], [2, -19], [4, -18], [2, -19], [2, -19], [4, -18], [2, -19], [-1, -19], [-3, -18], [-1, -19], [-1, -19], [-3, -18], [-1, -19], [3, -22], [2, -21], [3, -22], [3, -22], [2, -21], [3, -22], [0, -20], [0, -20], [7, -16], [7, -16], [-6, -16], [-6, -16], [1, -20], [1, -20], [1, 1], [1, 1], [1, 1], [1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-1, -26], [-1, -26], [-2, -28], [-3, -29], [-12, -34], [-13, -35], [-13, -35], [-13, -35], [-14, -29], [-1, -26], [-1, -26], [-2, -28], [-3, -29], [-12, -34], [-13, -35], [-13, -35], [-13, -35], [-14, -29], [1, -24], [1, -24], [2, -24], [-5, -32], [-10, -40], [-10, -41], [-10, -41], [-10, -41], [-5, -33], [1, -24], [1, -24], [2, -24], [-5, -32], [-10, -40], [-10, -41], [-10, -41], [-10, -41], [-5, -33], [-1, -24], [-1, -24], [-1, -24], [6, -32], [11, -40], [10, -41], [10, -41], [10, -41], [5, -33], [-1, -24], [-1, -24], [-1, -24], [6, -32], [11, -40], [10, -41], [10, -41], [10, -41], [5, -33], [1, -26], [1, -26], [2, -28], [4, -29], [13, -34], [14, -35], [14, -35], [14, -35], [14, -29], [1, -26], [1, -26], [2, -28], [4, -29], [13, -34], [14, -35], [14, -35], [14, -35], [14, -29], [1, -26], [1, -26], [1, -26], [-1, -26], [-4, -27], [-31, -26], [-11, -28], [-2, -28], [1, -26], [1, -26], [1, -26], [-1, -26], [-4, -27], [-31, -26], [-11, -28], [-2, -28], [2, -24], [2, -24], [2, -24], [3, -23], [-7, -31], [-13, -35], [-6, -36], [6, -30], [2, -24], [2, -24], [2, -24], [3, -23], [-7, -31], [-13, -35], [-6, -36], [6, -30], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [8, -31], [13, -35], [6, -36], [-5, -30], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [8, -31], [13, -35], [6, -36], [-5, -30], [0, -26], [0, -26], [0, -26], [1, -26], [5, -27], [31, -26], [12, -28], [3, -28], [0, -26], [0, -26], [0, -26], [1, -26], [5, -27], [31, -26], [12, -28], [3, -28], [-6, -22], [4, -28], [-5, -27], [0, -25], [-8, -28], [4, -28], [-6, -22], [4, -28], [-5, -27], [0, -25], [-8, -28], [4, -28], [1, -18], [26, -26], [1, -28], [4, -25], [-8, -25], [9, -31], [1, -18], [26, -26], [1, -28], [4, -25], [-8, -25], [9, -31], [0, -18], [11, -26], [-1, -28], [-3, -25], [9, -25], [-9, -31], [0, -18], [11, -26], [-1, -28], [-3, -25], [9, -25], [-9, -31], [6, -22], [-10, -28], [6, -27], [1, -25], [9, -28], [-3, -28], [6, -22], [-10, -28], [6, -27], [1, -25], [9, -28], [-3, -28]],
  anchorHead: [[-1, -58], [-6, -59], [5, -59], [-6, -59], [-5, -59], [-1, -58], [-5, -59], [11, -75], [-6, -59], [11, -75], [11, -74], [-5, -59], [11, -74], [-11, -75], [11, -75], [-10, -75], [6, -59], [12, -74], [6, -59], [7, -59], [-10, -75], [7, -59], [2, -58], [7, -59], [-1, -56], [-1, -55], [-1, -53], [-1, -54], [-1, -56], [-1, -55], [-1, -53], [-1, -54], [-6, -57], [-6, -56], [-6, -54], [-6, -55], [-6, -57], [-6, -56], [-6, -54], [-6, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [11, -73], [11, -72], [11, -70], [11, -71], [11, -73], [11, -72], [11, -70], [11, -71], [11, -72], [11, -71], [11, -69], [11, -70], [11, -72], [11, -71], [11, -69], [11, -70], [-10, -73], [-10, -72], [-10, -70], [-10, -71], [-10, -73], [-10, -72], [-10, -70], [-10, -71], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [7, -57], [7, -56], [7, -54], [7, -55], [7, -57], [7, -56], [7, -54], [7, -55], [1, -32], [-4, -33], [7, -33], [-4, -33], [-3, -33], [2, -32], [-2, -33], [14, -49], [-3, -33], [13, -49], [13, -48], [-2, -33], [12, -48], [-10, -49], [12, -49], [-12, -49], [4, -33], [10, -48], [3, -33], [4, -33], [-13, -49], [5, -33], [-1, -32], [4, -33], [-10, -62], [-12, -38], [-10, -62], [-10, -62], [-12, -38], [-10, -62], [-9, -58], [-7, -37], [-9, -58], [-9, -58], [-7, -37], [-9, -58], [10, -58], [8, -37], [10, -58], [10, -58], [8, -37], [10, -58], [11, -62], [13, -38], [11, -62], [11, -62], [13, -38], [11, -62], [-6, -57], [-6, -56], [-6, -55], [-6, -54], [-6, -55], [-6, -56], [-6, -57], [-6, -56], [-6, -55], [-6, -54], [-6, -55], [-6, -56], [11, -73], [11, -72], [11, -71], [11, -70], [11, -71], [11, -72], [11, -73], [11, -72], [11, -71], [11, -70], [11, -71], [11, -72], [-10, -73], [-10, -72], [-10, -71], [-10, -70], [-10, -71], [-10, -72], [-10, -73], [-10, -72], [-10, -71], [-10, -70], [-10, -71], [-10, -72], [7, -57], [7, -56], [7, -55], [7, -54], [7, -55], [7, -56], [7, -57], [7, -56], [7, -55], [7, -54], [7, -55], [7, -56], [-7, -50], [-8, -69], [-6, -53], [-21, -50], [-20, -49], [-7, -50], [-8, -69], [-6, -53], [-21, -50], [-20, -49], [12, -64], [5, -83], [11, -71], [-1, -77], [-1, -76], [12, -64], [5, -83], [11, -71], [-1, -77], [-1, -76], [-11, -64], [-4, -83], [-10, -71], [2, -77], [2, -76], [-11, -64], [-4, -83], [-10, -71], [2, -77], [2, -76], [8, -50], [9, -69], [7, -53], [22, -50], [21, -49], [8, -50], [9, -69], [7, -53], [22, -50], [21, -49], [15, -61], [18, -59], [15, -61], [15, -61], [18, -59], [15, -61], [15, -66], [20, -64], [15, -66], [15, -66], [20, -64], [15, -66], [-14, -66], [-19, -64], [-14, -66], [-14, -66], [-19, -64], [-14, -66], [-14, -61], [-17, -59], [-14, -61], [-14, -61], [-17, -59], [-14, -61], [19, -58], [19, -58], [24, -62], [24, -62], [-23, -62], [-23, -62], [-18, -58], [-18, -58], [37, -13], [37, -13], [38, 17], [38, 17], [-37, 17], [-37, 17], [-36, -13], [-36, -13], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-5, -54], [-5, -54], [-8, -58], [-13, -61], [-17, -61], [-17, -62], [-17, -62], [-17, -62], [-19, -60], [-5, -54], [-5, -54], [-8, -58], [-13, -61], [-17, -61], [-17, -62], [-17, -62], [-17, -62], [-19, -60], [11, -71], [11, -71], [11, -72], [7, -79], [3, -86], [2, -87], [2, -87], [2, -87], [6, -79], [11, -71], [11, -71], [11, -72], [7, -79], [3, -86], [2, -87], [2, -87], [2, -87], [6, -79], [-10, -71], [-10, -71], [-10, -72], [-6, -79], [-2, -86], [-1, -87], [-1, -87], [-1, -87], [-5, -79], [-10, -71], [-10, -71], [-10, -72], [-6, -79], [-2, -86], [-1, -87], [-1, -87], [-1, -87], [-5, -79], [6, -54], [6, -54], [9, -58], [14, -61], [18, -61], [18, -62], [18, -62], [18, -62], [20, -60], [6, -54], [6, -54], [9, -58], [14, -61], [18, -61], [18, -62], [18, -62], [18, -62], [20, -60], [-4, -55], [-4, -55], [-4, -55], [-8, -56], [-1, -57], [-24, -69], [-12, -58], [-11, -59], [-4, -55], [-4, -55], [-4, -55], [-8, -56], [-1, -57], [-24, -69], [-12, -58], [-11, -59], [10, -72], [10, -72], [10, -72], [11, -70], [4, -57], [4, -58], [-5, -79], [11, -74], [10, -72], [10, -72], [10, -72], [11, -70], [4, -57], [4, -58], [-5, -79], [11, -74], [-9, -72], [-9, -72], [-9, -72], [-10, -70], [-3, -57], [-3, -58], [6, -79], [-10, -74], [-9, -72], [-9, -72], [-9, -72], [-10, -70], [-3, -57], [-3, -58], [6, -79], [-10, -74], [5, -55], [5, -55], [5, -55], [9, -56], [2, -57], [25, -69], [13, -58], [12, -59], [5, -55], [5, -55], [5, -55], [9, -56], [2, -57], [25, -69], [13, -58], [12, -59], [-5, -46], [15, -51], [-6, -57], [-4, -55], [-14, -59], [12, -51], [-5, -46], [15, -51], [-6, -57], [-4, -55], [-14, -59], [12, -51], [13, -60], [14, -53], [16, -73], [12, -70], [5, -74], [28, -75], [13, -60], [14, -53], [16, -73], [12, -70], [5, -74], [28, -75], [-12, -60], [10, -69], [-15, -73], [-11, -70], [-4, -74], [-27, -75], [-12, -60], [10, -69], [-15, -73], [-11, -70], [-4, -74], [-27, -75], [6, -46], [-1, -54], [7, -57], [5, -55], [15, -59], [-11, -51], [6, -46], [-1, -54], [7, -57], [5, -55], [15, -59], [-11, -51]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 82, 83, 84, 85, 86, 86, 86, 87, 82, 82, 83, 84, 85, 86, 86, 86, 87, 88, 88, 89, 90, 91, 92, 92, 92, 93, 88, 88, 89, 90, 91, 92, 92, 92, 93, 88, 88, 89, 90, 91, 92, 92, 92, 93, 88, 88, 89, 90, 91, 92, 92, 92, 93, 82, 82, 83, 84, 85, 86, 86, 86, 87, 82, 82, 83, 84, 85, 86, 86, 86, 87, 94, 94, 94, 95, 96, 97, 98, 99, 94, 94, 94, 95, 96, 97, 98, 99, 100, 100, 100, 101, 102, 103, 104, 105, 100, 100, 100, 101, 102, 103, 104, 105, 100, 100, 100, 101, 102, 103, 104, 105, 100, 100, 100, 101, 102, 103, 104, 105, 94, 94, 94, 95, 96, 97, 98, 99, 94, 94, 94, 95, 96, 97, 98, 99, 106, 107, 108, 109, 110, 107, 106, 107, 108, 109, 110, 107, 111, 112, 113, 114, 115, 116, 111, 112, 113, 114, 115, 116, 111, 117, 113, 114, 115, 116, 111, 117, 113, 114, 115, 116, 106, 118, 108, 109, 110, 107, 106, 118, 108, 109, 110, 107]
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 64, 129, 168, 228, 283, 340, 399, 458, 518, 578, 637, 696, 755, 810, 866, 923, 980, 1035, 1089, 1143, 1197, 1232, 1267, 1304, 1342, 1382, 1421, 1456, 1490, 1541, 1593, 1645, 1697, 1748, 1798, 1848, 1898, 1964, 2034, 2103, 2172, 2241, 2308, 2375, 2442, 2479, 2521, 2567, 2619, 2653, 2692, 2733, 2769, 2803, 2868, 2934, 3001, 3066, 3131, 3191, 3251, 3311, 3371, 3432, 3470, 3519, 3561, 3627, 3688, 3723, 3775, 3811, 3872, 3926, 3966, 4005, 4048, 4091, 4151, 4203, 4245, 4287, 4336, 4391, 4444, 4492, 4528, 4565, 4614, 4657, 4697, 4741, 4784, 4826, 4863, 4935, 4972, 5021, 5060, 5099, 5130, 5192, 5232, 5277, 5323, 5388, 5435, 5490, 5519, 5554, 5615, 5653, 5700, 5731, 5797, 5834],
  widths: [64, 65, 39, 60, 55, 57, 59, 59, 60, 60, 59, 59, 59, 55, 56, 57, 57, 55, 54, 54, 54, 35, 35, 37, 38, 40, 39, 35, 34, 51, 52, 52, 52, 51, 50, 50, 50, 66, 70, 69, 69, 69, 67, 67, 67, 37, 42, 46, 52, 34, 39, 41, 36, 34, 65, 66, 67, 65, 65, 60, 60, 60, 60, 61, 38, 49, 42, 66, 61, 35, 52, 36, 61, 54, 40, 39, 43, 43, 60, 52, 42, 42, 49, 55, 53, 48, 36, 37, 49, 43, 40, 44, 43, 42, 37, 72, 37, 49, 39, 39, 31, 62, 40, 45, 46, 65, 47, 55, 29, 35, 61, 38, 47, 31, 66, 37, 67],
  heights: [73, 70, 73, 70, 70, 70, 66, 65, 65, 65, 65, 66, 68, 70, 69, 69, 69, 69, 69, 69, 70, 71, 71, 70, 70, 71, 71, 71, 72, 70, 71, 71, 70, 70, 70, 70, 70, 72, 74, 74, 74, 74, 74, 74, 74, 64, 60, 52, 42, 44, 52, 44, 50, 42, 70, 70, 70, 70, 70, 70, 70, 69, 70, 70, 62, 63, 65, 61, 60, 62, 63, 66, 61, 60, 58, 57, 56, 54, 38, 43, 65, 68, 72, 80, 82, 70, 66, 67, 66, 75, 76, 63, 66, 67, 69, 66, 69, 69, 67, 65, 64, 63, 65, 60, 58, 56, 67, 67, 69, 59, 60, 74, 74, 66, 63, 64, 64],
  bodyOffsets: [[-5, -26], [-5, -26], [-5, -26], [-5, -28], [-5, -28], [-5, -28], [-2, -26], [-2, -26], [-2, -26], [-7, -26], [-7, -26], [-7, -26], [-2, -26], [-2, -26], [-2, -26], [7, -26], [7, -26], [7, -26], [3, -26], [3, -26], [3, -26], [6, -28], [6, -28], [6, -28], [1, -28], [2, -29], [2, -27], [1, -24], [1, -23], [2, -24], [2, -27], [2, -28], [4, -28], [4, -27], [4, -25], [4, -22], [4, -21], [3, -23], [3, -25], [4, -27], [6, -27], [7, -26], [8, -25], [7, -22], [6, -20], [7, -21], [6, -24], [6, -26], [-1, -26], [-1, -24], [-1, -22], [-1, -20], [-1, -19], [-1, -20], [-1, -23], [-1, -25], [0, -25], [0, -23], [0, -21], [0, -18], [0, -17], [0, -18], [0, -21], [0, -23], [2, -26], [1, -24], [1, -22], [1, -20], [2, -19], [1, -20], [1, -23], [1, -25], [-5, -27], [-6, -26], [-7, -25], [-7, -22], [-6, -20], [-6, -21], [-5, -24], [-6, -26], [-3, -28], [-4, -27], [-3, -25], [-3, -22], [-3, -21], [-3, -23], [-3, -25], [-4, -27], [0, -6], [0, -6], [0, -6], [-2, -9], [-2, -9], [-2, -9], [-6, -11], [-6, -11], [-6, -11], [-9, -14], [-9, -14], [-9, -14], [0, -13], [0, -13], [0, -13], [9, -14], [9, -14], [9, -14], [6, -11], [6, -11], [6, -11], [2, -9], [2, -9], [2, -9], [-2, -21], [-1, -17], [-2, -21], [-2, -21], [-1, -17], [-2, -21], [-5, -19], [-4, -15], [-5, -19], [-5, -19], [-4, -15], [-5, -19], [5, -19], [4, -15], [5, -19], [5, -19], [4, -15], [5, -19], [3, -21], [2, -17], [3, -21], [3, -21], [2, -17], [3, -21], [-2, -26], [-4, -26], [-4, -25], [-3, -23], [-4, -22], [-4, -23], [-4, -25], [-4, -26], [-4, -25], [-3, -23], [-4, -22], [-4, -23], [-4, -25], [-6, -24], [-6, -23], [-6, -20], [-6, -20], [-5, -21], [-5, -23], [-6, -24], [-6, -23], [-6, -20], [-6, -20], [-5, -21], [-5, -23], [6, -24], [6, -23], [6, -20], [6, -20], [6, -21], [6, -23], [6, -24], [6, -23], [6, -20], [6, -20], [6, -21], [6, -23], [5, -26], [4, -25], [4, -23], [5, -22], [5, -23], [5, -25], [5, -26], [4, -25], [4, -23], [5, -22], [5, -23], [5, -25], [-2, -23], [-1, -41], [-1, -26], [-22, -24], [-20, -24], [-2, -23], [-1, -41], [-1, -26], [-22, -24], [-20, -24], [-1, -21], [-4, -39], [1, -24], [-15, -32], [-15, -32], [-1, -21], [-4, -39], [1, -24], [-15, -32], [-15, -32], [2, -21], [4, -39], [-1, -24], [16, -32], [15, -32], [2, -21], [4, -39], [-1, -24], [16, -32], [15, -32], [2, -23], [2, -41], [1, -26], [22, -24], [21, -24], [2, -23], [2, -41], [1, -26], [22, -24], [21, -24], [-3, -22], [-2, -21], [-3, -22], [-3, -22], [-2, -21], [-3, -22], [2, -19], [4, -18], [2, -19], [2, -19], [4, -18], [2, -19], [-1, -19], [-3, -18], [-1, -19], [-1, -19], [-3, -18], [-1, -19], [3, -22], [2, -21], [3, -22], [3, -22], [2, -21], [3, -22], [0, -20], [0, -20], [7, -16], [7, -16], [-6, -16], [-6, -16], [1, -20], [1, -20], [1, 1], [1, 1], [1, 1], [1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-2, -29], [-1, -26], [-1, -26], [-2, -28], [-3, -29], [-12, -34], [-13, -35], [-13, -35], [-13, -35], [-14, -29], [-1, -26], [-1, -26], [-2, -28], [-3, -29], [-12, -34], [-13, -35], [-13, -35], [-13, -35], [-14, -29], [1, -24], [1, -24], [2, -24], [-5, -32], [-10, -40], [-10, -41], [-10, -41], [-10, -41], [-5, -33], [1, -24], [1, -24], [2, -24], [-5, -32], [-10, -40], [-10, -41], [-10, -41], [-10, -41], [-5, -33], [-1, -24], [-1, -24], [-1, -24], [6, -32], [11, -40], [10, -41], [10, -41], [10, -41], [5, -33], [-1, -24], [-1, -24], [-1, -24], [6, -32], [11, -40], [10, -41], [10, -41], [10, -41], [5, -33], [1, -26], [1, -26], [2, -28], [4, -29], [13, -34], [14, -35], [14, -35], [14, -35], [14, -29], [1, -26], [1, -26], [2, -28], [4, -29], [13, -34], [14, -35], [14, -35], [14, -35], [14, -29], [1, -26], [1, -26], [1, -26], [-1, -26], [-4, -27], [-31, -26], [-11, -28], [-2, -28], [1, -26], [1, -26], [1, -26], [-1, -26], [-4, -27], [-31, -26], [-11, -28], [-2, -28], [2, -24], [2, -24], [2, -24], [3, -23], [-7, -31], [-13, -35], [-6, -36], [6, -30], [2, -24], [2, -24], [2, -24], [3, -23], [-7, -31], [-13, -35], [-6, -36], [6, -30], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [8, -31], [13, -35], [6, -36], [-5, -30], [-1, -24], [-1, -24], [-1, -24], [-2, -23], [8, -31], [13, -35], [6, -36], [-5, -30], [0, -26], [0, -26], [0, -26], [1, -26], [5, -27], [31, -26], [12, -28], [3, -28], [0, -26], [0, -26], [0, -26], [1, -26], [5, -27], [31, -26], [12, -28], [3, -28], [-6, -22], [4, -28], [-5, -27], [0, -25], [-8, -28], [4, -28], [-6, -22], [4, -28], [-5, -27], [0, -25], [-8, -28], [4, -28], [1, -18], [26, -26], [1, -28], [4, -25], [-8, -25], [9, -31], [1, -18], [26, -26], [1, -28], [4, -25], [-8, -25], [9, -31], [0, -18], [11, -26], [-1, -28], [-3, -25], [9, -25], [-9, -31], [0, -18], [11, -26], [-1, -28], [-3, -25], [9, -25], [-9, -31], [6, -22], [-10, -28], [6, -27], [1, -25], [9, -28], [-3, -28], [6, -22], [-10, -28], [6, -27], [1, -25], [9, -28], [-3, -28]],
  anchorHead: [[-1, -58], [-6, -59], [5, -59], [-6, -59], [-5, -59], [-1, -58], [-5, -59], [11, -75], [-6, -59], [11, -75], [11, -74], [-5, -59], [11, -74], [-11, -75], [11, -75], [-10, -75], [6, -59], [12, -74], [6, -59], [7, -59], [-10, -75], [7, -59], [2, -58], [7, -59], [-1, -58], [-1, -57], [-1, -55], [-1, -52], [-1, -51], [-1, -52], [-1, -55], [-1, -57], [-6, -59], [-6, -58], [-6, -56], [-6, -53], [-6, -52], [-6, -53], [-6, -56], [-6, -58], [-5, -59], [-5, -58], [-5, -56], [-5, -53], [-5, -52], [-5, -53], [-5, -56], [-5, -58], [11, -75], [11, -74], [11, -72], [11, -69], [11, -68], [11, -69], [11, -72], [11, -74], [11, -74], [11, -73], [11, -71], [11, -68], [11, -67], [11, -68], [11, -71], [11, -73], [-10, -75], [-10, -74], [-10, -72], [-10, -69], [-10, -68], [-10, -69], [-10, -72], [-10, -74], [6, -59], [6, -58], [6, -56], [6, -53], [6, -52], [6, -53], [6, -56], [6, -58], [7, -59], [7, -58], [7, -56], [7, -53], [7, -52], [7, -53], [7, -56], [7, -58], [1, -32], [-4, -33], [7, -33], [-4, -33], [-3, -33], [2, -32], [-2, -33], [14, -49], [-3, -33], [13, -49], [13, -48], [-2, -33], [12, -48], [-10, -49], [12, -49], [-12, -49], [4, -33], [10, -48], [3, -33], [4, -33], [-13, -49], [5, -33], [-1, -32], [4, -33], [-10, -62], [-12, -38], [-10, -62], [-10, -62], [-12, -38], [-10, -62], [-9, -58], [-7, -37], [-9, -58], [-9, -58], [-7, -37], [-9, -58], [10, -58], [8, -37], [10, -58], [10, -58], [8, -37], [10, -58], [11, -62], [13, -38], [11, -62], [11, -62], [13, -38], [11, -62], [11, -75], [-6, -57], [-6, -56], [-6, -55], [-6, -54], [-6, -55], [-6, -55], [-6, -57], [-6, -56], [-6, -55], [-6, -54], [-6, -55], [-6, -55], [11, -73], [11, -72], [11, -70], [11, -69], [11, -70], [11, -72], [11, -73], [11, -72], [11, -70], [11, -69], [11, -70], [11, -72], [-10, -73], [-10, -72], [-10, -70], [-10, -69], [-10, -70], [-10, -72], [-10, -73], [-10, -72], [-10, -70], [-10, -69], [-10, -70], [-10, -72], [7, -57], [7, -56], [7, -55], [7, -54], [7, -55], [7, -55], [7, -57], [7, -56], [7, -55], [7, -54], [7, -55], [7, -55], [-7, -50], [-8, -69], [-6, -53], [-21, -50], [-20, -49], [-7, -50], [-8, -69], [-6, -53], [-21, -50], [-20, -49], [12, -64], [5, -83], [11, -71], [-1, -77], [-1, -76], [12, -64], [5, -83], [11, -71], [-1, -77], [-1, -76], [-11, -64], [-4, -83], [-10, -71], [2, -77], [2, -76], [-11, -64], [-4, -83], [-10, -71], [2, -77], [2, -76], [8, -50], [9, -69], [7, -53], [22, -50], [21, -49], [8, -50], [9, -69], [7, -53], [22, -50], [21, -49], [15, -61], [18, -59], [15, -61], [15, -61], [18, -59], [15, -61], [15, -66], [20, -64], [15, -66], [15, -66], [20, -64], [15, -66], [-14, -66], [-19, -64], [-14, -66], [-14, -66], [-19, -64], [-14, -66], [-14, -61], [-17, -59], [-14, -61], [-14, -61], [-17, -59], [-14, -61], [19, -58], [19, -58], [24, -62], [24, -62], [-23, -62], [-23, -62], [-18, -58], [-18, -58], [37, -13], [37, -13], [38, 17], [38, 17], [-37, 17], [-37, 17], [-36, -13], [-36, -13], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-6, -59], [-5, -54], [-5, -54], [-8, -58], [-13, -61], [-17, -61], [-17, -62], [-17, -62], [-17, -62], [-19, -60], [-5, -54], [-5, -54], [-8, -58], [-13, -61], [-17, -61], [-17, -62], [-17, -62], [-17, -62], [-19, -60], [11, -71], [11, -71], [11, -72], [7, -79], [3, -86], [2, -87], [2, -87], [2, -87], [6, -79], [11, -71], [11, -71], [11, -72], [7, -79], [3, -86], [2, -87], [2, -87], [2, -87], [6, -79], [-10, -71], [-10, -71], [-10, -72], [-6, -79], [-2, -86], [-1, -87], [-1, -87], [-1, -87], [-5, -79], [-10, -71], [-10, -71], [-10, -72], [-6, -79], [-2, -86], [-1, -87], [-1, -87], [-1, -87], [-5, -79], [6, -54], [6, -54], [9, -58], [14, -61], [18, -61], [18, -62], [18, -62], [18, -62], [20, -60], [6, -54], [6, -54], [9, -58], [14, -61], [18, -61], [18, -62], [18, -62], [18, -62], [20, -60], [-4, -55], [-4, -55], [-4, -55], [-8, -56], [-1, -57], [-24, -69], [-12, -58], [-11, -59], [-4, -55], [-4, -55], [-4, -55], [-8, -56], [-1, -57], [-24, -69], [-12, -58], [-11, -59], [10, -72], [10, -72], [10, -72], [11, -70], [4, -57], [4, -58], [-5, -79], [11, -74], [10, -72], [10, -72], [10, -72], [11, -70], [4, -57], [4, -58], [-5, -79], [11, -74], [-9, -72], [-9, -72], [-9, -72], [-10, -70], [-3, -57], [-3, -58], [6, -79], [-10, -74], [-9, -72], [-9, -72], [-9, -72], [-10, -70], [-3, -57], [-3, -58], [6, -79], [-10, -74], [5, -55], [5, -55], [5, -55], [9, -56], [2, -57], [25, -69], [13, -58], [12, -59], [5, -55], [5, -55], [5, -55], [9, -56], [2, -57], [25, -69], [13, -58], [12, -59], [-5, -46], [15, -51], [-6, -57], [-4, -55], [-14, -59], [12, -51], [-5, -46], [15, -51], [-6, -57], [-4, -55], [-14, -59], [12, -51], [13, -60], [14, -53], [16, -73], [12, -70], [5, -74], [28, -75], [13, -60], [14, -53], [16, -73], [12, -70], [5, -74], [28, -75], [-12, -60], [10, -69], [-15, -73], [-11, -70], [-4, -74], [-27, -75], [-12, -60], [10, -69], [-15, -73], [-11, -70], [-4, -74], [-27, -75], [6, -46], [-1, -54], [7, -57], [5, -55], [15, -59], [-11, -51], [6, -46], [-1, -54], [7, -57], [5, -55], [15, -59], [-11, -51]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 3, 54, 55, 56, 57, 58, 58, 54, 55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 63, 59, 60, 61, 62, 63, 63, 59, 60, 61, 62, 63, 63, 59, 60, 61, 62, 63, 63, 54, 55, 56, 57, 58, 58, 54, 55, 56, 57, 58, 58, 64, 65, 66, 67, 68, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 69, 70, 71, 72, 73, 69, 70, 71, 72, 73, 69, 70, 71, 72, 73, 64, 65, 66, 67, 68, 64, 65, 66, 67, 68, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 76, 76, 77, 77, 77, 77, 76, 76, 78, 78, 79, 79, 79, 79, 78, 78, 1, 1, 1, 1, 1, 1, 1, 1, 80, 80, 81, 82, 83, 84, 84, 84, 85, 80, 80, 81, 82, 83, 84, 84, 84, 85, 86, 86, 87, 88, 89, 90, 90, 90, 91, 86, 86, 87, 88, 89, 90, 90, 90, 91, 86, 86, 87, 88, 89, 90, 90, 90, 91, 86, 86, 87, 88, 89, 90, 90, 90, 91, 80, 80, 81, 82, 83, 84, 84, 84, 85, 80, 80, 81, 82, 83, 84, 84, 84, 85, 92, 92, 92, 93, 94, 95, 96, 97, 92, 92, 92, 93, 94, 95, 96, 97, 98, 98, 98, 99, 100, 101, 102, 103, 98, 98, 98, 99, 100, 101, 102, 103, 98, 98, 98, 99, 100, 101, 102, 103, 98, 98, 98, 99, 100, 101, 102, 103, 92, 92, 92, 93, 94, 95, 96, 97, 92, 92, 92, 93, 94, 95, 96, 97, 104, 105, 106, 107, 108, 105, 104, 105, 106, 107, 108, 105, 109, 110, 111, 112, 113, 114, 109, 110, 111, 112, 113, 114, 109, 115, 111, 112, 113, 114, 109, 115, 111, 112, 113, 114, 104, 116, 106, 107, 108, 105, 104, 116, 106, 107, 108, 105]
};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 36, 68, 106, 147, 180, 214, 246, 276, 308, 342, 374, 404, 436, 466, 505, 549, 588, 616, 651, 689, 722, 746, 788, 836, 879, 904, 945, 994, 1036, 1063, 1093, 1127, 1158, 1184, 1221, 1265, 1305, 1339, 1373, 1405, 1439, 1473, 1507, 1539, 1572, 1612, 1665, 1721, 1778, 1822, 1853, 1883, 1926, 1971, 2020, 2069, 2120, 2172, 2224, 2273, 2316, 2359, 2402, 2445, 2488, 2531, 2578, 2619, 2671, 2722, 2763, 2801, 2853, 2905, 2947, 2988, 3029, 3072, 3118, 3169, 3226, 3273, 3320, 3367, 3416, 3476, 3537, 3579, 3620, 3668, 3724, 3781, 3828, 3862, 3892, 3919, 3960, 3999, 4040, 4074, 4111, 4145, 4190, 4236, 4285, 4334, 4383, 4432, 4486, 4536, 4579, 4622, 4665, 4708, 4751],
  widths: [36, 32, 38, 41, 33, 34, 32, 30, 32, 34, 32, 30, 32, 30, 39, 44, 39, 28, 35, 38, 33, 24, 42, 48, 43, 25, 41, 49, 42, 27, 30, 34, 31, 26, 37, 44, 40, 34, 34, 32, 34, 34, 34, 32, 33, 40, 53, 56, 57, 44, 31, 30, 43, 45, 49, 49, 51, 52, 52, 49, 43, 43, 43, 43, 43, 43, 47, 41, 52, 51, 41, 38, 52, 52, 42, 41, 41, 43, 46, 51, 57, 47, 47, 47, 49, 60, 61, 42, 41, 48, 56, 57, 47, 34, 30, 27, 41, 39, 41, 34, 37, 34, 45, 46, 49, 49, 49, 49, 54, 50, 43, 43, 43, 43, 43, 43],
  heights: [72, 70, 68, 65, 66, 69, 68, 69, 73, 68, 67, 69, 73, 72, 68, 65, 68, 68, 70, 70, 74, 69, 68, 66, 65, 66, 65, 65, 67, 69, 70, 69, 69, 65, 67, 66, 65, 64, 68, 65, 63, 64, 68, 65, 64, 62, 55, 42, 41, 38, 63, 59, 60, 54, 68, 69, 70, 70, 69, 68, 68, 69, 70, 70, 69, 68, 67, 64, 58, 56, 76, 77, 62, 60, 62, 62, 61, 61, 60, 60, 38, 45, 68, 68, 68, 61, 61, 68, 67, 69, 68, 67, 67, 62, 66, 73, 70, 69, 69, 69, 70, 76, 72, 69, 68, 69, 69, 70, 67, 68, 68, 69, 69, 70, 67, 68],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [-1, -27], [-1, -27], [-1, -27], [-3, -27], [-3, -27], [-3, -27], [-2, -28], [-2, -28], [-2, -28], [1, -26], [1, -26], [1, -26], [3, -28], [3, -28], [3, -28], [3, -27], [3, -27], [3, -27], [1, -27], [1, -27], [1, -27], [1, -27], [1, -27], [1, -24], [1, -23], [1, -28], [1, -27], [1, -24], [1, -23], [-1, -26], [-2, -27], [-3, -26], [-1, -26], [0, -28], [-1, -26], [-1, -24], [0, -23], [-2, -26], [-1, -26], [-3, -25], [-2, -26], [-1, -28], [-1, -27], [-2, -25], [-3, -25], [-1, -26], [-1, -25], [0, -23], [0, -24], [-1, -28], [-2, -26], [-3, -25], [-2, -26], [1, -27], [1, -24], [1, -23], [1, -25], [1, -27], [1, -24], [1, -23], [2, -25], [2, -26], [1, -25], [0, -23], [1, -24], [1, -28], [3, -26], [3, -25], [2, -26], [2, -26], [1, -26], [3, -25], [3, -26], [2, -28], [2, -27], [3, -25], [3, -25], [1, -26], [3, -27], [3, -26], [2, -26], [0, -28], [2, -26], [1, -24], [1, -23], [1, -12], [1, -12], [1, -12], [-4, -16], [-4, -16], [-4, -16], [-10, -20], [-10, -20], [-10, -20], [-6, -20], [-6, -20], [-6, -20], [2, -21], [2, -21], [2, -21], [7, -20], [7, -20], [7, -20], [10, -20], [10, -20], [10, -20], [5, -16], [5, -16], [5, -16], [-1, -23], [-3, -21], [-1, -23], [-1, -23], [-3, -21], [-1, -23], [-3, -26], [-5, -23], [-3, -26], [-3, -26], [-5, -23], [-3, -26], [4, -26], [6, -23], [4, -26], [4, -26], [6, -23], [4, -26], [2, -23], [3, -21], [2, -23], [2, -23], [3, -21], [2, -23], [0, -28], [0, -28], [-1, -29], [-2, -29], [-2, -28], [0, -28], [0, -28], [0, -28], [-1, -29], [-2, -29], [-2, -28], [0, -28], [-1, -26], [-1, -26], [-1, -27], [-1, -27], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -27], [-1, -27], [-1, -26], [-1, -26], [2, -26], [2, -26], [2, -27], [2, -27], [2, -26], [2, -26], [2, -26], [2, -26], [2, -27], [2, -27], [2, -26], [2, -26], [1, -28], [1, -28], [2, -29], [2, -29], [2, -28], [1, -28], [1, -28], [1, -28], [2, -29], [2, -29], [2, -28], [1, -28], [1, -28], [4, -32], [4, -32], [-2, -18], [-1, -17], [1, -28], [4, -32], [4, -32], [-2, -18], [-1, -17], [0, -30], [3, -30], [3, -30], [-5, -23], [-5, -22], [0, -30], [3, -30], [3, -30], [-5, -23], [-5, -22], [1, -30], [-3, -30], [-3, -30], [5, -23], [5, -22], [1, -30], [-3, -30], [-3, -30], [5, -23], [5, -22], [0, -28], [-3, -32], [-3, -32], [2, -18], [2, -17], [0, -28], [-3, -32], [-3, -32], [2, -18], [2, -17], [-1, -30], [3, -31], [-1, -30], [-1, -30], [3, -31], [-1, -30], [2, -22], [4, -20], [2, -22], [2, -22], [4, -20], [2, -22], [-1, -22], [-3, -20], [-1, -22], [-1, -22], [-3, -20], [-1, -22], [1, -30], [-2, -31], [1, -30], [1, -30], [-2, -31], [1, -30], [4, -30], [4, -30], [6, -19], [6, -19], [-5, -19], [-5, -19], [-4, -30], [-4, -30], [6, -10], [6, -10], [5, -10], [5, -10], [-4, -10], [-4, -10], [-5, -10], [-5, -10], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [1, -30], [0, -26], [-6, -22], [-6, -22], [-6, -22], [-6, -22], [-6, -22], [1, -30], [1, -30], [1, -30], [0, -26], [-6, -22], [-6, -22], [-6, -22], [-6, -22], [-6, -22], [-1, -26], [1, -25], [1, -25], [-4, -25], [-8, -25], [-8, -24], [-8, -24], [-8, -24], [-8, -24], [-1, -26], [1, -25], [1, -25], [-4, -25], [-8, -25], [-8, -24], [-8, -24], [-8, -24], [-8, -24], [1, -26], [0, -25], [0, -25], [4, -25], [8, -25], [9, -24], [9, -24], [9, -24], [9, -24], [1, -26], [0, -25], [0, -25], [4, -25], [8, -25], [9, -24], [9, -24], [9, -24], [9, -24], [0, -30], [0, -30], [0, -30], [1, -26], [6, -22], [7, -22], [7, -22], [7, -22], [7, -22], [0, -30], [0, -30], [0, -30], [1, -26], [6, -22], [7, -22], [7, -22], [7, -22], [7, -22], [1, -29], [4, -32], [0, -33], [1, -34], [2, -31], [2, -31], [2, -31], [5, -32], [1, -29], [4, -32], [0, -33], [1, -34], [2, -31], [2, -31], [2, -31], [5, -32], [0, -26], [0, -27], [3, -30], [3, -33], [4, -29], [4, -29], [4, -29], [4, -27], [0, -26], [0, -27], [3, -30], [3, -33], [4, -29], [4, -29], [4, -29], [4, -27], [1, -26], [0, -27], [-2, -30], [-3, -33], [-3, -29], [-3, -29], [-3, -29], [-4, -27], [1, -26], [0, -27], [-2, -30], [-3, -33], [-3, -29], [-3, -29], [-3, -29], [-4, -27], [0, -29], [-4, -32], [0, -33], [0, -34], [-1, -31], [-1, -31], [-1, -31], [-4, -32], [0, -29], [-4, -32], [0, -33], [0, -34], [-1, -31], [-1, -31], [-1, -31], [-4, -32], [0, -28], [0, -28], [0, -28], [0, -29], [-3, -27], [-1, -28], [0, -28], [0, -28], [0, -28], [0, -29], [-3, -27], [-1, -28], [-1, -26], [-1, -26], [-1, -26], [-1, -27], [-1, -25], [-1, -26], [-1, -26], [-1, -26], [-1, -26], [-1, -27], [-1, -25], [-1, -26], [2, -26], [2, -26], [2, -26], [2, -27], [2, -25], [2, -26], [2, -26], [2, -26], [2, -26], [2, -27], [2, -25], [2, -26], [1, -28], [1, -28], [1, -28], [1, -29], [3, -27], [1, -28], [1, -28], [1, -28], [1, -28], [1, -29], [3, -27], [1, -28]],
  anchorHead: [[1, -56], [-3, -56], [5, -56], [-4, -57], [-5, -57], [0, -56], [-4, -57], [12, -72], [-4, -56], [12, -73], [13, -72], [-4, -59], [12, -71], [-11, -72], [12, -72], [-11, -73], [5, -59], [10, -72], [5, -57], [5, -56], [-11, -72], [5, -57], [1, -56], [6, -57], [1, -56], [1, -55], [1, -53], [1, -54], [1, -56], [1, -55], [1, -53], [1, -54], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [12, -72], [12, -71], [12, -69], [12, -70], [12, -72], [12, -71], [12, -69], [12, -70], [12, -71], [12, -70], [12, -68], [12, -69], [12, -71], [12, -70], [12, -68], [12, -69], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [-11, -72], [-11, -71], [-11, -69], [-11, -70], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [1, -36], [-3, -36], [5, -36], [-4, -39], [-5, -39], [1, -38], [-3, -37], [14, -52], [-2, -36], [13, -53], [13, -52], [-3, -38], [14, -52], [-8, -53], [14, -53], [-12, -53], [4, -38], [10, -52], [4, -37], [3, -37], [-12, -53], [5, -39], [0, -38], [6, -39], [-12, -69], [-14, -47], [-12, -69], [-12, -69], [-14, -47], [-12, -69], [-17, -68], [-16, -48], [-17, -67], [-17, -68], [-16, -48], [-17, -67], [18, -68], [17, -48], [18, -67], [18, -68], [17, -48], [18, -67], [13, -69], [15, -47], [13, -69], [13, -69], [15, -47], [13, -69], [-2, -56], [-2, -57], [-2, -58], [-2, -58], [-2, -57], [-2, -56], [-2, -56], [-2, -57], [-2, -58], [-2, -58], [-2, -57], [-2, -56], [13, -70], [13, -71], [13, -72], [13, -72], [13, -71], [13, -70], [13, -70], [13, -71], [13, -72], [13, -72], [13, -71], [13, -70], [-12, -70], [-12, -71], [-12, -72], [-12, -72], [-12, -71], [-12, -70], [-12, -70], [-12, -71], [-12, -72], [-12, -72], [-12, -71], [-12, -70], [3, -56], [3, -57], [3, -58], [3, -58], [3, -57], [3, -56], [3, -56], [3, -57], [3, -58], [3, -58], [3, -57], [3, -56], [-1, -56], [3, -58], [4, -58], [-18, -43], [-20, -39], [-1, -56], [3, -58], [4, -58], [-18, -43], [-20, -39], [14, -69], [21, -70], [22, -70], [-1, -61], [-2, -58], [14, -69], [21, -70], [22, -70], [-1, -61], [-2, -58], [-13, -69], [-20, -70], [-21, -70], [2, -61], [3, -58], [-13, -69], [-20, -70], [-21, -70], [2, -61], [3, -58], [2, -56], [-2, -58], [-3, -58], [19, -43], [21, -39], [2, -56], [-2, -58], [-3, -58], [19, -43], [21, -39], [13, -68], [17, -69], [13, -68], [13, -68], [17, -69], [13, -68], [9, -69], [14, -67], [9, -69], [9, -69], [14, -67], [9, -69], [-8, -69], [-13, -67], [-8, -69], [-8, -69], [-13, -67], [-8, -69], [-12, -68], [-16, -69], [-12, -68], [-12, -68], [-16, -69], [-12, -68], [29, -67], [29, -67], [22, -65], [22, -65], [-21, -65], [-21, -65], [-28, -67], [-28, -67], [41, -22], [41, -22], [40, 9], [40, 9], [-39, 9], [-39, 9], [-40, -22], [-40, -22], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-3, -55], [-2, -55], [-1, -55], [-10, -52], [-17, -47], [-18, -45], [-18, -44], [-18, -44], [-18, -44], [-3, -55], [-2, -55], [-1, -55], [-10, -52], [-17, -47], [-18, -45], [-18, -44], [-18, -44], [-18, -44], [13, -68], [14, -68], [15, -68], [7, -69], [0, -70], [-1, -69], [-1, -68], [-1, -68], [-1, -68], [13, -68], [14, -68], [15, -68], [7, -69], [0, -70], [-1, -69], [-1, -68], [-1, -68], [-1, -68], [-12, -68], [-13, -68], [-14, -68], [-6, -69], [1, -70], [2, -69], [2, -68], [2, -68], [2, -68], [-12, -68], [-13, -68], [-14, -68], [-6, -69], [1, -70], [2, -69], [2, -68], [2, -68], [2, -68], [4, -55], [3, -55], [2, -55], [11, -52], [18, -47], [19, -45], [19, -44], [19, -44], [19, -44], [4, -55], [3, -55], [2, -55], [11, -52], [18, -47], [19, -45], [19, -44], [19, -44], [19, -44], [-1, -57], [2, -59], [2, -60], [3, -61], [3, -60], [4, -60], [4, -60], [5, -61], [-1, -57], [2, -59], [2, -60], [3, -61], [3, -60], [4, -60], [4, -60], [5, -61], [16, -72], [17, -73], [20, -73], [21, -72], [21, -68], [22, -68], [22, -68], [22, -67], [16, -72], [17, -73], [20, -73], [21, -72], [21, -68], [22, -68], [22, -68], [22, -67], [-15, -72], [-16, -73], [-19, -73], [-20, -72], [-20, -68], [-21, -68], [-21, -68], [-21, -67], [-15, -72], [-16, -73], [-19, -73], [-20, -72], [-20, -68], [-21, -68], [-21, -68], [-21, -67], [2, -57], [-1, -59], [-1, -60], [-2, -61], [-2, -60], [-3, -60], [-3, -60], [-4, -61], [2, -57], [-1, -59], [-1, -60], [-2, -61], [-2, -60], [-3, -60], [-3, -60], [-4, -61], [-2, -56], [-2, -57], [-2, -57], [-2, -58], [-2, -54], [-2, -56], [-2, -56], [-2, -57], [-2, -57], [-2, -58], [-2, -54], [-2, -56], [13, -70], [13, -71], [13, -71], [13, -72], [12, -68], [13, -70], [13, -70], [13, -71], [13, -71], [13, -72], [12, -68], [13, -70], [-12, -70], [-12, -71], [-12, -71], [-12, -72], [-11, -68], [-12, -70], [-12, -70], [-12, -71], [-12, -71], [-12, -72], [-11, -68], [-12, -70], [3, -56], [3, -57], [3, -57], [3, -58], [3, -54], [3, -56], [3, -56], [3, -57], [3, -57], [3, -58], [3, -54], [3, -56]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 70, 71, 71, 72, 73, 66, 67, 67, 68, 69, 66, 67, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 84, 85, 86, 86, 86, 86, 82, 83, 83, 84, 85, 86, 86, 86, 86, 87, 88, 88, 89, 90, 91, 91, 91, 91, 87, 88, 88, 89, 90, 91, 91, 91, 91, 87, 88, 88, 89, 90, 91, 91, 91, 91, 87, 88, 88, 89, 90, 91, 91, 91, 91, 82, 83, 83, 84, 85, 86, 86, 86, 86, 82, 83, 83, 84, 85, 86, 86, 86, 86, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 98, 99, 100, 101, 102, 102, 102, 103, 92, 93, 94, 95, 96, 96, 96, 97, 92, 93, 94, 95, 96, 96, 96, 97, 104, 105, 106, 107, 108, 109, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 104, 105, 106, 107, 108, 109, 104, 105, 106, 107, 108, 109]
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 42, 84, 133, 171, 211, 252, 294, 335, 377, 418, 460, 501, 543, 588, 637, 684, 725, 765, 806, 849, 899, 949, 999, 1049, 1103, 1144, 1186, 1238, 1295, 1331, 1367, 1408, 1457, 1511, 1561, 1599, 1634, 1674, 1721, 1767, 1809, 1850, 1898, 1944, 1985, 2033, 2083, 2132, 2184, 2238, 2279, 2330, 2375, 2419, 2459, 2498, 2538, 2577, 2615, 2652, 2694, 2736, 2778, 2820, 2862, 2907, 2967, 3020, 3079, 3129, 3167, 3206, 3269, 3323, 3363, 3403, 3438, 3474, 3521, 3562, 3632, 3697, 3740, 3790, 3839, 3885, 3937, 3986, 4035, 4081, 4129, 4173, 4229, 4287, 4342, 4395, 4441, 4490, 4541, 4596, 4649, 4702, 4757, 4800, 4843, 4884, 4927, 4970, 5013, 5055, 5110, 5159, 5204, 5246, 5292, 5339, 5386, 5427, 5470, 5511, 5546],
  widths: [42, 42, 49, 38, 40, 41, 42, 41, 42, 41, 42, 41, 42, 45, 49, 47, 41, 40, 41, 43, 50, 50, 50, 50, 54, 41, 42, 52, 57, 36, 36, 41, 49, 54, 50, 38, 35, 40, 47, 46, 42, 41, 48, 46, 41, 48, 50, 49, 52, 54, 41, 51, 45, 44, 40, 39, 40, 39, 38, 37, 42, 42, 42, 42, 42, 45, 60, 53, 59, 50, 38, 39, 63, 54, 40, 40, 35, 36, 47, 41, 70, 65, 43, 50, 49, 46, 52, 49, 49, 46, 48, 44, 56, 58, 55, 53, 46, 49, 51, 55, 53, 53, 55, 43, 43, 41, 43, 43, 43, 42, 55, 49, 45, 42, 46, 47, 47, 41, 43, 41, 35, 37],
  heights: [74, 74, 70, 73, 72, 70, 72, 78, 72, 69, 70, 79, 71, 76, 76, 73, 71, 78, 77, 70, 69, 68, 68, 67, 65, 69, 70, 67, 65, 76, 72, 72, 72, 75, 75, 76, 77, 74, 68, 72, 76, 73, 70, 73, 76, 44, 47, 48, 54, 50, 67, 62, 73, 62, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 72, 69, 75, 73, 72, 72, 72, 69, 74, 71, 71, 70, 66, 66, 54, 44, 74, 76, 76, 72, 83, 86, 87, 74, 75, 76, 70, 82, 82, 80, 76, 76, 77, 76, 76, 76, 76, 74, 75, 81, 79, 77, 77, 77, 71, 76, 74, 75, 74, 73, 72, 76, 72, 72, 74, 74],
  bodyOffsets: [[0, -24], [0, -24], [0, -24], [0, -25], [0, -25], [0, -25], [-1, -25], [-1, -25], [-1, -25], [0, -23], [0, -23], [0, -23], [-1, -24], [-1, -24], [-1, -24], [-3, -23], [-3, -23], [-3, -23], [0, -25], [0, -25], [0, -25], [-3, -25], [-3, -25], [-3, -25], [-1, -26], [1, -24], [2, -20], [1, -22], [1, -25], [-2, -25], [-2, -20], [-2, -22], [-2, -27], [2, -26], [2, -24], [-1, -23], [0, -25], [0, -25], [-2, -26], [-4, -24], [-2, -25], [6, -24], [2, -22], [-1, -24], [2, -24], [7, -23], [-1, -22], [-4, -24], [2, -23], [2, -24], [3, -22], [4, -23], [6, -23], [8, -22], [3, -20], [2, -20], [1, -23], [-4, -23], [-4, -19], [-2, -18], [-2, -22], [2, -24], [3, -20], [2, -20], [-2, -23], [-2, -24], [-2, -22], [-3, -23], [-6, -23], [-8, -22], [-3, -20], [-1, -20], [2, -25], [-6, -24], [-2, -22], [1, -24], [-1, -24], [-7, -23], [1, -22], [5, -24], [3, -27], [-1, -26], [-1, -24], [2, -23], [0, -25], [1, -25], [3, -26], [4, -24], [4, -8], [4, -8], [4, -8], [4, -8], [4, -8], [4, -8], [2, -8], [2, -8], [2, -8], [0, -2], [0, -2], [0, -2], [-4, -3], [-4, -3], [-4, -3], [-1, -2], [-1, -2], [-1, -2], [-2, -8], [-2, -8], [-2, -8], [-3, -8], [-3, -8], [-3, -8], [4, -17], [-3, -15], [4, -17], [4, -17], [-3, -15], [4, -17], [0, -18], [-2, -13], [0, -18], [0, -18], [-2, -13], [0, -18], [1, -18], [2, -13], [1, -18], [1, -18], [2, -13], [1, -18], [-3, -17], [4, -15], [-3, -17], [-3, -17], [4, -15], [-3, -17], [-8, -27], [-9, -27], [-10, -27], [-9, -27], [-9, -27], [-8, -27], [-8, -27], [-9, -27], [-10, -27], [-9, -27], [-9, -27], [-8, -27], [1, -26], [0, -26], [-1, -26], [-3, -26], [-3, -26], [-1, -26], [1, -26], [0, -26], [-1, -26], [-3, -26], [-3, -26], [-1, -26], [-1, -26], [0, -26], [1, -26], [3, -26], [3, -26], [2, -26], [-1, -26], [0, -26], [1, -26], [3, -26], [3, -26], [2, -26], [8, -27], [10, -27], [10, -27], [10, -27], [9, -27], [9, -27], [8, -27], [10, -27], [10, -27], [10, -27], [9, -27], [9, -27], [0, -25], [1, -25], [0, -28], [-5, -20], [-8, -19], [0, -25], [1, -25], [0, -28], [-5, -20], [-8, -19], [0, -23], [0, -23], [1, -23], [-10, -24], [-10, -22], [0, -23], [0, -23], [1, -23], [-10, -24], [-10, -22], [0, -23], [0, -23], [0, -23], [11, -24], [10, -22], [0, -23], [0, -23], [0, -23], [11, -24], [10, -22], [0, -25], [-1, -25], [1, -28], [6, -20], [8, -19], [0, -25], [-1, -25], [1, -28], [6, -20], [8, -19], [-1, -26], [2, -24], [-1, -26], [-1, -26], [2, -24], [-1, -26], [5, -21], [6, -21], [5, -21], [5, -21], [6, -21], [5, -21], [-4, -21], [-6, -21], [-4, -21], [-4, -21], [-6, -21], [-4, -21], [1, -26], [-2, -24], [1, -26], [1, -26], [-2, -24], [1, -26], [2, -22], [2, -22], [7, -19], [7, -19], [-6, -19], [-6, -19], [-1, -22], [-1, -22], [0, -16], [0, -16], [-8, -13], [-8, -13], [9, -13], [9, -13], [0, -16], [0, -16], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [0, -25], [-9, -27], [-1, -28], [0, -28], [0, -28], [-9, -26], [-11, -31], [-12, -33], [-12, -33], [-12, -33], [-9, -27], [-1, -28], [0, -28], [0, -28], [-9, -26], [-11, -31], [-12, -33], [-12, -33], [-12, -33], [-4, -26], [-5, -26], [-4, -27], [-4, -27], [-7, -24], [-6, -32], [-7, -33], [-8, -33], [-8, -33], [-4, -26], [-5, -26], [-4, -27], [-4, -27], [-7, -24], [-6, -32], [-7, -33], [-8, -33], [-8, -33], [4, -26], [5, -26], [4, -27], [4, -27], [7, -24], [6, -32], [8, -33], [9, -33], [9, -33], [4, -26], [5, -26], [4, -27], [4, -27], [7, -24], [6, -32], [8, -33], [9, -33], [9, -33], [10, -27], [1, -28], [1, -28], [1, -28], [9, -26], [11, -31], [13, -33], [13, -33], [13, -33], [10, -27], [1, -28], [1, -28], [1, -28], [9, -26], [11, -31], [13, -33], [13, -33], [13, -33], [-4, -26], [-3, -26], [1, -26], [7, -26], [8, -26], [8, -26], [8, -26], [7, -26], [-4, -26], [-3, -26], [1, -26], [7, -26], [8, -26], [8, -26], [8, -26], [7, -26], [-4, -26], [-4, -25], [0, -29], [1, -23], [0, -22], [0, -22], [0, -22], [0, -22], [-4, -26], [-4, -25], [0, -29], [1, -23], [0, -22], [0, -22], [0, -22], [0, -22], [5, -26], [5, -25], [1, -29], [0, -23], [1, -22], [1, -22], [1, -22], [0, -22], [5, -26], [5, -25], [1, -29], [0, -23], [1, -22], [1, -22], [1, -22], [0, -22], [4, -26], [4, -26], [0, -26], [-6, -26], [-7, -26], [-7, -26], [-7, -26], [-6, -26], [4, -26], [4, -26], [0, -26], [-6, -26], [-7, -26], [-7, -26], [-7, -26], [-6, -26], [5, -31], [-2, -27], [-3, -26], [-5, -26], [-2, -25], [-1, -24], [5, -31], [-2, -27], [-3, -26], [-5, -26], [-2, -25], [-1, -24], [5, -29], [4, -26], [1, -24], [4, -24], [0, -25], [1, -24], [5, -29], [4, -26], [1, -24], [4, -24], [0, -25], [1, -24], [-4, -29], [-3, -26], [0, -24], [-3, -24], [1, -25], [0, -24], [-4, -29], [-3, -26], [0, -24], [-3, -24], [1, -25], [0, -24], [-4, -31], [3, -27], [4, -26], [5, -26], [2, -25], [2, -24], [-4, -31], [3, -27], [4, -26], [5, -26], [2, -25], [2, -24]],
  anchorHead: [[0, -56], [-5, -57], [5, -57], [-6, -57], [-5, -57], [-1, -56], [-5, -57], [11, -73], [-6, -57], [10, -73], [10, -72], [-6, -57], [10, -72], [-12, -73], [10, -73], [-12, -73], [4, -57], [10, -72], [4, -57], [5, -57], [-12, -73], [4, -57], [0, -56], [4, -57], [0, -56], [0, -55], [0, -53], [0, -54], [0, -56], [0, -55], [0, -53], [0, -54], [-6, -57], [-6, -56], [-6, -54], [-6, -55], [-6, -57], [-6, -56], [-6, -54], [-6, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [12, -73], [12, -72], [12, -70], [12, -71], [12, -73], [12, -72], [12, -70], [12, -71], [11, -72], [11, -71], [11, -69], [11, -70], [11, -72], [11, -71], [11, -69], [11, -70], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [-11, -73], [-11, -72], [-11, -70], [-11, -71], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [7, -57], [7, -56], [7, -54], [7, -55], [7, -57], [7, -56], [7, -54], [7, -55], [0, -25], [-5, -26], [5, -26], [-5, -26], [-4, -26], [0, -25], [-6, -26], [10, -42], [-7, -26], [11, -42], [11, -41], [-4, -26], [11, -41], [-11, -42], [11, -42], [-11, -42], [5, -26], [10, -41], [6, -26], [7, -26], [-10, -42], [7, -26], [3, -25], [6, -26], [-9, -59], [-18, -38], [-9, -59], [-9, -59], [-18, -38], [-9, -59], [-11, -62], [-11, -40], [-11, -62], [-11, -62], [-11, -40], [-11, -62], [12, -62], [12, -40], [12, -62], [12, -62], [12, -40], [12, -62], [10, -59], [19, -38], [10, -59], [10, -59], [19, -38], [10, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [-12, -59], [-11, -59], [-10, -59], [-11, -59], [-12, -59], [-13, -59], [5, -76], [6, -76], [7, -76], [6, -76], [5, -76], [4, -76], [5, -76], [6, -76], [7, -76], [6, -76], [5, -76], [4, -76], [-4, -76], [-5, -76], [-6, -76], [-5, -76], [-4, -76], [-3, -76], [-4, -76], [-5, -76], [-6, -76], [-5, -76], [-4, -76], [-3, -76], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [13, -59], [12, -59], [11, -59], [12, -59], [13, -59], [14, -59], [-6, -57], [-4, -55], [-5, -55], [-17, -45], [-17, -44], [-6, -57], [-4, -55], [-5, -55], [-17, -45], [-17, -44], [10, -73], [13, -72], [16, -72], [-5, -69], [-6, -68], [10, -73], [13, -72], [16, -72], [-5, -69], [-6, -68], [-9, -73], [-12, -72], [-15, -72], [6, -69], [7, -68], [-9, -73], [-12, -72], [-15, -72], [6, -69], [7, -68], [7, -57], [5, -55], [6, -55], [18, -45], [18, -44], [7, -57], [5, -55], [6, -55], [18, -45], [18, -44], [10, -68], [13, -66], [10, -68], [10, -68], [13, -66], [10, -68], [8, -76], [10, -76], [8, -76], [8, -76], [10, -76], [8, -76], [-7, -76], [-9, -76], [-7, -76], [-7, -76], [-9, -76], [-7, -76], [-9, -68], [-12, -66], [-9, -68], [-9, -68], [-12, -66], [-9, -68], [16, -61], [16, -61], [15, -71], [15, -71], [-14, -71], [-14, -71], [-15, -61], [-15, -61], [35, -33], [35, -33], [34, 8], [34, 8], [-33, 8], [-33, 8], [-34, -33], [-34, -33], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-6, -57], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-23, -58], [-23, -60], [-24, -60], [-24, -60], [-10, -58], [-10, -59], [-11, -59], [-11, -59], [-16, -55], [-23, -58], [-23, -60], [-24, -60], [-24, -60], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -74], [-8, -76], [-9, -76], [-9, -76], [2, -76], [4, -77], [5, -77], [5, -77], [1, -72], [-6, -74], [-8, -76], [-9, -76], [-9, -76], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -74], [9, -76], [10, -76], [10, -76], [-1, -76], [-3, -77], [-4, -77], [-4, -77], [0, -72], [7, -74], [9, -76], [10, -76], [10, -76], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [24, -58], [24, -60], [25, -60], [25, -60], [11, -58], [11, -59], [12, -59], [12, -59], [17, -55], [24, -58], [24, -60], [25, -60], [25, -60], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [-7, -55], [-3, -55], [1, -56], [4, -53], [6, -53], [6, -53], [6, -53], [7, -53], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [3, -73], [6, -72], [11, -71], [13, -69], [14, -68], [14, -68], [14, -68], [15, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [-2, -73], [-5, -72], [-10, -71], [-12, -69], [-13, -68], [-13, -68], [-13, -68], [-14, -67], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [8, -55], [4, -55], [0, -56], [-3, -53], [-5, -53], [-5, -53], [-5, -53], [-6, -53], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [2, -56], [-7, -58], [-6, -56], [-12, -57], [-6, -57], [-6, -55], [18, -70], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [18, -70], [11, -76], [12, -73], [13, -72], [10, -74], [10, -73], [-17, -70], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-17, -70], [-10, -76], [-11, -73], [-12, -72], [-9, -74], [-9, -73], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55], [-1, -56], [8, -58], [7, -56], [13, -57], [7, -57], [7, -55]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 3, 70, 71, 72, 73, 1, 66, 67, 68, 69, 1, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 78, 78, 79, 79, 79, 79, 78, 78, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 84, 84, 85, 86, 87, 88, 88, 82, 83, 84, 84, 85, 86, 87, 88, 88, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 89, 90, 91, 91, 92, 93, 94, 95, 95, 82, 83, 84, 84, 85, 86, 87, 88, 88, 82, 83, 84, 84, 85, 86, 87, 88, 88, 96, 97, 98, 99, 100, 101, 101, 102, 96, 97, 98, 99, 100, 101, 101, 102, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 103, 104, 105, 106, 107, 108, 108, 109, 96, 97, 98, 99, 100, 101, 101, 102, 96, 97, 98, 99, 100, 101, 101, 102, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 116, 117, 118, 119, 120, 121, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115]
};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 40, 82, 126, 169, 212, 252, 294, 339, 382, 422, 465, 510, 552, 590, 630, 671, 711, 749, 788, 829, 869, 898, 938, 985, 1030, 1059, 1098, 1144, 1185, 1226, 1269, 1313, 1356, 1396, 1437, 1482, 1526, 1568, 1612, 1658, 1702, 1745, 1790, 1836, 1880, 1944, 2014, 2081, 2146, 2204, 2245, 2292, 2340, 2395, 2437, 2478, 2521, 2568, 2617, 2665, 2708, 2749, 2794, 2842, 2889, 2934, 2976, 3022, 3071, 3117, 3164, 3206, 3252, 3302, 3351, 3401, 3451, 3500, 3538, 3578, 3646, 3713, 3758, 3800, 3839, 3881, 3941, 3999, 4040, 4087, 4126, 4166, 4221, 4279, 4314, 4349, 4383, 4418, 4471, 4523, 4568, 4613, 4658, 4703, 4758, 4813, 4855, 4897, 4945, 4991, 5044, 5094, 5137, 5180, 5222, 5264, 5309],
  widths: [40, 42, 44, 43, 43, 40, 42, 45, 43, 40, 43, 45, 42, 38, 40, 41, 40, 38, 39, 41, 40, 29, 40, 47, 45, 29, 39, 46, 41, 41, 43, 44, 43, 40, 41, 45, 44, 42, 44, 46, 44, 43, 45, 46, 44, 64, 70, 67, 65, 58, 41, 47, 48, 55, 42, 41, 43, 47, 49, 48, 43, 41, 45, 48, 47, 45, 42, 46, 49, 46, 47, 42, 46, 50, 49, 50, 50, 49, 38, 40, 68, 67, 45, 42, 39, 42, 60, 58, 41, 47, 39, 40, 55, 58, 35, 35, 34, 35, 53, 52, 45, 45, 45, 45, 55, 55, 42, 42, 48, 46, 53, 50, 43, 43, 42, 42, 45, 41],
  heights: [74, 72, 72, 73, 74, 74, 72, 75, 76, 75, 73, 76, 77, 69, 70, 72, 76, 72, 69, 69, 72, 73, 72, 70, 69, 70, 69, 70, 72, 74, 74, 73, 72, 70, 72, 71, 70, 72, 74, 74, 71, 72, 73, 72, 71, 59, 52, 43, 51, 44, 60, 58, 63, 62, 72, 73, 73, 71, 70, 71, 73, 74, 74, 72, 71, 72, 72, 73, 74, 69, 67, 73, 79, 77, 67, 67, 72, 69, 70, 70, 57, 56, 67, 67, 67, 68, 71, 70, 73, 71, 72, 73, 74, 75, 77, 77, 77, 77, 67, 66, 75, 74, 75, 76, 68, 67, 72, 73, 74, 74, 90, 92, 73, 74, 74, 74, 92, 93],
  bodyOffsets: [[1, -26], [1, -26], [1, -26], [1, -27], [1, -27], [1, -27], [0, -28], [0, -28], [0, -28], [2, -27], [2, -27], [2, -27], [1, -27], [1, -27], [1, -27], [-1, -27], [-1, -27], [-1, -27], [0, -28], [0, -28], [0, -28], [-1, -27], [-1, -27], [-1, -27], [0, -26], [1, -26], [2, -23], [1, -23], [0, -25], [1, -26], [1, -24], [0, -23], [1, -28], [2, -27], [3, -24], [2, -23], [1, -27], [2, -28], [2, -27], [2, -26], [2, -27], [0, -27], [0, -26], [3, -27], [2, -29], [1, -28], [1, -26], [1, -26], [1, -28], [0, -26], [0, -24], [0, -26], [0, -30], [1, -28], [0, -26], [0, -28], [0, -28], [2, -26], [2, -25], [2, -26], [1, -28], [0, -26], [0, -25], [0, -26], [0, -28], [1, -26], [0, -24], [1, -26], [0, -30], [0, -28], [1, -26], [0, -28], [-1, -27], [0, -27], [1, -26], [-2, -27], [-1, -29], [0, -28], [-1, -26], [0, -26], [-1, -28], [-2, -27], [-2, -24], [-2, -23], [-1, -27], [-1, -28], [-1, -27], [-2, -26], [1, -12], [1, -12], [1, -12], [-3, -18], [-3, -18], [-3, -18], [-5, -21], [-5, -21], [-5, -21], [-1, -18], [-1, -18], [-1, -18], [2, -22], [2, -22], [2, -22], [2, -18], [2, -18], [2, -18], [6, -21], [6, -21], [6, -21], [3, -18], [3, -18], [3, -18], [0, -21], [4, -20], [0, -21], [0, -21], [4, -20], [0, -21], [0, -20], [-2, -19], [0, -20], [0, -20], [-2, -19], [0, -20], [0, -20], [3, -19], [0, -20], [0, -20], [3, -19], [0, -20], [1, -21], [-3, -20], [1, -21], [1, -21], [-3, -20], [1, -21], [1, -27], [1, -27], [2, -27], [2, -26], [1, -26], [1, -26], [1, -27], [1, -27], [2, -27], [2, -26], [1, -26], [1, -26], [2, -27], [1, -28], [2, -28], [2, -27], [3, -26], [3, -27], [2, -27], [1, -28], [2, -28], [2, -27], [3, -26], [3, -27], [-1, -27], [0, -28], [-1, -28], [-2, -27], [-2, -26], [-2, -27], [-1, -27], [0, -28], [-1, -28], [-2, -27], [-2, -26], [-2, -27], [-1, -27], [0, -27], [-1, -27], [-1, -26], [0, -26], [-1, -26], [-1, -27], [0, -27], [-1, -27], [-1, -26], [0, -26], [-1, -26], [1, -27], [6, -31], [6, -32], [-3, -13], [-3, -12], [1, -27], [6, -31], [6, -32], [-3, -13], [-3, -12], [2, -27], [1, -30], [0, -29], [-3, -27], [-2, -27], [2, -27], [1, -30], [0, -29], [-3, -27], [-2, -27], [-2, -27], [-1, -30], [0, -29], [4, -27], [2, -27], [-2, -27], [-1, -30], [0, -29], [4, -27], [2, -27], [-1, -27], [-6, -31], [-5, -32], [3, -13], [4, -12], [-1, -27], [-6, -31], [-5, -32], [3, -13], [4, -12], [4, -29], [3, -28], [4, -29], [4, -29], [3, -28], [4, -29], [4, -25], [4, -25], [4, -25], [4, -25], [4, -25], [4, -25], [-4, -25], [-4, -25], [-4, -25], [-4, -25], [-4, -25], [-4, -25], [-4, -29], [-2, -28], [-4, -29], [-4, -29], [-2, -28], [-4, -29], [6, -27], [6, -27], [10, -24], [10, -24], [-10, -24], [-10, -24], [-5, -27], [-5, -27], [-3, -1], [-3, -1], [-2, -8], [-2, -8], [3, -8], [3, -8], [3, -1], [3, -1], [1, -27], [1, -27], [1, -27], [1, -27], [1, -27], [1, -27], [1, -27], [1, -27], [5, -29], [1, -29], [0, -29], [-2, -30], [-9, -14], [-11, -14], [-11, -14], [-11, -14], [-11, -14], [5, -29], [1, -29], [0, -29], [-2, -30], [-9, -14], [-11, -14], [-11, -14], [-11, -14], [-11, -14], [2, -26], [2, -25], [1, -26], [1, -26], [-10, -27], [-10, -27], [-10, -27], [-10, -27], [-10, -27], [2, -26], [2, -25], [1, -26], [1, -26], [-10, -27], [-10, -27], [-10, -27], [-10, -27], [-10, -27], [-1, -26], [-1, -25], [0, -26], [-1, -26], [11, -27], [10, -27], [10, -27], [10, -27], [10, -27], [-1, -26], [-1, -25], [0, -26], [-1, -26], [11, -27], [10, -27], [10, -27], [10, -27], [10, -27], [-4, -29], [-1, -29], [1, -29], [2, -30], [9, -14], [11, -14], [11, -14], [11, -14], [11, -14], [-4, -29], [-1, -29], [1, -29], [2, -30], [9, -14], [11, -14], [11, -14], [11, -14], [11, -14], [0, -24], [1, -24], [1, -24], [0, -24], [-5, -16], [-7, -15], [-7, -15], [-7, -15], [0, -24], [1, -24], [1, -24], [0, -24], [-5, -16], [-7, -15], [-7, -15], [-7, -15], [0, -27], [0, -26], [0, -26], [0, -27], [-9, -29], [-10, -28], [-10, -28], [-10, -28], [0, -27], [0, -26], [0, -26], [0, -27], [-9, -29], [-10, -28], [-10, -28], [-10, -28], [1, -27], [1, -26], [1, -26], [1, -27], [10, -29], [11, -28], [11, -28], [11, -28], [1, -27], [1, -26], [1, -26], [1, -27], [10, -29], [11, -28], [11, -28], [11, -28], [1, -24], [0, -24], [-1, -24], [1, -24], [6, -16], [7, -15], [7, -15], [7, -15], [1, -24], [0, -24], [-1, -24], [1, -24], [6, -16], [7, -15], [7, -15], [7, -15], [1, -27], [1, -27], [-3, -28], [-4, -28], [3, -36], [3, -37], [1, -27], [1, -27], [-3, -28], [-4, -28], [3, -36], [3, -37], [2, -27], [-1, -28], [-3, -29], [-3, -29], [1, -37], [0, -37], [2, -27], [-1, -28], [-3, -29], [-3, -29], [1, -37], [0, -37], [-1, -27], [2, -28], [3, -29], [3, -29], [0, -37], [1, -37], [-1, -27], [2, -28], [3, -29], [3, -29], [0, -37], [1, -37], [-1, -27], [-1, -27], [3, -28], [4, -28], [-2, -36], [-3, -37], [-1, -27], [-1, -27], [3, -28], [4, -28], [-2, -36], [-3, -37]],
  anchorHead: [[1, -57], [-4, -59], [7, -59], [-4, -59], [-3, -59], [1, -57], [-3, -59], [13, -75], [-4, -59], [13, -75], [13, -74], [-3, -59], [12, -74], [-10, -75], [12, -75], [-12, -75], [4, -59], [10, -74], [4, -59], [5, -59], [-12, -75], [5, -59], [0, -57], [4, -59], [1, -57], [1, -56], [1, -54], [1, -55], [1, -57], [1, -56], [1, -54], [1, -55], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-4, -59], [-4, -58], [-4, -56], [-4, -57], [-3, -59], [-3, -58], [-3, -56], [-3, -57], [-3, -59], [-3, -58], [-3, -56], [-3, -57], [13, -75], [13, -74], [13, -72], [13, -73], [13, -75], [13, -74], [13, -72], [13, -73], [12, -74], [12, -73], [12, -71], [12, -72], [12, -74], [12, -73], [12, -71], [12, -72], [-12, -75], [-12, -74], [-12, -72], [-12, -73], [-12, -75], [-12, -74], [-12, -72], [-12, -73], [4, -59], [4, -58], [4, -56], [4, -57], [4, -59], [4, -58], [4, -56], [4, -57], [5, -59], [5, -58], [5, -56], [5, -57], [5, -59], [5, -58], [5, -56], [5, -57], [1, -37], [-4, -39], [6, -39], [-4, -39], [-3, -39], [1, -37], [-3, -39], [13, -55], [-4, -39], [13, -55], [12, -54], [-3, -39], [12, -54], [-11, -55], [13, -55], [-12, -55], [4, -39], [11, -54], [4, -39], [5, -39], [-12, -55], [5, -39], [0, -37], [4, -39], [-10, -64], [-13, -49], [-10, -64], [-10, -64], [-13, -49], [-10, -64], [-5, -63], [-16, -50], [-5, -63], [-13, -65], [-16, -50], [-13, -65], [6, -63], [17, -50], [6, -63], [14, -66], [17, -50], [14, -66], [11, -64], [14, -49], [11, -64], [11, -64], [14, -49], [11, -64], [-4, -59], [-4, -60], [-4, -60], [-4, -58], [-4, -57], [-4, -58], [-4, -59], [-4, -60], [-4, -60], [-4, -58], [-4, -57], [-4, -58], [13, -75], [13, -76], [13, -76], [13, -74], [13, -73], [13, -74], [13, -75], [13, -76], [13, -76], [13, -74], [13, -73], [13, -74], [-12, -75], [-12, -76], [-12, -76], [-12, -74], [-12, -73], [-12, -74], [-12, -75], [-12, -76], [-12, -76], [-12, -74], [-12, -73], [-12, -74], [5, -59], [5, -60], [5, -60], [5, -58], [5, -57], [5, -58], [5, -59], [5, -60], [5, -60], [5, -58], [5, -57], [5, -58], [-4, -59], [2, -59], [4, -59], [-18, -40], [-19, -39], [-4, -59], [2, -59], [4, -59], [-18, -40], [-19, -39], [13, -75], [10, -76], [10, -74], [0, -72], [-2, -71], [13, -75], [10, -76], [10, -74], [0, -72], [-2, -71], [-12, -75], [-9, -76], [-9, -74], [1, -72], [3, -71], [-12, -75], [-9, -76], [-9, -74], [1, -72], [3, -71], [5, -59], [-1, -59], [-3, -59], [19, -40], [20, -39], [5, -59], [-1, -59], [-3, -59], [19, -40], [20, -39], [24, -68], [18, -63], [24, -68], [24, -68], [18, -63], [24, -68], [13, -74], [14, -72], [13, -74], [13, -74], [14, -72], [13, -74], [-12, -74], [-13, -72], [-12, -74], [-12, -74], [-13, -72], [-12, -74], [-23, -68], [-17, -63], [-23, -68], [-23, -68], [-17, -63], [-23, -68], [31, -64], [31, -64], [27, -67], [27, -67], [-26, -67], [-26, -67], [-30, -64], [-30, -64], [38, -21], [38, -21], [38, 13], [38, 13], [-37, 13], [-37, 13], [-37, -21], [-37, -21], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [2, -59], [4, -59], [4, -59], [-6, -57], [-16, -39], [-17, -38], [-17, -38], [-17, -38], [-17, -38], [2, -59], [4, -59], [4, -59], [-6, -57], [-16, -39], [-17, -38], [-17, -38], [-17, -38], [-17, -38], [13, -74], [13, -72], [13, -72], [9, -72], [-4, -68], [-6, -68], [-6, -68], [-6, -68], [-6, -68], [13, -74], [13, -72], [13, -72], [9, -72], [-4, -68], [-6, -68], [-6, -68], [-6, -68], [-6, -68], [-12, -74], [-12, -72], [-12, -72], [-8, -72], [5, -68], [7, -68], [7, -68], [7, -68], [7, -68], [-12, -74], [-12, -72], [-12, -72], [-8, -72], [5, -68], [7, -68], [7, -68], [7, -68], [7, -68], [-1, -59], [-3, -59], [-3, -59], [7, -57], [17, -39], [18, -38], [18, -38], [18, -38], [18, -38], [-1, -59], [-3, -59], [-3, -59], [7, -57], [17, -39], [18, -38], [18, -38], [18, -38], [18, -38], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-23, -38], [-24, -37], [-24, -37], [-24, -37], [-4, -59], [-4, -59], [-4, -59], [-4, -59], [-23, -38], [-24, -37], [-24, -37], [-24, -37], [13, -74], [13, -73], [13, -73], [13, -74], [-6, -73], [-7, -72], [-7, -72], [-7, -72], [13, -74], [13, -73], [13, -73], [13, -74], [-6, -73], [-7, -72], [-7, -72], [-7, -72], [-12, -74], [-12, -73], [-12, -73], [-12, -74], [7, -73], [8, -72], [8, -72], [8, -72], [-12, -74], [-12, -73], [-12, -73], [-12, -74], [7, -73], [8, -72], [8, -72], [8, -72], [5, -59], [5, -59], [5, -59], [5, -59], [24, -38], [25, -37], [25, -37], [25, -37], [5, -59], [5, -59], [5, -59], [5, -59], [24, -38], [25, -37], [25, -37], [25, -37], [-4, -59], [-4, -60], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [-4, -59], [-4, -60], [-4, -61], [-4, -61], [-4, -61], [-4, -61], [13, -75], [13, -76], [13, -77], [13, -77], [13, -78], [13, -78], [13, -75], [13, -76], [13, -77], [13, -77], [13, -78], [13, -78], [-12, -75], [-12, -76], [-12, -77], [-12, -77], [-12, -78], [-12, -78], [-12, -75], [-12, -76], [-12, -77], [-12, -77], [-12, -78], [-12, -78], [5, -59], [5, -60], [5, -61], [5, -61], [5, -61], [5, -61], [5, -59], [5, -60], [5, -61], [5, -61], [5, -61], [5, -61]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 71, 72, 73, 74, 75, 66, 67, 68, 69, 70, 66, 67, 68, 69, 70, 76, 77, 76, 76, 77, 76, 78, 79, 78, 78, 79, 78, 78, 79, 78, 78, 79, 78, 76, 77, 76, 76, 77, 76, 77, 77, 79, 79, 79, 79, 77, 77, 80, 80, 81, 81, 81, 81, 80, 80, 1, 1, 1, 1, 1, 1, 1, 1, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 88, 89, 90, 91, 92, 93, 93, 93, 93, 82, 83, 84, 85, 86, 87, 87, 87, 87, 82, 83, 84, 85, 86, 87, 87, 87, 87, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 100, 101, 102, 103, 104, 105, 105, 105, 94, 95, 96, 97, 98, 99, 99, 99, 94, 95, 96, 97, 98, 99, 99, 99, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 112, 113, 114, 115, 116, 117, 106, 107, 108, 109, 110, 111, 106, 107, 108, 109, 110, 111]
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 42, 79, 112, 149, 190, 231, 271, 311, 349, 390, 431, 471, 510, 545, 585, 627, 666, 703, 737, 771, 804, 835, 879, 926, 969, 1002, 1040, 1083, 1120, 1157, 1190, 1219, 1249, 1282, 1319, 1360, 1399, 1440, 1481, 1522, 1563, 1604, 1645, 1686, 1727, 1778, 1824, 1864, 1904, 1950, 1996, 2046, 2088, 2131, 2175, 2219, 2263, 2307, 2351, 2394, 2435, 2476, 2519, 2562, 2605, 2646, 2689, 2734, 2780, 2827, 2872, 2919, 2962, 3004, 3050, 3099, 3141, 3183, 3251, 3315, 3352, 3390, 3428, 3468, 3541, 3606, 3651, 3696, 3741, 3782, 3833, 3886, 3931, 3973, 4015, 4059, 4108, 4160, 4200, 4239, 4278, 4318, 4360, 4402, 4446, 4490, 4534, 4582, 4633, 4684, 4725, 4765, 4805, 4845, 4893],
  widths: [42, 37, 33, 37, 41, 41, 40, 40, 38, 41, 41, 40, 39, 35, 40, 42, 39, 37, 34, 34, 33, 31, 44, 47, 43, 33, 38, 43, 37, 37, 33, 29, 30, 33, 37, 41, 39, 41, 41, 41, 41, 41, 41, 41, 41, 51, 46, 40, 40, 46, 46, 50, 42, 43, 44, 44, 44, 44, 44, 43, 41, 41, 43, 43, 43, 41, 43, 45, 46, 47, 45, 47, 43, 42, 46, 49, 42, 42, 68, 64, 37, 38, 38, 40, 73, 65, 45, 45, 45, 41, 51, 53, 45, 42, 42, 44, 49, 52, 40, 39, 39, 40, 42, 42, 44, 44, 44, 48, 51, 51, 41, 40, 40, 40, 48, 48],
  heights: [73, 72, 71, 70, 69, 70, 69, 70, 74, 69, 67, 70, 74, 71, 67, 64, 67, 67, 69, 69, 73, 70, 69, 67, 67, 68, 67, 66, 68, 71, 71, 71, 70, 67, 65, 67, 69, 67, 67, 68, 67, 67, 68, 70, 68, 50, 50, 50, 51, 49, 69, 58, 61, 51, 75, 76, 76, 74, 73, 74, 72, 73, 73, 71, 70, 71, 79, 80, 66, 65, 75, 73, 61, 60, 66, 64, 66, 66, 48, 49, 72, 72, 72, 69, 67, 66, 71, 70, 69, 68, 63, 66, 77, 77, 77, 77, 63, 62, 72, 73, 73, 72, 60, 59, 76, 76, 77, 76, 75, 75, 72, 76, 76, 72, 71, 71],
  bodyOffsets: [[0, -27], [0, -27], [0, -27], [1, -28], [1, -28], [1, -28], [2, -27], [2, -27], [2, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [1, -27], [1, -27], [1, -27], [-1, -27], [-1, -27], [-1, -27], [0, -28], [0, -28], [0, -28], [0, -27], [0, -26], [0, -24], [0, -23], [0, -27], [0, -27], [0, -24], [0, -23], [1, -26], [-1, -27], [-2, -27], [-1, -26], [1, -28], [1, -26], [-1, -24], [1, -23], [1, -26], [-2, -25], [-1, -24], [-2, -25], [0, -27], [-4, -26], [-2, -25], [-3, -25], [-1, -24], [0, -23], [0, -21], [-2, -24], [-2, -26], [-2, -26], [-1, -23], [-1, -23], [0, -26], [0, -25], [0, -23], [0, -24], [0, -26], [0, -25], [0, -22], [0, -24], [2, -24], [1, -23], [1, -21], [2, -24], [3, -26], [3, -26], [2, -23], [2, -23], [0, -26], [2, -25], [2, -24], [3, -25], [1, -27], [4, -26], [3, -25], [4, -25], [0, -26], [1, -27], [2, -27], [2, -26], [0, -28], [-1, -26], [1, -24], [0, -23], [0, -19], [0, -19], [0, -19], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [1, -18], [1, -18], [1, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [0, -18], [4, -24], [3, -18], [4, -24], [4, -24], [3, -18], [4, -24], [3, -20], [4, -15], [3, -20], [3, -20], [4, -15], [3, -20], [-3, -20], [-3, -15], [-3, -20], [-3, -20], [-3, -15], [-3, -20], [-4, -24], [-3, -18], [-4, -24], [-4, -24], [-3, -18], [-4, -24], [5, -27], [5, -28], [5, -28], [5, -27], [5, -26], [5, -27], [5, -27], [5, -28], [5, -28], [5, -27], [5, -26], [5, -27], [1, -25], [1, -25], [1, -25], [1, -24], [1, -24], [1, -24], [1, -25], [1, -25], [1, -25], [1, -24], [1, -24], [1, -24], [0, -25], [0, -25], [0, -25], [0, -24], [0, -24], [0, -24], [0, -25], [0, -25], [0, -25], [0, -24], [0, -24], [0, -24], [-5, -27], [-5, -28], [-5, -28], [-5, -27], [-5, -26], [-4, -27], [-5, -27], [-5, -28], [-5, -28], [-5, -27], [-5, -26], [-4, -27], [7, -27], [8, -28], [0, -23], [0, -22], [7, -27], [8, -28], [0, -23], [0, -22], [2, -26], [3, -25], [-2, -22], [-3, -23], [2, -26], [3, -25], [-2, -22], [-3, -23], [-1, -26], [-2, -25], [3, -22], [3, -23], [-1, -26], [-2, -25], [3, -22], [3, -23], [-6, -27], [-7, -28], [0, -23], [1, -22], [-6, -27], [-7, -28], [0, -23], [1, -22], [-4, -22], [-2, -23], [-4, -22], [-4, -22], [-2, -23], [-4, -22], [3, -23], [6, -22], [3, -23], [3, -23], [6, -22], [3, -23], [-3, -23], [-6, -22], [-3, -23], [-3, -23], [-6, -22], [-3, -23], [4, -22], [3, -23], [4, -22], [4, -22], [3, -23], [4, -22], [2, -23], [2, -23], [12, -21], [12, -21], [-12, -21], [-12, -21], [-1, -23], [-1, -23], [6, -12], [6, -12], [13, -7], [13, -7], [-13, -7], [-13, -7], [-6, -12], [-6, -12], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [0, -27], [-5, -21], [-11, -21], [-11, -21], [-11, -21], [-11, -21], [0, -27], [0, -27], [0, -27], [0, -27], [-5, -21], [-11, -21], [-11, -21], [-11, -21], [-11, -21], [-1, -25], [0, -25], [0, -25], [0, -27], [-7, -27], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [-1, -25], [0, -25], [0, -25], [0, -27], [-7, -27], [-9, -28], [-9, -28], [-9, -28], [-9, -28], [2, -25], [1, -25], [1, -25], [1, -27], [8, -27], [10, -28], [10, -28], [10, -28], [10, -28], [2, -25], [1, -25], [1, -25], [1, -27], [8, -27], [10, -28], [10, -28], [10, -28], [10, -28], [1, -27], [0, -27], [0, -27], [0, -27], [6, -21], [12, -21], [12, -21], [12, -21], [12, -21], [1, -27], [0, -27], [0, -27], [0, -27], [6, -21], [12, -21], [12, -21], [12, -21], [12, -21], [1, -27], [1, -27], [1, -27], [1, -27], [-5, -18], [-6, -17], [-6, -17], [-6, -17], [1, -27], [1, -27], [1, -27], [1, -27], [-5, -18], [-6, -17], [-6, -17], [-6, -17], [0, -27], [1, -27], [1, -27], [0, -27], [-3, -24], [-4, -23], [-4, -23], [-4, -23], [0, -27], [1, -27], [1, -27], [0, -27], [-3, -24], [-4, -23], [-4, -23], [-4, -23], [0, -27], [0, -27], [0, -27], [0, -27], [3, -24], [4, -23], [4, -23], [4, -23], [0, -27], [0, -27], [0, -27], [0, -27], [3, -24], [4, -23], [4, -23], [4, -23], [0, -27], [-1, -27], [-1, -27], [-1, -27], [6, -18], [6, -17], [6, -17], [6, -17], [0, -27], [-1, -27], [-1, -27], [-1, -27], [6, -18], [6, -17], [6, -17], [6, -17], [3, -27], [2, -28], [2, -28], [0, -28], [-2, -27], [-2, -27], [3, -27], [2, -28], [2, -28], [0, -28], [-2, -27], [-2, -27], [2, -28], [2, -30], [2, -30], [2, -27], [-1, -26], [-1, -26], [2, -28], [2, -30], [2, -30], [2, -27], [-1, -26], [-1, -26], [-1, -28], [-2, -30], [-2, -30], [-2, -27], [1, -26], [1, -26], [-1, -28], [-2, -30], [-2, -30], [-2, -27], [1, -26], [1, -26], [-3, -27], [-2, -28], [-2, -28], [0, -28], [3, -27], [3, -27], [-3, -27], [-2, -28], [-2, -28], [0, -28], [3, -27], [3, -27]],
  anchorHead: [[1, -57], [-4, -58], [6, -58], [-5, -59], [-4, -59], [0, -58], [-4, -59], [11, -75], [-5, -59], [12, -74], [12, -73], [-4, -57], [11, -73], [-10, -74], [11, -74], [-11, -74], [5, -58], [11, -73], [5, -58], [6, -58], [-11, -74], [6, -58], [1, -57], [5, -59], [0, -55], [0, -54], [0, -52], [0, -53], [0, -55], [0, -54], [0, -52], [0, -53], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-5, -57], [-5, -56], [-5, -54], [-5, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [-4, -57], [-4, -56], [-4, -54], [-4, -55], [11, -72], [11, -71], [11, -69], [11, -70], [11, -72], [11, -71], [11, -69], [11, -70], [11, -71], [11, -70], [11, -68], [11, -69], [11, -71], [11, -70], [11, -68], [11, -69], [-10, -72], [-10, -71], [-10, -69], [-10, -70], [-10, -72], [-10, -71], [-10, -69], [-10, -70], [5, -57], [5, -56], [5, -54], [5, -55], [5, -57], [5, -56], [5, -54], [5, -55], [6, -57], [6, -56], [6, -54], [6, -55], [6, -57], [6, -56], [6, -54], [6, -55], [0, -37], [-5, -38], [5, -38], [-6, -38], [-5, -38], [0, -37], [-5, -38], [11, -54], [-6, -38], [11, -54], [12, -53], [-4, -38], [12, -53], [-10, -54], [12, -54], [-11, -54], [5, -38], [11, -53], [5, -38], [6, -38], [-11, -54], [5, -37], [0, -36], [4, -37], [-7, -68], [-12, -37], [-7, -68], [-7, -68], [-12, -37], [-7, -68], [-5, -63], [-3, -41], [-5, -63], [-5, -63], [-3, -41], [-5, -63], [6, -63], [4, -41], [6, -63], [6, -63], [4, -41], [6, -63], [8, -68], [13, -37], [8, -68], [8, -68], [13, -37], [8, -68], [-3, -60], [-3, -61], [-3, -61], [-3, -59], [-3, -58], [-3, -59], [-3, -60], [-3, -61], [-3, -61], [-3, -59], [-3, -58], [-3, -59], [11, -72], [11, -73], [11, -73], [11, -72], [11, -70], [11, -71], [11, -72], [11, -73], [11, -73], [11, -72], [11, -70], [11, -71], [-10, -72], [-10, -73], [-10, -73], [-10, -72], [-10, -70], [-10, -71], [-10, -72], [-10, -73], [-10, -73], [-10, -72], [-10, -70], [-10, -71], [4, -60], [4, -61], [4, -61], [4, -59], [4, -58], [4, -59], [4, -60], [4, -61], [4, -61], [4, -59], [4, -58], [4, -59], [0, -54], [3, -54], [-18, -44], [-19, -43], [0, -54], [3, -54], [-18, -44], [-19, -43], [10, -69], [11, -69], [2, -64], [-1, -64], [10, -69], [11, -69], [2, -64], [-1, -64], [-9, -69], [-10, -69], [-1, -64], [2, -64], [-9, -69], [-10, -69], [-1, -64], [2, -64], [1, -54], [-2, -54], [19, -44], [20, -43], [1, -54], [-2, -54], [19, -44], [20, -43], [16, -64], [18, -63], [16, -64], [16, -64], [18, -63], [16, -64], [14, -74], [19, -73], [14, -74], [14, -74], [19, -73], [14, -74], [-13, -74], [-18, -73], [-13, -74], [-13, -74], [-18, -73], [-13, -74], [-15, -64], [-17, -63], [-15, -64], [-15, -64], [-17, -63], [-15, -64], [24, -61], [24, -61], [30, -68], [30, -68], [-29, -68], [-29, -68], [-23, -61], [-23, -61], [48, -31], [48, -31], [57, 13], [57, 13], [-56, 13], [-56, 13], [-47, -31], [-47, -31], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [1, -57], [-3, -57], [-1, -57], [-1, -57], [-2, -56], [-23, -45], [-24, -44], [-24, -44], [-24, -44], [-24, -44], [-3, -57], [-1, -57], [-1, -57], [-2, -56], [-23, -45], [-24, -44], [-24, -44], [-24, -44], [-24, -44], [10, -73], [11, -73], [11, -73], [10, -73], [-2, -70], [-3, -71], [-3, -71], [-3, -71], [-3, -71], [10, -73], [11, -73], [11, -73], [10, -73], [-2, -70], [-3, -71], [-3, -71], [-3, -71], [-3, -71], [-9, -73], [-10, -73], [-10, -73], [-9, -73], [3, -70], [4, -71], [4, -71], [4, -71], [4, -71], [-9, -73], [-10, -73], [-10, -73], [-9, -73], [3, -70], [4, -71], [4, -71], [4, -71], [4, -71], [4, -57], [2, -57], [2, -57], [3, -56], [24, -45], [25, -44], [25, -44], [25, -44], [25, -44], [4, -57], [2, -57], [2, -57], [3, -56], [24, -45], [25, -44], [25, -44], [25, -44], [25, -44], [-5, -61], [-5, -61], [-5, -61], [-5, -61], [-18, -40], [-18, -39], [-18, -39], [-18, -39], [-5, -61], [-5, -61], [-5, -61], [-5, -61], [-18, -40], [-18, -39], [-18, -39], [-18, -39], [12, -75], [13, -76], [13, -76], [12, -75], [-3, -65], [-5, -64], [-5, -64], [-5, -64], [12, -75], [13, -76], [13, -76], [12, -75], [-3, -65], [-5, -64], [-5, -64], [-5, -64], [-11, -75], [-12, -76], [-12, -76], [-11, -75], [4, -65], [6, -64], [6, -64], [6, -64], [-11, -75], [-12, -76], [-12, -76], [-11, -75], [4, -65], [6, -64], [6, -64], [6, -64], [6, -61], [6, -61], [6, -61], [6, -61], [19, -40], [19, -39], [19, -39], [19, -39], [6, -61], [6, -61], [6, -61], [6, -61], [19, -40], [19, -39], [19, -39], [19, -39], [-5, -60], [-4, -61], [-4, -62], [-5, -61], [-5, -60], [-5, -60], [-5, -60], [-4, -61], [-4, -62], [-5, -61], [-5, -60], [-5, -60], [12, -75], [12, -79], [12, -79], [12, -74], [12, -73], [12, -73], [12, -75], [12, -79], [12, -79], [12, -74], [12, -73], [12, -73], [-11, -75], [-11, -79], [-11, -79], [-11, -74], [-11, -73], [-11, -73], [-11, -75], [-11, -79], [-11, -79], [-11, -74], [-11, -73], [-11, -73], [6, -60], [5, -61], [5, -62], [6, -61], [6, -60], [6, -60], [6, -60], [5, -61], [5, -62], [6, -61], [6, -60], [6, -60]],
  spriteIndices: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 21, 22, 23, 24, 25, 26, 27, 28, 13, 14, 15, 16, 17, 18, 19, 20, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 50, 51, 50, 50, 51, 50, 52, 53, 52, 52, 53, 52, 52, 53, 52, 52, 53, 52, 50, 51, 50, 50, 51, 50, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 66, 67, 68, 69, 70, 71, 72, 73, 70, 71, 72, 73, 70, 71, 72, 73, 70, 71, 72, 73, 66, 67, 68, 69, 66, 67, 68, 69, 74, 75, 74, 74, 75, 74, 76, 77, 76, 76, 77, 76, 76, 77, 76, 76, 77, 76, 74, 75, 74, 74, 75, 74, 75, 75, 77, 77, 77, 77, 75, 75, 78, 78, 79, 79, 79, 79, 78, 78, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 86, 87, 88, 89, 90, 91, 91, 91, 91, 80, 81, 82, 83, 84, 85, 85, 85, 85, 80, 81, 82, 83, 84, 85, 85, 85, 85, 92, 93, 94, 95, 96, 97, 97, 97, 92, 93, 94, 95, 96, 97, 97, 97, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 98, 99, 100, 101, 102, 103, 103, 103, 92, 93, 94, 95, 96, 97, 97, 97, 92, 93, 94, 95, 96, 97, 97, 97, 104, 105, 106, 107, 108, 109, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 110, 111, 112, 113, 114, 115, 104, 105, 106, 107, 108, 109, 104, 105, 106, 107, 108, 109]
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var root = document.querySelector("#root");

var React = __webpack_require__(0);

var ReactDOM = __webpack_require__(57); //React Components


var GamePage = __webpack_require__(61);

var MapMaker = __webpack_require__(77);

var ToRender;
var page = document.querySelector("#page").textContent;

switch (page) {
  case "MainPage":
    ToRender = GamePage();
    break;

  case "MapMaker":
    ToRender = MapMaker();
    break;
}

ReactDOM.render( /*#__PURE__*/React.createElement(ToRender, null), root);

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var l=__webpack_require__(2),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.13.1";


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(58);
} else {}


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(0),n=__webpack_require__(2),r=__webpack_require__(59);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
function vh(a,b){return"function"===typeof b?b(a):b}
function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
d)}}
var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
var ii={dehydrated:null,retryTime:0};
function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.13.1",
rendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
exports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
exports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.13.1";


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(60);
} else {}


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

//-------disable reactdevtools on prod.
// if (
//   !window.__ALLOW_REACT_DEVTOOLS__ &&
//   window.__REACT_DEVTOOLS_GLOBAL_HOOK__ &&
//   typeof window.__REACT_DEVTOOLS_GLOBAL_HOOK__ === "object"
// ) {
//   for (let [key, value] of Object.entries(
//     window.__REACT_DEVTOOLS_GLOBAL_HOOK__
//   )) {
//     window.__REACT_DEVTOOLS_GLOBAL_HOOK__[key] =
//       typeof value == "function" ? () => {} : null;
//   }
// }
// delete window.__ALLOW_REACT_DEVTOOLS__;
//-------------------------------------
var React = __webpack_require__(0); //modules


var Login = __webpack_require__(62);

var Register = __webpack_require__(63);

var About = __webpack_require__(64);

var SelectCharacter = __webpack_require__(65);

var CreateCharacter = __webpack_require__(66);

var OG = __webpack_require__(67);

var BgAnimate = __webpack_require__(68);

var PortraitScreen = __webpack_require__(69); //animation


var AssetDownloader = __webpack_require__(70);

var SpriteSheetData = __webpack_require__(71);

var titleSpriteSheetData = __webpack_require__(75); //for testing purpose only


var AnimationTESTER = __webpack_require__(76); //from passport to TOTAL SOCKET IO!!!!!


var socket = io();

module.exports = function () {
  return /*#__PURE__*/function (_React$Component) {
    _inherits(_class, _React$Component);

    var _super = _createSuper(_class);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _super.call(this, props);
      _this.state = {
        //toggles
        show: "PortraitScreen",
        lastShow: "Login",
        //modal types
        modal: false,
        modalJsx: null,
        //loading progress
        loadingPercent: 0,
        loadingDetails: "",
        //live input values
        loginInput: {
          username: "",
          password: ""
        },
        registerInput: {
          regUsername: "",
          regPassword: "",
          regConfirmPassword: ""
        },
        //error-success message
        info: {
          type: "",
          message: ""
        },
        //Bg Animation Object
        bgIsOn: true,
        //character selection
        selectedCharData: null
      };
      _this.bgAnimate = null;
      _this.BGSpritesheet = null;
      _this._updateInput = _this._updateInput.bind(_assertThisInitialized(_this));
      _this._toggleVisibility = _this._toggleVisibility.bind(_assertThisInitialized(_this));
      _this._setStateCallback = _this._setStateCallback.bind(_assertThisInitialized(_this));
      _this._functionComponentDidMount = _this._functionComponentDidMount.bind(_assertThisInitialized(_this));
      _this._socketListeners = _this._socketListeners.bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        //activate initial loading progress
        this.setState({
          modalJsx: /*#__PURE__*/React.createElement("p", null, "Loading..."),
          modal: true
        });

        document.querySelector("#GamePageContainer").oncontextmenu = function (event) {
          event.preventDefault();
        };

        if (window.Worker) {
          console.log("Worker API supported");
          this.worker = new Worker("./animation-worker.js");
        } else {
          console.log("Worker API not supported");
          return this.setState({
            modalJsx: /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, "Sorry, our app cannot run on this browser."), "err: [Worker API not supported]")
          });
        } //get the spritesheet


        this.bgAnimate = new BgAnimate();

        var blobPromise = function blobPromise() {
          fetch("./assets/titles/titleImages.jpg").then(function (response) {
            return response.blob();
          }).then(function (blob) {
            return createImageBitmap(blob, {
              resizeWidth: 28080,
              resizeHeight: 2400,
              resizeQuality: "pixelated"
            });
          }).then(function (imageBitmap) {
            _this2.bgAnimate.initialize(imageBitmap, titleSpriteSheetData);

            _this2.bgAnimate.startTransition();

            _this2.setState({
              loadingDetails: "Background initialized"
            });
          });
        };

        blobPromise();
        var assetDownloader = new AssetDownloader();
        this.spriteSheetData = new SpriteSheetData();
        assetDownloader.downloadAll(this.spriteSheetData, this.worker, function (prog, det) {
          _this2.setState({
            loadingPercent: prog,
            loadingDetails: det
          });
        }, function (err, info) {
          if (err) console.log(err);

          if (info) {
            //done.. remove the loading screen
            _this2.setState({
              modal: false,
              modalJsx: null,
              loadingDetails: "",
              loadingPercent: 0
            });

            console.log(info);
          }
        });

        if (document.querySelector("#isDesktop").textContent == "true") {
          console.log("DESKTOP");
          this.setState({
            show: "Login"
          });
        } else {
          //if not a desktop, redirect to fullscreen request
          document.onfullscreenchange = function () {
            if (!document.fullscreenElement && !document.webkitFullscreenElement && !document.mozFullScreenElement && !document.msFullscreenElement) {
              _this2.setState({
                lastShow: _this2.state.show,
                show: "PortraitScreen"
              });
            }
          };
        } //adjust font size on window resize


        window.onresize = function (event) {
          var gameContWidth = document.querySelector("#GamePageContainer").offsetWidth;
          var inputs = document.querySelectorAll("input");
          var buttons = document.querySelectorAll("button");
          inputs.forEach(function (x) {
            x.style.fontSize = gameContWidth * 0.02 + "px"; // x.style.margin = gameContWidth * 0.02 + "px";
          });
          buttons.forEach(function (x) {
            x.style.fontSize = gameContWidth * 0.02 + "px"; // x.style.margin = gameContWidth * 0.02 + "px";
          });
        }; //activate socket listeners once


        this._socketListeners();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.bgIsOn != this.state.bgIsOn) {
          this.state.bgIsOn ? this.bgAnimate.startTransition() : this.bgAnimate.endTransition();
        }

        if (prevState.show != this.state.show) {
          this._functionComponentDidMount(this.state.show);
        }
      }
    }, {
      key: "_socketListeners",
      value: function _socketListeners() {
        var _this3 = this;

        console.log("listening"); //socket listeners

        socket.on("forceleave", function (message) {
          _this3.setState({
            modal: true,
            modalJsx: /*#__PURE__*/React.createElement("div", {
              className: "modal-inner"
            }, /*#__PURE__*/React.createElement("h4", null, message), /*#__PURE__*/React.createElement("button", {
              onClick: function onClick() {
                _this3._toggleVisibility("Login");
              }
            }, "Ok"))
          });
        });
        socket.on("newuser", function (user) {
          console.log("user " + user + " has connected");
        });
      }
    }, {
      key: "_setStateCallback",
      value: function _setStateCallback(toChange) {
        this.setState(toChange);
      }
    }, {
      key: "_toggleVisibility",
      value: function _toggleVisibility(component) {
        var _this4 = this;

        var fader = document.querySelector("#fader");
        fader.style.display = "block";
        var counter = 0,
            reducer = 1,
            opaq = 0;
        var faderTimer = setInterval(function () {
          counter++;
          reducer = counter <= 10 ? 1 : -1;
          opaq += reducer * 0.1;
          fader.style.opacity = opaq;

          if (counter == 10) {
            _this4.setState({
              show: component,
              loginInput: {
                username: "",
                password: ""
              },
              registerInput: {
                regUsername: "",
                regPassword: "",
                regConfirmPassword: ""
              },
              info: {
                type: "",
                message: ""
              },
              modal: false,
              modalJsx: null
            });
          }

          if (counter >= 20) {
            clearInterval(faderTimer);
            fader.style.display = "none";
          }
        }, 25);
      } //MODIFIED FUNCTIONAL-COMPONENTS DID MOUNT

    }, {
      key: "_functionComponentDidMount",
      value: function _functionComponentDidMount(component) {
        var _this5 = this;

        //terminate worker's animation first
        this.worker.postMessage({
          type: "terminate"
        });
        var mainCanvas, backgroundCanvas, offscreen, offscreenBackground;

        switch (component) {
          case "AnimationTESTER":
            mainCanvas = document.querySelector("#mainCanvas");
            mainCanvas.width = 250;
            mainCanvas.height = 250;
            offscreen = mainCanvas.transferControlToOffscreen();
            this.worker.postMessage({
              type: "animationInit",
              args: [offscreen, this.spriteSheetData]
            }, [offscreen]);
            this.worker.postMessage({
              type: "test"
            });
            this.worker.postMessage({
              type: "renderThese",
              renderThese: [{
                type: "player",
                // types = player,npc
                body: "fSpecial1",
                bodyFacing: "f",
                act: "idle",
                head: "fHead0",
                fps: 10,
                coords: [125, 125]
              }]
            });
            break;

          case "SelectCharacter":
            var renderThese = [];
            Object.keys(this.CHARACTERS).map(function (character, i) {
              renderThese.push({
                body: _this5.CHARACTERS[character]["class"],
                head: _this5.CHARACTERS[character].head,
                coords: [i * 100 + 50, 120],
                type: "player",
                // types = player,npc
                bodyFacing: "fl",
                act: "sit",
                fps: 10,
                selectCharacterSelected: false
              });
            });
            mainCanvas = document.querySelector("#mainCanvas");
            mainCanvas.width = renderThese.length * 100;
            mainCanvas.height = 160;
            var selectedIndexRef;

            var clickHandler = function clickHandler(e) {
              var selectedIndexSet = Math.floor(e.offsetX / 100);

              if (selectedIndexSet != selectedIndexRef) {
                selectedIndexRef = selectedIndexSet;
                renderThese.map(function (c) {
                  c.act = "sit";
                  c.bodyFacing = "fl";
                  c.selectCharacterSelected = false;
                });
                renderThese[selectedIndexRef].act = "standby";
                renderThese[selectedIndexRef].bodyFacing = "fl";
                renderThese[selectedIndexRef].selectCharacterSelected = true;

                _this5.worker.postMessage({
                  type: "renderThese",
                  renderThese: renderThese
                }); //to get the name


                var _Object$entries$selec = _slicedToArray(Object.entries(_this5.CHARACTERS)[selectedIndexRef], 2),
                    key = _Object$entries$selec[0],
                    value = _Object$entries$selec[1]; //then put into state


                _this5.setState({
                  selectedCharData: {
                    name: key,
                    data: value
                  }
                });
              }
            };

            mainCanvas.addEventListener("click", clickHandler);
            offscreen = mainCanvas.transferControlToOffscreen();
            this.worker.postMessage({
              type: "animationInit",
              args: [offscreen, this.spriteSheetData]
            }, [offscreen]);
            this.worker.postMessage({
              type: "renderThese",
              renderThese: renderThese
            });
            break;

          case "OG":
            var _ref = [document.querySelector("#mainCanvas"), document.querySelector("#backgroundCanvas")];
            mainCanvas = _ref[0];
            backgroundCanvas = _ref[1];
            [mainCanvas, backgroundCanvas].map(function (x) {
              x.width = 1250;
              x.height = 875;
              x.style.width = "100%";
              x.style.height = "100%";
            });
            var _ref2 = [mainCanvas.transferControlToOffscreen(), backgroundCanvas.transferControlToOffscreen()];
            offscreen = _ref2[0];
            offscreenBackground = _ref2[1];
            this.worker.postMessage({
              type: "animationInit",
              args: [offscreen, this.spriteSheetData, offscreenBackground]
            }, [offscreen, offscreenBackground]);
            break;
        }
      }
    }, {
      key: "_updateInput",
      value: function _updateInput(e) {
        var elem = e.target;

        if (elem.id == "regUsername" || elem.id == "username") {
          var reg = /^(\w?)+$/;
          if (!reg.test(elem.value)) return null;
        }

        var newInput = elem.id.indexOf("reg") == 0 ? this.state.registerInput : this.state.loginInput;
        newInput[elem.id] = elem.value;
        this.setState(newInput);
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        return /*#__PURE__*/React.createElement("div", {
          id: "GamePageContainer"
        }, /*#__PURE__*/React.createElement("canvas", {
          id: "backgroundImg0",
          className: "backgroundImg",
          style: {
            display: this.state.bgIsOn ? "block" : "none"
          }
        }), /*#__PURE__*/React.createElement("canvas", {
          id: "backgroundImg1",
          className: "backgroundImg",
          style: {
            display: this.state.bgIsOn ? "block" : "none"
          }
        }), this.state.show == "PortraitScreen" && /*#__PURE__*/React.createElement(PortraitScreen, {
          _setStateCallback: this._setStateCallback,
          lastShow: this.state.lastShow,
          info: this.state.info
        }), this.state.show == "AnimationTESTER" && /*#__PURE__*/React.createElement(AnimationTESTER, {
          _toggleVisibility: this._toggleVisibility,
          _setStateCallback: this._setStateCallback,
          info: this.state.info,
          worker: this.worker
        }), this.state.show == "Login" && /*#__PURE__*/React.createElement(Login, {
          _updateInput: this._updateInput,
          _toggleVisibility: this._toggleVisibility,
          _setStateCallback: this._setStateCallback,
          loginInput: this.state.loginInput,
          info: this.state.info,
          bgIsOn: this.state.bgIsOn,
          socket: socket,
          userCallBack: function userCallBack(characters) {
            _this6.CHARACTERS = characters;
          }
        }), this.state.show == "Register" && /*#__PURE__*/React.createElement(Register, {
          _updateInput: this._updateInput,
          _toggleVisibility: this._toggleVisibility,
          _setStateCallback: this._setStateCallback,
          registerInput: this.state.registerInput,
          info: this.state.info,
          socket: socket
        }), this.state.show == "SelectCharacter" && /*#__PURE__*/React.createElement(SelectCharacter, {
          _toggleVisibility: this._toggleVisibility,
          _setStateCallback: this._setStateCallback,
          worker: this.worker,
          socket: socket,
          selectedCharData: this.state.selectedCharData,
          userCallBack: function userCallBack(map) {
            _this6.CHARACTERS.ACTIVEMAP = map;
            console.log(_this6.CHARACTERS);
          }
        }), this.state.show == "CreateCharacter" && /*#__PURE__*/React.createElement(CreateCharacter, {
          _toggleVisibility: this._toggleVisibility,
          _setStateCallback: this._setStateCallback,
          socket: socket
        }), this.state.show == "OG" && /*#__PURE__*/React.createElement(OG, null), this.state.show == "About" && /*#__PURE__*/React.createElement(About, {
          _toggleVisibility: this._toggleVisibility
        }), this.state.modal && /*#__PURE__*/React.createElement("div", {
          id: "modal-bg"
        }, /*#__PURE__*/React.createElement("div", {
          id: "modal-fg"
        }, this.state.modalJsx, /*#__PURE__*/React.createElement("div", {
          id: "progressBar",
          style: {
            width: this.state.loadingPercent + "%",
            backgroundColor: "green",
            height: "10px"
          }
        }), /*#__PURE__*/React.createElement("span", null, this.state.loadingDetails))), /*#__PURE__*/React.createElement("div", {
          id: "fader"
        }));
      }
    }]);

    return _class;
  }(React.Component);
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

var InfoMessage = __webpack_require__(1);

module.exports = function Login(props) {
  var __login = function __login() {
    if (!props.loginInput.username || !props.loginInput.password) {
      return props._setStateCallback({
        info: {
          type: "error",
          message: "Missing credentials."
        }
      });
    }

    props._setStateCallback({
      modalJsx: /*#__PURE__*/React.createElement("p", null, "Please wait.."),
      modal: true
    });

    props.socket.emit("login", {
      username: props.loginInput.username,
      password: props.loginInput.password
    }, function (info) {
      if (info.type == "error") {
        return props._setStateCallback({
          info: info,
          modal: false
        });
      } //set the user variables in the main component


      props.userCallBack(info.message);

      props._toggleVisibility("SelectCharacter");
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "formContainer"
  }, /*#__PURE__*/React.createElement("p", null, "Login"), /*#__PURE__*/React.createElement(InfoMessage, {
    info: props.info
  }), /*#__PURE__*/React.createElement("input", {
    autoComplete: "off",
    id: "username",
    type: "text",
    placeholder: "username",
    onChange: props._updateInput,
    value: props.loginInput.username
  }), /*#__PURE__*/React.createElement("input", {
    autoComplete: "off",
    id: "password",
    type: "password",
    placeholder: "password",
    onChange: props._updateInput,
    value: props.loginInput.password
  }), /*#__PURE__*/React.createElement("button", {
    onClick: __login
  }, "Login"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("Register");
    }
  }, "Register"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      window.location.href = "/mapmaker";
    }
  }, "Map Maker"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("About");
    }
  }, "About"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback(function (currState) {
        return {
          bgIsOn: !currState.bgIsOn
        };
      });
    }
  }, "Turn ", props.bgIsOn ? "OFF" : "ON", " bg (DEV)"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("AnimationTESTER");
    }
  }, "Animation Tester (DEV)"));
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

var InfoMessage = __webpack_require__(1);

module.exports = function Register(props) {
  var __register = function __register() {
    if (props.registerInput.regPassword != props.registerInput.regConfirmPassword) {
      return props._setStateCallback({
        info: {
          type: "error",
          message: "Passwords don't match"
        }
      });
    }

    if (props.registerInput.regUsername == "" || props.registerInput.regPassword == "") {
      return props._setStateCallback({
        info: {
          type: "error",
          message: "Missing credentials."
        }
      });
    }

    props._setStateCallback({
      modalJsx: /*#__PURE__*/React.createElement("p", null, "Please wait.."),
      modal: true
    });

    props.socket.emit("register", {
      username: props.registerInput.regUsername,
      password: props.registerInput.regPassword
    }, function (info) {
      props._setStateCallback({
        info: info,
        registerInput: {
          regUsername: "",
          regPassword: "",
          regConfirmPassword: ""
        },
        modal: false
      });
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "formContainer"
  }, /*#__PURE__*/React.createElement("p", null, "Register"), /*#__PURE__*/React.createElement(InfoMessage, {
    info: props.info
  }), /*#__PURE__*/React.createElement("p", {
    className: "smallNote"
  }, "Username must only contain", /*#__PURE__*/React.createElement("br", null), "alphanumeric characters."), /*#__PURE__*/React.createElement("input", {
    autoComplete: "off",
    id: "regUsername",
    type: "text",
    placeholder: "username",
    onChange: props._updateInput,
    value: props.registerInput.regUsername
  }), /*#__PURE__*/React.createElement("input", {
    autoComplete: "off",
    id: "regPassword",
    type: "password",
    placeholder: "password",
    onChange: props._updateInput,
    value: props.registerInput.regPassword
  }), /*#__PURE__*/React.createElement("input", {
    autoComplete: "off",
    id: "regConfirmPassword",
    type: "password",
    placeholder: "confirm password",
    onChange: props._updateInput,
    value: props.registerInput.regConfirmPassword
  }), /*#__PURE__*/React.createElement("button", {
    onClick: __register
  }, "Submit"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("Login");
    }
  }, "Back"));
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

module.exports = function About(props) {
  return /*#__PURE__*/React.createElement("div", {
    className: "formContainer"
  }, /*#__PURE__*/React.createElement("p", null, "About"), /*#__PURE__*/React.createElement("p", null, "This game is still under development.", /*#__PURE__*/React.createElement("br", null), "Will you wait for the completion of this project?", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "--vince-r"), /*#__PURE__*/React.createElement("div", {
    className: "fb-like",
    "data-href": "https://vince-r-unnamed-rpg.glitch.me",
    "data-width": "20",
    "data-layout": "standard",
    "data-action": "like",
    "data-size": "small",
    "data-share": "true"
  }), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("Login");
    }
  }, "Back"));
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

module.exports = function SelectCharacter(props) {
  return /*#__PURE__*/React.createElement("div", {
    className: "selectCharsMainWindow"
  }, /*#__PURE__*/React.createElement("p", null, "Select Character"), /*#__PURE__*/React.createElement("div", {
    id: "selectCharsContainer"
  }, /*#__PURE__*/React.createElement("canvas", {
    id: "mainCanvas"
  })), props.selectedCharData && /*#__PURE__*/React.createElement("div", {
    id: "selectCharsDetails"
  }, /*#__PURE__*/React.createElement("strong", null, props.selectedCharData.name), /*#__PURE__*/React.createElement("br", null), "Lv: ", /*#__PURE__*/React.createElement("strong", null, props.selectedCharData.data.lv), /*#__PURE__*/React.createElement("br", null), "Class:", " ", /*#__PURE__*/React.createElement("strong", null, props.selectedCharData.data["class"].match(/[A-Z][a-z]+/g).join(" ")), /*#__PURE__*/React.createElement("br", null), "Map:", " ", /*#__PURE__*/React.createElement("strong", null, props.selectedCharData.data.map.replace(/^.+?\./, "")), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback({
        modalJsx: /*#__PURE__*/React.createElement("p", null, "Please wait.."),
        modal: true
      });

      var mapName = props.selectedCharData.data.map.split(".");
      props.socket.emit("loadmap", mapName[0], mapName[1], function (response) {
        //bad case
        if (response.type == "error") {
          return props._setStateCallback({
            modalJsx: /*#__PURE__*/React.createElement("div", {
              className: "modal-inner"
            }, /*#__PURE__*/React.createElement("p", null, response.message), /*#__PURE__*/React.createElement("button", {
              onClick: function onClick() {
                props._setStateCallback({
                  modalJsx: "",
                  modal: false
                });
              }
            }, "OK"))
          });
        }

        props.userCallBack(response.message);

        props._setStateCallback({
          bgIsOn: false
        });

        props._toggleVisibility("OG");
      });
    }
  }, "Enter"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._toggleVisibility("CreateCharacter");
    }
  }, "Create Character"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback({
        loading: true
      });

      props.socket.emit("logout", function () {
        props._toggleVisibility("Login");
      });
    }
  }, "Back")));
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = __webpack_require__(0);

module.exports = /*#__PURE__*/function (_React$Component) {
  _inherits(CreateCharacter, _React$Component);

  var _super = _createSuper(CreateCharacter);

  function CreateCharacter(props) {
    var _this;

    _classCallCheck(this, CreateCharacter);

    _this = _super.call(this, props);
    _this.state = {};
    return _this;
  }

  _createClass(CreateCharacter, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("div", {
        className: "formContainer"
      }, /*#__PURE__*/React.createElement("h3", null, "Create Character"), /*#__PURE__*/React.createElement("h4", null, "Not yet implemented."), /*#__PURE__*/React.createElement("button", null, "Create!"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props._toggleVisibility("SelectCharacter");
        }
      }, "Back"));
    }
  }]);

  return CreateCharacter;
}(React.Component);
/*
Male--
Face
Front Hair
Rear Hair
Beard
Ears
Eyes
Eyebrows
Nose
Mouth
Facial Mark
Beast Ears
Tail
Wing
Clothing
Cloak
Accessory 1
Accessory 2
Glasses

Female-- same as male except no Beard
*/

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = __webpack_require__(0);

module.exports = /*#__PURE__*/function (_React$Component) {
  _inherits(OG, _React$Component);

  var _super = _createSuper(OG);

  function OG(props) {
    _classCallCheck(this, OG);

    return _super.call(this, props);
  }

  _createClass(OG, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        id: "OGPage"
      }, /*#__PURE__*/React.createElement("canvas", {
        id: "backgroundCanvas"
      }), /*#__PURE__*/React.createElement("canvas", {
        id: "mainCanvas"
      }));
    }
  }]);

  return OG;
}(React.Component);

/***/ }),
/* 68 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function bgAnimate() {
  var _this = this;

  this.initialize = function (spritesheet, dataSprites) {
    console.log("Initializing BG variables..");
    var bgs = [{
      c: document.querySelector("#backgroundImg0"),
      ctx: document.querySelector("#backgroundImg0").getContext("2d")
    }, {
      c: document.querySelector("#backgroundImg1"),
      ctx: document.querySelector("#backgroundImg1").getContext("2d")
    }]; //background images: 4 portrait, 17 landscapes

    function drawBG(rand, bg) {
      var width = dataSprites.widths[rand],
          height = dataSprites.heights[rand],
          xPos = dataSprites.xPos[rand];
      bg.c.width = width;
      bg.c.height = height;
      bg.ctx.drawImage(spritesheet, xPos, 0, width, height, 0, 0, width, height);
    }

    var BgConstructor = function BgConstructor(bg) {
      _classCallCheck(this, BgConstructor);

      this.reset = function () {
        bg.c.style.transition = "none";
        bg.c.style.transform = "none";
      };

      this.fadeOut = function () {
        bg.c.style.opacity = 0;
      };

      this.setHorizontal = function () {
        var rand = Math.floor(Math.random() * 17) + 4;
        drawBG(rand, bg);
        bg.c.style.top = "-25%";
        bg.c.style.width = "150%";
        bg.c.style.height = "150%";
        bg.c.style.transitionProperty = "transform, opacity";
        bg.c.style.transitionDuration = "10s, 1s";
        bg.c.style.transitionTimingFunction = "linear";
      };

      this.moveLeft = function () {
        bg.c.style.left = "0px";
        bg.c.style.transform = "translateX(-33.33%)";
        bg.c.style.opacity = 1;
      };

      this.moveRight = function () {
        bg.c.style.left = "-50%";
        bg.c.style.transform = "translateX(33.33%)";
        bg.c.style.opacity = 1;
      };

      this.setVertical = function () {
        var rand = Math.floor(Math.random() * 4);
        drawBG(rand, bg);
        bg.c.style.left = "0px";
        bg.c.style.width = "100%";
        bg.c.style.height = "200%";
        bg.c.style.transitionProperty = "transform, opacity";
        bg.c.style.transitionDuration = "10s, 1s";
        bg.c.style.transitionTimingFunction = "linear";
      };

      this.moveUp = function () {
        bg.c.style.top = "0px";
        bg.c.style.transform = "translateY(-50%)";
        bg.c.style.opacity = 1;
      };

      this.moveDown = function () {
        bg.c.style.top = "-100%";
        bg.c.style.transform = "translateY(50%)";
        bg.c.style.opacity = 1;
      };

      this.setDiagonal = function () {
        var rand = Math.floor(Math.random() * 17) + 4;
        drawBG(rand, bg);
        bg.c.style.width = "150%";
        bg.c.style.height = "150%";
        bg.c.style.transitionProperty = "transform, opacity";
        bg.c.style.transitionDuration = "10s, 1s";
        bg.c.style.transitionTimingFunction = "linear";
      };

      this.moveUpLeft = function () {
        bg.c.style.top = "0px";
        bg.c.style.left = "0px";
        bg.c.style.transform = "translate(-33.33%,-33.33%)";
        bg.c.style.opacity = 1;
      };

      this.moveUpRight = function () {
        bg.c.style.top = "0px";
        bg.c.style.left = "-50%";
        bg.c.style.transform = "translate(33.33%,-33.33%)";
        bg.c.style.opacity = 1;
      };

      this.moveDownLeft = function () {
        bg.c.style.top = "-50%";
        bg.c.style.left = "0px";
        bg.c.style.transform = "translate(-33.33%,33.33%)";
        bg.c.style.opacity = 1;
      };

      this.moveDownRight = function () {
        bg.c.style.top = "-50%";
        bg.c.style.left = "-50%";
        bg.c.style.transform = "translate(33.33%,33.33%)";
        bg.c.style.opacity = 1;
      };

      this.setScale = function () {
        var rand = Math.floor(Math.random() * 17) + 4;
        drawBG(rand, bg);
        bg.c.style.transitionProperty = "transform, opacity";
        bg.c.style.transitionDuration = "10s, 1s";
        bg.c.style.transitionTimingFunction = "linear"; // bg.c.src = `/assets/titles/_ (${rand}).jpg`;
      };

      this.zoomIn = function () {
        bg.c.style.left = "0px";
        bg.c.style.top = "0px";
        bg.c.style.width = "100%";
        bg.c.style.height = "100%";
        bg.c.style.transform = "scale(2,2)";
        bg.c.style.opacity = 1;
      };

      this.zoomOut = function () {
        bg.c.style.left = "-50%";
        bg.c.style.top = "-50%";
        bg.c.style.width = "200%";
        bg.c.style.height = "200%";
        bg.c.style.transform = "scale(0.5,0.5)";
        bg.c.style.opacity = 1;
      };
    };

    _this.bgObject = [new BgConstructor(bgs[0]), new BgConstructor(bgs[1])];
    var methods = {
      setHorizontal: ["moveLeft", "moveRight"],
      setVertical: ["moveUp", "moveDown"],
      setDiagonal: ["moveUpLeft", "moveUpRight", "moveDownLeft", "moveDownRight"],
      setScale: ["zoomIn", "zoomOut"]
    };
    var methProps = Object.keys(methods);
    var set; //set bg div in the background while the other bg div is playing

    _this.setBG = function (bgNum) {
      set = Math.floor(Math.random() * methProps.length);

      _this.bgObject[bgNum].reset();

      setTimeout(function () {
        _this.bgObject[bgNum][methProps[set]]();
      }, 1000);
    }; //switch bg divs fade in fade out


    _this.switchBG = function (bgNum) {
      var methArr = methods[methProps[set]];
      var move = Math.floor(Math.random() * methArr.length); //wtf logic

      _this.bgObject[bgNum][methArr[move]]();

      _this.bgObject[1 - bgNum].fadeOut();
    };
  }; //start transitions


  var counter = 0,
      bgCounter = 0,
      bgTimer = null;

  this.startTransition = function () {
    //TIMER
    if (!bgTimer) {
      bgTimer = setInterval(function () {
        //set
        if (counter == 0) {
          _this.setBG(bgCounter % 2);
        } //switch


        if (counter == 4) {
          _this.switchBG(bgCounter % 2);
        }

        counter++; //reset

        if (counter >= 9) {
          counter = 0;
          bgCounter++;
        }
      }, 1000);
    } else {
      console.log("Bg transition already running");
      return;
    }
  }; //end transitions


  this.endTransition = function () {
    clearInterval(bgTimer);
    bgTimer = null;

    _this.bgObject[0].fadeOut();

    _this.bgObject[1].fadeOut();

    counter = 0;
    console.log("BG transitions ended");
  };
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

var InfoMessage = __webpack_require__(1);

module.exports = function PortraitScreen(props) {
  return /*#__PURE__*/React.createElement("div", {
    className: "formContainer"
  }, /*#__PURE__*/React.createElement(InfoMessage, {
    info: props.info
  }), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      var docElem = document.documentElement;
      var container = document.getElementById("GamePageContainer");

      if (docElem.requestFullscreen && document.fullscreenEnabled) {
        container.requestFullscreen();
      } else if (docElem.webkitRequestFullScreen && document.webkitFullscreenEnabled) {
        container.webkitRequestFullScreen();
      } else if (docElem.mozRequestFullScreen && document.mozFullScreenEnabled) {
        container.mozRequestFullScreen();
      } else if (docElem.msRequestFullscreen && document.msFullscreenEnabled) {
        container.msRequestFullscreen();
      } else {
        alert("Fullscreen not supported");
      }

      screen.orientation.lock("landscape-primary").then(function () {
        // alert("working");
        props._setStateCallback({
          show: props.lastShow
        });
      })["catch"](function (error) {
        var conf = window.confirm("Your browser is not supported for orientation lock, download supported browser instead? (Recommended: Opera Browser)");

        if (conf) {
          window.location.href = "https://play.google.com/store/apps/details?id=com.opera.browser";
        }

        props._setStateCallback({
          info: {
            type: "error",
            message: /*#__PURE__*/React.createElement("div", {
              id: "orientationError"
            }, "Your browser is", /*#__PURE__*/React.createElement("br", null), "not supported for orientation lock.", /*#__PURE__*/React.createElement("br", null), "List of supported browsers:", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
              style: {
                fontWeight: "bold"
              },
              href: "https://play.google.com/store/apps/details?id=com.opera.browser"
            }, "Opera (Recommended)"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
              href: "https://play.google.com/store/apps/details?id=com.android.chrome"
            }, "Chrome"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
              href: "https://play.google.com/store/apps/details?id=com.brave.browser"
            }, "Brave"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
              href: "https://play.google.com/store/apps/details?id=com.microsoft.emmx"
            }, "Microsoft Edge"))
          }
        });
      });
    }
  }, "Enter Fullscreen"));
};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = function AssetManager() {
  //dL all paths
  this.downloadAll = function (spriteSheetData, worker, updateProgress, cb) {
    var length = Object.keys(spriteSheetData.paths).length; //CHANGE LATER

    if (length === 0) {
      return cb("Error: Empty spriteSheetData");
    }

    var toAdd = 100 / length;
    var prog = 0;

    for (var prop in spriteSheetData.paths) {
      var path = spriteSheetData.paths[prop];
      worker.postMessage({
        type: "toBlob",
        name: prop,
        path: path
      });

      worker.onmessage = function (e) {
        if (e.data.type == "success") {
          prog += toAdd;
          console.log(prog);
          updateProgress(prog, "".concat(e.data.name, " sprite cached."));

          if (prog >= 100) {
            cb(null, "All images successfully passed to worker");
            spriteSheetData.paths = null;
          }
        }
      };
    }
  };
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//fTaekwonMaster attack3 deprecated //I FIXED IT NOW 4/28/2020
//fHighPriest attack1 deprecated //fixed
var head = __webpack_require__(72);

var compressedSpritesYPos = __webpack_require__(73);

module.exports = function SpriteSheetData() {
  var _this = this;

  //.PNG SPRITESHEET PATHS
  this.paths = {
    shadow: "./assets/characters/shadow.png",
    selectCharacterFrame: "./assets/system/selectCharacterFrame.png",
    fClass: "./assets/characters/body/fClass.png",
    fHead: "./assets/characters/head/fHead.png"
  }; //JOB CLASS SPRITES GENERATOR

  var data_body = {
    fSpecial1: {
      reversed: {
        acts: ["pick", "damaged", "dead", "cast"],
        dirs: ["f", "f", "f", "f"]
      }
    },
    fNovice: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fMonk: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fNinja: {
      reversed: null
    },
    fAlchemist: {
      reversed: {
        acts: ["attack1", "attack3"],
        dirs: ["b", "b"]
      }
    },
    fOboro: {
      reversed: null
    },
    fRebellion: {
      reversed: null
    },
    fRoyalGuard: {
      reversed: null
    },
    fGunslinger: {
      reversed: null
    },
    fSwordsman: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fCrusader: {
      reversed: {
        acts: ["attack2", "cast"],
        dirs: ["both", "both"]
      }
    },
    fTaekwonKid: {
      reversed: null
    },
    fArcher: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fThief: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fRanger: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fLordKnight: {
      reversed: {
        acts: ["attack1", "attack3"],
        dirs: ["b", "b"]
      }
    },
    fMechanic: {
      reversed: null
    },
    fBlacksmith: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fTaekwonMaster: {
      reversed: null
    },
    //<-----FIX THIS
    fAssassin: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fShadowChaser: {
      reversed: null
    },
    fArcBishop: {
      reversed: null
    },
    fAcolyte: {
      reversed: null
    },
    fPriest: {
      reversed: null
    },
    fSage: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fHunter: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fHighPriest: {
      reversed: null
    },
    fSura: {
      reversed: null
    },
    fDancer: {
      reversed: null
    },
    fGuillotineCross: {
      reversed: null
    },
    fBiochemist: {
      reversed: {
        acts: ["attack3", "attack1"],
        dirs: ["b", "b"]
      }
    },
    fWizard: {
      reversed: {
        acts: ["pick"],
        dirs: ["b"]
      }
    },
    fMage: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fWanderer: {
      reversed: null
    },
    fWarlock: {
      reversed: null
    },
    fKnight: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fMerchant: {
      reversed: {
        acts: ["pick"],
        dirs: ["b"]
      }
    },
    fRuneKnight: {
      reversed: null
    },
    fRogue: {
      reversed: null
    },
    fSoulLinker: {
      reversed: null
    },
    fSorcerer: {
      reversed: null
    },
    fSuperNovice: {
      reversed: {
        acts: ["pick"],
        dirs: ["f"]
      }
    },
    fSniper: {
      reversed: null
    },
    fStalker: {
      reversed: null
    },
    fAssassinCross: {
      reversed: null
    },
    fGeneticist: {
      reversed: {
        acts: ["attack3", "attack1"],
        dirs: ["b", "b"]
      }
    },
    fPaladin: {
      reversed: {
        acts: ["attack2", "cast"],
        dirs: ["both", "both"]
      }
    },
    fGypsy: {
      reversed: null
    },
    fScholar: {
      reversed: null
    },
    fHighWizard: {
      reversed: null
    },
    fMasterSmith: {
      reversed: null
    },
    fChampion: {
      reversed: null
    }
  }; //JOB CLASS CONSTRUCTOR

  var object_body = function object_body(jobClass, index) {
    _classCallCheck(this, object_body);

    this.data = __webpack_require__(74)("./" + jobClass);
    this.reversed = data_body[jobClass].reversed;
    this.yPos = compressedSpritesYPos.fClass[index];
  }; //sort the class props


  var sortedClass = Object.keys(data_body).sort(); //map em

  sortedClass.map(function (jobClass, i) {
    //initialize object instance
    _this[jobClass] = new object_body(jobClass, i); //add to paths
    //this.paths[jobClass] = `./assets/characters/body/${jobClass}.png`;
  }); //HEAD SPRITES GENERATOR

  for (var i = 0; i <= 28; i++) {
    this["fHead" + i] = head["fHead" + i];
    this["fHead" + i].yPos = compressedSpritesYPos.fHead[i]; // this.paths["fHead" + i] = `./assets/characters/head/${"fHead" + i}.png`;
  }
};

/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = {
  fHead0: {
    xPos: [0, 27, 55, 82, 108, 135, 165, 192, 222, 241, 269, 299, 327, 357, 386],
    widths: [27, 28, 27, 26, 27, 30, 27, 30, 19, 28, 30, 28, 30, 29, 25],
    heights: [31, 33, 32, 31, 32, 30, 31, 29, 26, 27, 27, 29, 28, 23, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -5
        },
        y: {
          f: -10,
          fl: -8,
          l: -9,
          bl: 7,
          b: 6,
          br: 7,
          r: -9,
          fr: -8
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead1: {
    xPos: [0, 29, 57, 83, 110, 139, 167, 194, 220, 239, 267, 296, 325, 356, 380],
    widths: [29, 28, 26, 27, 29, 28, 27, 26, 19, 28, 29, 29, 31, 24, 25],
    heights: [27, 27, 29, 31, 32, 27, 27, 27, 27, 27, 27, 31, 31, 22, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 3,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -5
        },
        y: {
          f: -11,
          fl: -10,
          l: -9,
          bl: 8,
          b: 7,
          br: 8,
          r: -9,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead2: {
    xPos: [0, 25, 51, 77, 103, 128, 154, 180, 206, 232, 258, 286, 312, 339, 366],
    widths: [25, 26, 26, 26, 25, 26, 26, 26, 26, 26, 28, 26, 27, 27, 27],
    heights: [28, 29, 30, 29, 29, 28, 30, 29, 26, 28, 28, 30, 30, 23, 30],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -5
        },
        y: {
          f: -12,
          fl: -10,
          l: -10,
          bl: 6,
          b: 5,
          br: 6,
          r: -10,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead3: {
    xPos: [0, 25, 51, 77, 103, 128, 156, 184, 214, 240, 267, 295, 323, 352, 380],
    widths: [25, 26, 26, 26, 25, 28, 28, 30, 26, 27, 28, 28, 29, 28, 26],
    heights: [29, 29, 30, 31, 31, 28, 26, 28, 24, 30, 30, 29, 29, 22, 27],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -5
        },
        y: {
          f: -11,
          fl: -10,
          l: -10,
          bl: 7,
          b: 6,
          br: 7,
          r: -10,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead4: {
    xPos: [0, 25, 51, 78, 104, 129, 155, 182, 211, 239, 265, 292, 321, 351, 384],
    widths: [25, 26, 27, 26, 25, 26, 27, 29, 28, 26, 27, 29, 30, 33, 27],
    heights: [33, 31, 37, 39, 40, 30, 28, 39, 26, 30, 30, 39, 38, 23, 33],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -5
        },
        y: {
          f: -9,
          fl: -9,
          l: -6,
          bl: 11,
          b: 10,
          br: 11,
          r: -6,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead5: {
    xPos: [0, 25, 51, 77, 102, 127, 156, 183, 210, 230, 258, 288, 315, 343, 368],
    widths: [25, 26, 26, 25, 25, 29, 27, 27, 20, 28, 30, 27, 28, 25, 25],
    heights: [28, 29, 30, 30, 32, 29, 27, 27, 25, 27, 27, 29, 29, 23, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 3,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -12,
          fl: -10,
          l: -10,
          bl: 6,
          b: 6,
          br: 6,
          r: -10,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead6: {
    xPos: [0, 25, 51, 77, 102, 127, 155, 186, 219, 249, 277, 307, 337, 368, 398],
    widths: [25, 26, 26, 25, 25, 28, 31, 33, 30, 28, 30, 30, 31, 30, 26],
    heights: [31, 32, 36, 39, 40, 30, 29, 36, 26, 28, 27, 39, 38, 23, 30],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 3,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -5
        },
        y: {
          f: -10,
          fl: -9,
          l: -7,
          bl: 11,
          b: 10,
          br: 11,
          r: -7,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead7: {
    xPos: [0, 27, 54, 81, 107, 132, 158, 184, 216, 238, 264, 293, 319, 347, 374],
    widths: [27, 27, 27, 26, 25, 26, 26, 32, 22, 26, 29, 26, 28, 27, 25],
    heights: [29, 29, 30, 32, 32, 27, 28, 31, 25, 26, 26, 32, 32, 23, 26],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -11,
          fl: -10,
          l: -10,
          bl: 7,
          b: 6,
          br: 7,
          r: -10,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead8: {
    xPos: [0, 25, 51, 77, 102, 127, 156, 183, 210, 230, 258, 288, 315, 343, 372],
    widths: [25, 26, 26, 25, 25, 29, 27, 27, 20, 28, 30, 27, 28, 29, 25],
    heights: [31, 32, 31, 31, 32, 30, 28, 27, 25, 27, 27, 29, 29, 23, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 3,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -10,
          fl: -9,
          l: -9,
          bl: 7,
          b: 6,
          br: 7,
          r: -9,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead9: {
    xPos: [0, 25, 51, 79, 106, 131, 158, 188, 223, 241, 272, 303, 337, 370, 397],
    widths: [25, 26, 28, 27, 25, 27, 30, 35, 18, 31, 31, 34, 33, 27, 24],
    heights: [28, 28, 38, 41, 41, 26, 26, 31, 24, 26, 26, 28, 27, 23, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -12,
          fl: -11,
          l: -6,
          bl: 12,
          b: 11,
          br: 12,
          r: -6,
          fr: -11
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead10: {
    xPos: [0, 27, 54, 81, 106, 133, 162, 192, 223, 255, 287, 317, 347, 377, 406],
    widths: [27, 27, 27, 25, 27, 29, 30, 31, 32, 32, 30, 30, 30, 29, 27],
    heights: [37, 36, 39, 40, 42, 29, 29, 33, 25, 31, 29, 37, 37, 26, 27],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -12,
          b: -11,
          br: 12,
          r: -4,
          fr: -4
        },
        y: {
          f: -7,
          fl: -7,
          l: -5,
          bl: 11,
          b: 11,
          br: 11,
          r: -5,
          fr: -7
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead11: {
    xPos: [0, 27, 54, 83, 109, 134, 160, 183, 218, 247, 278, 310, 342, 378, 404],
    widths: [27, 27, 29, 26, 25, 26, 23, 35, 29, 31, 32, 32, 36, 26, 26],
    heights: [28, 27, 46, 48, 48, 27, 30, 32, 24, 26, 26, 41, 37, 23, 26],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 5,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -3
        },
        y: {
          f: -12,
          fl: -11,
          l: -2,
          bl: 15,
          b: 14,
          br: 15,
          r: -2,
          fr: -11
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead12: {
    xPos: [0, 30, 59, 86, 116, 146, 174, 202, 235, 264, 294, 325, 359, 394, 423],
    widths: [30, 29, 27, 30, 30, 28, 28, 33, 29, 30, 31, 34, 35, 29, 27],
    heights: [32, 32, 40, 42, 45, 30, 25, 33, 26, 28, 28, 41, 41, 23, 29],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -12,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -10,
          fl: -9,
          l: -5,
          bl: 12,
          b: 13,
          br: 12,
          r: -5,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead13: {
    xPos: [0, 27, 55, 84, 112, 139, 169, 198, 234, 266, 293, 320, 350, 381, 410],
    widths: [27, 28, 29, 28, 27, 30, 29, 36, 32, 27, 27, 30, 31, 29, 27],
    heights: [31, 31, 46, 47, 49, 30, 29, 35, 26, 28, 27, 47, 47, 23, 29],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -10,
          fl: -9,
          l: -2,
          bl: 15,
          b: 15,
          br: 15,
          r: -2,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead14: {
    xPos: [0, 31, 62, 91, 122, 154, 184, 216, 251, 271, 302, 332, 364, 396, 425],
    widths: [31, 31, 29, 31, 32, 30, 32, 35, 20, 31, 30, 32, 32, 29, 27],
    heights: [28, 29, 34, 36, 37, 29, 28, 32, 28, 29, 28, 35, 35, 24, 30],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -12,
          fl: -10,
          l: -8,
          bl: 9,
          b: 9,
          br: 9,
          r: -8,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead15: {
    xPos: [0, 31, 61, 89, 119, 150, 180, 210, 240, 270, 300, 330, 360, 390, 421],
    widths: [31, 30, 28, 30, 31, 30, 30, 30, 30, 30, 30, 30, 30, 31, 29],
    heights: [28, 29, 30, 30, 30, 29, 28, 30, 28, 29, 29, 30, 30, 22, 28],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -11,
          b: -11,
          br: 10,
          r: -6,
          fr: -5
        },
        y: {
          f: -12,
          fl: -10,
          l: -10,
          bl: 6,
          b: 5,
          br: 6,
          r: -10,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead16: {
    xPos: [0, 30, 59, 87, 114, 142, 172, 204, 232, 263, 294, 324, 352, 379, 409],
    widths: [30, 29, 28, 27, 28, 30, 32, 28, 31, 31, 30, 28, 27, 30, 26],
    heights: [31, 31, 31, 32, 33, 30, 27, 28, 29, 30, 30, 27, 28, 25, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -11,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -9,
          fl: -8,
          l: -8,
          bl: 8,
          b: 8,
          br: 8,
          r: -8,
          fr: -8
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead17: {
    xPos: [0, 30, 61, 92, 122, 151, 180, 211, 240, 262, 292, 323, 352, 382, 411],
    widths: [30, 31, 31, 30, 29, 29, 31, 29, 22, 30, 31, 29, 30, 29, 24],
    heights: [29, 29, 30, 32, 30, 28, 29, 29, 25, 28, 28, 30, 31, 22, 28],
    anchorPoints: {
      normal: {
        x: {
          f: -1,
          fl: 4,
          l: 4,
          bl: -12,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -12,
          fl: -12,
          l: -12,
          bl: 5,
          b: 4,
          br: 5,
          r: -12,
          fr: -12
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead18: {
    xPos: [0, 27, 54, 81, 106, 131, 167, 204, 239, 269, 299, 333, 361, 393, 426],
    widths: [27, 27, 27, 25, 25, 36, 37, 35, 30, 30, 34, 28, 32, 33, 26],
    heights: [29, 30, 37, 39, 39, 30, 34, 28, 26, 28, 27, 38, 37, 25, 34],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -12,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -11,
          fl: -10,
          l: -5,
          bl: 11,
          b: 10,
          br: 11,
          r: -5,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead19: {
    xPos: [0, 25, 52, 78, 104, 129, 157, 188, 222, 258, 286, 316, 346, 378, 408],
    widths: [25, 27, 26, 26, 25, 28, 31, 34, 36, 28, 30, 30, 32, 30, 26],
    heights: [29, 29, 36, 38, 38, 29, 27, 39, 26, 27, 27, 38, 38, 23, 30],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -11,
          fl: -10,
          l: -7,
          bl: 10,
          b: 9,
          br: 10,
          r: -7,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead20: {
    xPos: [0, 31, 61, 89, 119, 149, 188, 224, 258, 294, 324, 357, 388, 418, 453],
    widths: [31, 30, 28, 30, 30, 39, 36, 34, 36, 30, 33, 31, 30, 35, 27],
    heights: [31, 32, 32, 32, 32, 32, 31, 29, 28, 29, 30, 33, 33, 25, 28],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 4,
          bl: -11,
          b: -11,
          br: 10,
          r: -5,
          fr: -4
        },
        y: {
          f: -13,
          fl: -14,
          l: -14,
          bl: 2,
          b: 2,
          br: 2,
          r: -14,
          fr: -14
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead21: {
    xPos: [0, 29, 57, 84, 111, 138, 166, 192, 223, 242, 273, 306, 337, 371, 401],
    widths: [29, 28, 27, 27, 27, 28, 26, 31, 19, 31, 33, 31, 34, 30, 27],
    heights: [28, 30, 33, 34, 35, 31, 29, 30, 26, 28, 27, 30, 30, 23, 26],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 4,
          bl: -12,
          b: -11,
          br: 12,
          r: -4,
          fr: -4
        },
        y: {
          f: -12,
          fl: -10,
          l: -8,
          bl: 8,
          b: 8,
          br: 8,
          r: -8,
          fr: -10
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead22: {
    xPos: [0, 27, 54, 80, 106, 131, 161, 186, 214, 233, 260, 290, 317, 346, 375],
    widths: [27, 27, 26, 26, 25, 30, 25, 28, 19, 27, 30, 27, 29, 29, 25],
    heights: [28, 28, 30, 32, 32, 30, 29, 28, 26, 28, 27, 31, 31, 23, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 3,
          bl: -12,
          b: -11,
          br: 11,
          r: -4,
          fr: -3
        },
        y: {
          f: -12,
          fl: -11,
          l: -10,
          bl: 7,
          b: 6,
          br: 7,
          r: -10,
          fr: -11
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead23: {
    xPos: [0, 27, 54, 81, 107, 132, 163, 196, 229, 258, 292, 331, 365, 398, 431],
    widths: [27, 27, 27, 26, 25, 31, 33, 33, 29, 34, 39, 34, 33, 33, 26],
    heights: [32, 31, 40, 41, 41, 35, 31, 33, 26, 31, 29, 37, 36, 23, 31],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -12,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -10,
          fl: -9,
          l: -5,
          bl: 12,
          b: 11,
          br: 12,
          r: -5,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead24: {
    xPos: [0, 27, 55, 82, 108, 133, 160, 186, 221, 250, 281, 313, 346, 380, 408],
    widths: [27, 28, 27, 26, 25, 27, 26, 35, 29, 31, 32, 33, 34, 28, 27],
    heights: [30, 31, 48, 50, 53, 30, 31, 30, 25, 29, 28, 41, 34, 23, 27],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 3,
          l: 4,
          bl: -12,
          b: -11,
          br: 11,
          r: -4,
          fr: -4
        },
        y: {
          f: -11,
          fl: -9,
          l: -1,
          bl: 16,
          b: 17,
          br: 16,
          r: -1,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead25: {
    xPos: [0, 25, 53, 81, 107, 132, 160, 187, 214, 238, 266, 294, 320, 346, 374],
    widths: [25, 28, 28, 26, 25, 28, 27, 27, 24, 28, 28, 26, 26, 28, 27],
    heights: [30, 31, 33, 35, 35, 30, 31, 29, 26, 30, 30, 30, 29, 23, 24],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -12,
          b: -11,
          br: 11,
          r: -6,
          fr: -5
        },
        y: {
          f: -11,
          fl: -9,
          l: -8,
          bl: 9,
          b: 8,
          br: 9,
          r: -8,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead26: {
    xPos: [0, 25, 52, 79, 105, 130, 157, 182, 211, 239, 266, 294, 321, 350, 379],
    widths: [25, 27, 27, 26, 25, 27, 25, 29, 28, 27, 28, 27, 29, 29, 33],
    heights: [41, 41, 38, 36, 38, 38, 33, 31, 27, 36, 34, 32, 31, 30, 25],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -12,
          b: -10,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -5,
          fl: -4,
          l: -6,
          bl: 9,
          b: 9,
          br: 9,
          r: -6,
          fr: -4
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead27: {
    xPos: [0, 25, 52, 77, 103, 128, 161, 190, 223, 252, 279, 308, 337, 367, 400],
    widths: [25, 27, 25, 26, 25, 33, 29, 33, 29, 27, 29, 29, 30, 33, 27],
    heights: [32, 31, 38, 42, 43, 32, 27, 31, 26, 30, 30, 39, 39, 23, 33],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 5,
          bl: -13,
          b: -11,
          br: 11,
          r: -5,
          fr: -4
        },
        y: {
          f: -10,
          fl: -9,
          l: -6,
          bl: 12,
          b: 12,
          br: 12,
          r: -6,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  },
  fHead28: {
    xPos: [0, 29, 58, 84, 113, 142, 173, 199, 229, 258, 286, 314, 344, 375, 406],
    widths: [29, 29, 26, 29, 29, 31, 26, 30, 29, 28, 28, 30, 31, 31, 26],
    heights: [30, 31, 32, 32, 34, 29, 27, 31, 26, 30, 29, 31, 32, 23, 29],
    anchorPoints: {
      normal: {
        x: {
          f: 0,
          fl: 4,
          l: 4,
          bl: -12,
          b: -11,
          br: 12,
          r: -5,
          fr: -4
        },
        y: {
          f: -11,
          fl: -9,
          l: -9,
          bl: 7,
          b: 7,
          br: 7,
          r: -9,
          fr: -9
        }
      },
      pick: {
        x: {
          fl: -2,
          bl: -2,
          br: 1,
          fr: 2
        },
        y: {
          fl: 15,
          bl: 14,
          br: 14,
          fr: 14
        }
      },
      damaged: {
        x: {
          fl: -13,
          bl: -7,
          br: 5,
          fr: 12
        },
        y: {
          fl: 6,
          bl: 14,
          br: 13,
          fr: 6
        }
      },
      dead: {
        x: {
          fl: -13,
          bl: -10,
          br: 11,
          fr: 13
        },
        y: {
          fl: -2,
          bl: -3,
          br: -3,
          fr: -2
        }
      }
    }
  }
};

/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = {
  fClass: [0, 86, 181, 264, 343, 419, 497, 581, 680, 760, 843, 930, 1009, 1089, 1169, 1256, 1330, 1406, 1484, 1567, 1652, 1729, 1831, 1933, 2005, 2085, 2169, 2247, 2332, 2413, 2487, 2569, 2650, 2736, 2818, 2898, 2977, 3055, 3140, 3217, 3297, 3373, 3451, 3538, 3617, 3702, 3782, 3864, 3946, 4023, 4110, 4203],
  fHead: [0, 33, 65, 95, 126, 166, 198, 238, 270, 302, 343, 385, 433, 478, 527, 564, 594, 627, 659, 698, 737, 770, 805, 837, 878, 931, 966, 1007, 1050]
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./fAcolyte": 3,
	"./fAcolyte.js": 3,
	"./fAlchemist": 4,
	"./fAlchemist.js": 4,
	"./fArcBishop": 5,
	"./fArcBishop.js": 5,
	"./fArcher": 6,
	"./fArcher.js": 6,
	"./fAssassin": 7,
	"./fAssassin.js": 7,
	"./fAssassinCross": 8,
	"./fAssassinCross.js": 8,
	"./fBiochemist": 9,
	"./fBiochemist.js": 9,
	"./fBlacksmith": 10,
	"./fBlacksmith.js": 10,
	"./fChampion": 11,
	"./fChampion.js": 11,
	"./fCrusader": 12,
	"./fCrusader.js": 12,
	"./fDancer": 13,
	"./fDancer.js": 13,
	"./fGeneticist": 14,
	"./fGeneticist.js": 14,
	"./fGuillotineCross": 15,
	"./fGuillotineCross.js": 15,
	"./fGunslinger": 16,
	"./fGunslinger.js": 16,
	"./fGypsy": 17,
	"./fGypsy.js": 17,
	"./fHighPriest": 18,
	"./fHighPriest.js": 18,
	"./fHighWizard": 19,
	"./fHighWizard.js": 19,
	"./fHunter": 20,
	"./fHunter.js": 20,
	"./fKnight": 21,
	"./fKnight.js": 21,
	"./fLordKnight": 22,
	"./fLordKnight.js": 22,
	"./fMage": 23,
	"./fMage.js": 23,
	"./fMasterSmith": 24,
	"./fMasterSmith.js": 24,
	"./fMechanic": 25,
	"./fMechanic.js": 25,
	"./fMerchant": 26,
	"./fMerchant.js": 26,
	"./fMonk": 27,
	"./fMonk.js": 27,
	"./fNinja": 28,
	"./fNinja.js": 28,
	"./fNovice": 29,
	"./fNovice.js": 29,
	"./fOboro": 30,
	"./fOboro.js": 30,
	"./fPaladin": 31,
	"./fPaladin.js": 31,
	"./fPriest": 32,
	"./fPriest.js": 32,
	"./fRanger": 33,
	"./fRanger.js": 33,
	"./fRebellion": 34,
	"./fRebellion.js": 34,
	"./fRogue": 35,
	"./fRogue.js": 35,
	"./fRoyalGuard": 36,
	"./fRoyalGuard.js": 36,
	"./fRuneKnight": 37,
	"./fRuneKnight.js": 37,
	"./fSage": 38,
	"./fSage.js": 38,
	"./fScholar": 39,
	"./fScholar.js": 39,
	"./fShadowChaser": 40,
	"./fShadowChaser.js": 40,
	"./fSniper": 41,
	"./fSniper.js": 41,
	"./fSorcerer": 42,
	"./fSorcerer.js": 42,
	"./fSoulLinker": 43,
	"./fSoulLinker.js": 43,
	"./fSpecial1": 44,
	"./fSpecial1.js": 44,
	"./fStalker": 45,
	"./fStalker.js": 45,
	"./fSuperNovice": 46,
	"./fSuperNovice.js": 46,
	"./fSura": 47,
	"./fSura.js": 47,
	"./fSwordsman": 48,
	"./fSwordsman.js": 48,
	"./fTaekwonKid": 49,
	"./fTaekwonKid.js": 49,
	"./fTaekwonMaster": 50,
	"./fTaekwonMaster.js": 50,
	"./fThief": 51,
	"./fThief.js": 51,
	"./fWanderer": 52,
	"./fWanderer.js": 52,
	"./fWarlock": 53,
	"./fWarlock.js": 53,
	"./fWizard": 54,
	"./fWizard.js": 54
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 74;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = {
  xPos: [0, 800, 1280, 2030, 2780, 3900, 5234, 6514, 9714, 10364, 11564, 13164, 15084, 16174, 17774, 19694, 21614, 22894, 24116, 24916, 26836],
  widths: [800, 480, 750, 750, 1120, 1334, 1280, 3200, 650, 1200, 1600, 1920, 1090, 1600, 1920, 1920, 1280, 1222, 800, 1920, 1244],
  heights: [1026, 800, 1030, 1020, 700, 1000, 1024, 2400, 458, 846, 1200, 1200, 1000, 874, 1440, 1080, 720, 700, 600, 1200, 700]
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = __webpack_require__(0);

var directions = ["f", "fl", "l", "bl", "b", "br", "r", "fr"];
var allIndex = 0,
    actionIndex = 0;
var classes = {
  fSpecial1: "GM_1 (F)",
  fNovice: "Novice (F)",
  fMonk: "Monk (F)",
  fNinja: "Ninja (F)",
  fAlchemist: "Alchemist (F)",
  fOboro: "Oboro (F)",
  fRebellion: "Rebellion (F)",
  fRoyalGuard: "RoyalGuard (F)",
  fGunslinger: "Gunslinger (F)",
  fSwordsman: "Swordsman (F)",
  fCrusader: "Crusader (F)",
  fTaekwonKid: "TaekwonKid (F)",
  fArcher: "Archer (F)",
  fThief: "Thief (F)",
  fRanger: "Ranger (F)",
  fLordKnight: "LordKnight (F)",
  fMechanic: "Mechanic (F)",
  fBlacksmith: "Blacksmith (F)",
  fTaekwonMaster: "TaekwonMaster (F)",
  fAssassin: "Assassin (F)",
  fShadowChaser: "ShadowChaser (F)",
  fArcBishop: "ArcBishop (F)",
  fAcolyte: "Acolyte (F)",
  fPriest: "Priest (F)",
  fSage: "Sage (F)",
  fHunter: "Hunter (F)",
  fHighPriest: "HighPriest (F)",
  fSura: "Sura (F)",
  fDancer: "Dancer (F)",
  fGuillotineCross: "GuillotineCross (F)",
  fBiochemist: "Biochemist (F)",
  fWizard: "Wizard (F)",
  fMage: "Mage (F)",
  fWanderer: "Wanderer (F)",
  fWarlock: "Warlock (F)",
  fKnight: "Knight (F)",
  fMerchant: "Merchant (F)",
  fRuneKnight: "RuneKnight (F)",
  fRogue: "Rogue (F)",
  fSoulLinker: "SoulLinker (F)",
  fSorcerer: "Sorcerer (F)",
  fSuperNovice: "SuperNovice (F)",
  fSniper: "Sniper (F)",
  fStalker: "Stalker (F)",
  fAssassinCross: "AssassinCross (F)",
  fGeneticist: "Geneticist (F)",
  fPaladin: "Paladin (F)",
  fGypsy: "Gypsy (F)",
  fScholar: "Scholar (F)",
  fHighWizard: "HighWizard (F)",
  fMasterSmith: "MasterSmith (F)",
  fChampion: "Champion (F)"
};
var actions = ["idle", "walk", "sit", "pick", "standby", "attack1", "damaged", "dead", "attack2", "attack3", "cast"];
var heads = ["fHead0", "fHead1", "fHead2", "fHead3", "fHead4", "fHead5", "fHead6", "fHead7", "fHead8", "fHead9", "fHead10", "fHead11", "fHead12", "fHead13", "fHead14", "fHead15", "fHead16", "fHead17", "fHead18", "fHead19", "fHead20", "fHead21", "fHead22", "fHead23", "fHead24", "fHead25", "fHead26", "fHead27", "fHead28"];

module.exports = /*#__PURE__*/function (_React$Component) {
  _inherits(AnimationTESTER, _React$Component);

  var _super = _createSuper(AnimationTESTER);

  function AnimationTESTER(props) {
    var _this;

    _classCallCheck(this, AnimationTESTER);

    _this = _super.call(this, props);
    _this._rotateLeft = _this._rotateLeft.bind(_assertThisInitialized(_this));
    _this._rotateRight = _this._rotateRight.bind(_assertThisInitialized(_this));
    _this._keyPressEvt = _this._keyPressEvt.bind(_assertThisInitialized(_this));
    _this._selectOnChange = _this._selectOnChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(AnimationTESTER, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("keypress", this._keyPressEvt);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      console.log("WILL UNMOUNT");
      window.removeEventListener("keypress", this._keyPressEvt);
    }
  }, {
    key: "_keyPressEvt",
    value: function _keyPressEvt(e) {
      console.log(e.keyCode);
      e.preventDefault();

      switch (e.keyCode) {
        //a
        case 97:
          this._rotateLeft();

          break;
        //d

        case 100:
          this._rotateRight();

          break;
        //s

        case 115:
          actionIndex = actionIndex + 1 >= actions.length ? 0 : actionIndex + 1;
          document.querySelector("#actionSelect").value = actions[actionIndex];

          this._selectOnChange();

          break;
        //w

        case 119:
          actionIndex = actionIndex - 1 < 0 ? actions.length - 1 : actionIndex - 1;
          document.querySelector("#actionSelect").value = actions[actionIndex];

          this._selectOnChange();

          break;
        //b

        case 98:
          this.props.worker.postMessage({
            type: "test_print"
          });
          break;

        case 114:
          this.props.worker.postMessage({
            type: "test_head_up"
          });
          break;

        case 102:
          this.props.worker.postMessage({
            type: "test_head_down"
          });
          break;

        case 101:
          this.props.worker.postMessage({
            type: "test_show_ref_head"
          });
          break;

        case 99:
          this.props.worker.postMessage({
            type: "test_head_right"
          });
          break;

        case 122:
          this.props.worker.postMessage({
            type: "test_head_left"
          });
          break;
      }
    }
  }, {
    key: "_selectOnChange",
    value: function _selectOnChange(e) {
      this.props.worker.postMessage({
        type: "test_act",
        act: document.querySelector("#actionSelect").value
      });
    }
  }, {
    key: "_rotateLeft",
    value: function _rotateLeft() {
      if (allIndex >= directions.length - 1) {
        allIndex = 0;
      } else {
        allIndex++;
      }

      this.props.worker.postMessage({
        type: "test_rotate",
        dir: directions[allIndex]
      });
    }
  }, {
    key: "_rotateRight",
    value: function _rotateRight() {
      if (allIndex <= 0) {
        allIndex = 7;
      } else {
        allIndex--;
      }

      this.props.worker.postMessage({
        type: "test_rotate_back",
        dir: directions[allIndex]
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("div", {
        id: "testWindow"
      }, /*#__PURE__*/React.createElement("canvas", {
        id: "mainCanvas"
      }), /*#__PURE__*/React.createElement("ul", {
        style: {
          position: "fixed",
          left: "0px",
          top: "0px",
          color: "white",
          backgroundColor: "black"
        }
      }, /*#__PURE__*/React.createElement("li", null, "W/S= Change Action"), /*#__PURE__*/React.createElement("li", null, "A/D= Rotate Left/Right")), /*#__PURE__*/React.createElement("div", {
        id: "testControls"
      }, /*#__PURE__*/React.createElement("select", {
        id: "actionSelect",
        onChange: this._selectOnChange
      }, actions.map(function (x, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: x
        }, x);
      })), /*#__PURE__*/React.createElement("select", {
        onChange: function onChange(e) {
          _this2.props.worker.postMessage({
            type: "test_class",
            jobclass: e.target.value
          });
        }
      }, Object.keys(classes).map(function (prop, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: prop
        }, classes[prop]);
      })), /*#__PURE__*/React.createElement("select", {
        onChange: function onChange(e) {
          _this2.props.worker.postMessage({
            type: "test_head",
            head: e.target.value
          });
        }
      }, heads.map(function (x, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: x
        }, x);
      })), /*#__PURE__*/React.createElement("button", {
        onClick: this._rotateLeft
      }, "ROTATE LEFT"), /*#__PURE__*/React.createElement("button", {
        onClick: this._rotateRight
      }, "ROTATE RIGHT"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props.worker.postMessage({
            type: "test_head_up"
          });
        }
      }, "Head Up [r]"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props.worker.postMessage({
            type: "test_head_left"
          });
        }
      }, "Head Left [z]"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props.worker.postMessage({
            type: "test_head_right"
          });
        }
      }, "Head Right [c]"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props.worker.postMessage({
            type: "test_head_down"
          });
        }
      }, "Head Down [f]"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          {
            /*this.animationEngine.terminate();*/
          }
        }
      }, "PAUSE"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          {
            /*this.animationEngine.initialize();*/
          }
        }
      }, "RESUME"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props.worker.postMessage({
            type: "test_print_y"
          });
        }
      }, "PRINT! [p]"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this2.props._toggleVisibility("Login");
        }
      }, "Back")));
    }
  }]);

  return AnimationTESTER;
}(React.Component);

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = __webpack_require__(0);

var Versioning = __webpack_require__(78);

var Group1 = __webpack_require__(79);

var Group2 = __webpack_require__(80);

var capturer = new CCapture({
  format: "webm",
  framerate: 60,
  verbose: false
});

var cellWidth = 32,
    cellHeight = 32,
    charCellWidth = cellWidth / 2,
    charCellHeight = cellHeight / 2,
    cols,
    rows,
    selX,
    selY,
    selW,
    selH,
    scX = 0,
    scY = 0,
    //DOMS
mapBase1,
    mapBase2,
    mapBase3,
    mapShadowMid1,
    mapMid1,
    mapAnimate,
    mapShadowMid2,
    mapMid2,
    mapShadowTop,
    mapTop,
    frameSelect,
    frameSelectAnimation,
    mapClickCatcher,
    captureCanvas,
    mapScaler,
    mapCont,
    tilesCont,
    coordinates,
    //
scalerHeight,
    durationCounter = 0,
    renderXY = [],
    pathXY = [],
    getPathCoordinate = function getPathCoordinate() {
  return Math.round(pathXY[0] / charCellWidth) + "_" + Math.round(pathXY[1] / charCellHeight);
},
    getRenderCoordinate = function getRenderCoordinate() {
  return renderXY[0] / cellWidth + "_" + renderXY[1] / cellHeight;
};

var saveX, saveY;
var mapCellArr = {
  mapBase1: {},
  mapBase2: {},
  mapBase3: {},
  mapShadowMid1: {},
  mapMid1: {},
  mapShadowMid2: {},
  mapMid2: {},
  mapShadowTop: {},
  mapTop: {}
};
var mapPathArr = {};
var stash = null;

var MapMaker = /*#__PURE__*/function (_React$Component) {
  _inherits(MapMaker, _React$Component);

  var _super = _createSuper(MapMaker);

  function MapMaker(props) {
    var _this;

    _classCallCheck(this, MapMaker);

    _this = _super.call(this, props);
    _this.state = {
      showFileOptions: true,
      showOpsChildren: "main",
      showRenderControls: true,
      errormessage: "",
      toggleMapGrid: true,
      mapList: "",
      selectedMap: "",
      stashName: "",
      mapName: "",
      changes: 0,
      isAnimationOn: false,
      mapAnimationArr: [],
      animationFrames: [],
      exFormat: "webm",
      fps: 15,
      cps: 15,
      ads: 1,
      //saved tile id before doing tilepick
      tileBeforeTilepick: null,
      //the id of current selected tileset
      showTile: "",
      //the <img/> element of selected tileset
      ref: "",
      layer: "mapBase1",
      //pathmode
      isThirds: false,
      z: [],
      z_: 0,
      ztart: null,
      zMult: 1,
      //tools
      erase: false,
      bucket: false,
      tilepick: false,
      //custom tilesets
      custom1: "",
      custom2: "",
      custom3: "",
      //history for redo undo, and action index to map on history
      history: [],
      actionIndex: -1,
      method: "",
      //layers stack preview
      layersStackPreview: [],
      lspToggle: true,
      //canvas resizing
      autoResize: false
    };
    _this._showFileOptions = _this._showFileOptions.bind(_assertThisInitialized(_this));
    _this._showChild = _this._showChild.bind(_assertThisInitialized(_this));
    _this._newMap = _this._newMap.bind(_assertThisInitialized(_this));
    _this._toggleMapGrid = _this._toggleMapGrid.bind(_assertThisInitialized(_this));
    _this._createNewStash = _this._createNewStash.bind(_assertThisInitialized(_this));
    _this._saveAs = _this._saveAs.bind(_assertThisInitialized(_this));
    _this._load = _this._load.bind(_assertThisInitialized(_this));
    _this._tilesetOnChange = _this._tilesetOnChange.bind(_assertThisInitialized(_this));
    _this._toggleAnimation = _this._toggleAnimation.bind(_assertThisInitialized(_this));
    _this._mapHistory = _this._mapHistory.bind(_assertThisInitialized(_this));
    _this._drawTimeTravel = _this._drawTimeTravel.bind(_assertThisInitialized(_this));
    _this._layerOnChange = _this._layerOnChange.bind(_assertThisInitialized(_this));
    _this._setStateCallback = _this._setStateCallback.bind(_assertThisInitialized(_this));
    _this._zoomFunction = _this._zoomFunction.bind(_assertThisInitialized(_this));
    _this._returnATileset = _this._returnATileset.bind(_assertThisInitialized(_this));
    _this._drawTile = _this._drawTile.bind(_assertThisInitialized(_this));
    _this._adjustFrameSize = _this._adjustFrameSize.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(MapMaker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      document.querySelector("#Group2").oncontextmenu = function (event) {
        event.preventDefault();
      }; //I injected a function to CCapture.all.min.js


      injectThis = function injectThis(type, data) {
        console.log("Triggering injected function..");

        switch (type) {
          case "done":
            _this2._showFileOptions();

            break;

          case "detail":
            var loadingDetails = document.querySelector("#loadingDetails");
            if (loadingDetails) loadingDetails.textContent = data;
            break;
        }
      };

      mapBase1 = document.querySelector("#mapBase1");
      mapBase2 = document.querySelector("#mapBase2");
      mapBase3 = document.querySelector("#mapBase3");
      mapShadowMid1 = document.querySelector("#mapShadowMid1");
      mapMid1 = document.querySelector("#mapMid1");
      mapShadowMid2 = document.querySelector("#mapShadowMid2");
      mapMid2 = document.querySelector("#mapMid2");
      mapAnimate = document.querySelector("#mapAnimate");
      mapShadowTop = document.querySelector("#mapShadowTop");
      mapTop = document.querySelector("#mapTop");
      frameSelect = document.querySelector("#frameSelect");
      frameSelectAnimation = document.querySelector("#frameSelectAnimation");
      mapClickCatcher = document.querySelector("#mapClickCatcher");
      captureCanvas = document.querySelector("#captureCanvas");
      mapScaler = document.querySelector("#mapScaler");
      mapCont = document.querySelector("#mapCont");
      tilesCont = document.querySelector("#tilesCont");
      coordinates = document.querySelector("#coordinates"); //ZOOM FUNCTION

      mapScaler.addEventListener("wheel", this._zoomFunction); //HOTKEYS

      window.addEventListener("keypress", function (e) {
        if (!_this2.state.showFileOptions) {
          console.log(e.keyCode);
          var thePath = mapPathArr[getPathCoordinate()];

          switch (e.keyCode) {
            //e == eraser button toggle
            case 101:
              _this2.setState(function (currState) {
                return {
                  erase: !currState.erase,
                  bucket: false,
                  tilepick: false
                };
              });

              break;
            //t == tilepicker button toggle

            case 116:
              _this2._toggleAnimation("tilepick");

              break;
            //b == bucket button toggle

            case 98:
              _this2._toggleAnimation("bucket");

              break;
            //g == toggle map grid

            case 103:
              _this2._toggleMapGrid();

              break;
            //a == animation button toggle

            case 97:
              _this2._toggleAnimation();

              break;
            //s == set the Z of a path by 1 cell

            case 115:
              if (mapPathArr[getPathCoordinate()]) {
                //if not active yet
                if (!_this2.state.ztart || _this2.state.zMult == 0.2) {
                  _this2.setState({
                    ztart: pathXY,
                    zMult: 1
                  });
                } else {
                  mapPathArr[getPathCoordinate()] = _this2.state.z;
                  var modHist = JSON.parse(JSON.stringify(_this2.state.history));
                  modHist.filter(function (x) {
                    return x.redo.arrSrc == "mapPathArr" && x.redo.prop == getPathCoordinate();
                  })[0].redo.val = _this2.state.z;

                  _this2.setState({
                    ztart: null,
                    history: modHist
                  });
                }
              }

              break;
            //d == set the Z of a path by 0.2 cell

            case 100:
              if (mapPathArr[getPathCoordinate()]) {
                //if not active yet
                if (!_this2.state.ztart || _this2.state.zMult == 1) {
                  _this2.setState({
                    ztart: pathXY,
                    zMult: 0.2
                  });
                } else {
                  mapPathArr[getPathCoordinate()] = _this2.state.z;

                  var _modHist = JSON.parse(JSON.stringify(_this2.state.history));

                  _modHist.filter(function (x) {
                    return x.redo.arrSrc == "mapPathArr" && x.redo.prop == getPathCoordinate();
                  })[0].redo.val = _this2.state.z;

                  _this2.setState({
                    ztart: null,
                    history: _modHist
                  });
                }
              }

              break;
            //f == switch from Z's of a path

            case 102:
              if (thePath) {
                _this2.setState(function (currState) {
                  return {
                    z_: currState.z_ >= currState.z.length - 1 ? 0 : currState.z_ + 1
                  };
                });
              }

              break;
            //x == delete a Z from a path

            case 120:
              if (thePath && thePath.length > 1) {
                thePath.splice(_this2.state.z_, 1);

                _this2.setState({
                  z: thePath
                });
              }

              break;
            //c == add a Z to a path

            case 99:
              if (thePath) {
                thePath.push(0);

                _this2.setState({
                  z: thePath
                });
              }

              break;
            //undo [z]

            case 122:
              _this2._mapHistory("undo");

              break;
            //redo[y]

            case 121:
              _this2._mapHistory("redo");

              break;
            //q == auto resize

            case 113:
              _this2.setState(function (currState) {
                return {
                  autoResize: currState.autoResize == "15% 300px 1fr" || currState.autoResize == "55% 300px 1fr" ? false : "15% 300px 1fr"
                };
              });

              break;
            //w == fullscreen canvas

            case 119:
              _this2.setState(function (currState) {
                return {
                  autoResize: currState.autoResize == "0px 0px 100%" ? false : "0px 0px 100%"
                };
              });

              break;
            //LAYERS SHORTCUT

            case 49:
              _this2._layerOnChange("mapBase1");

              break;

            case 50:
              _this2._layerOnChange("mapBase2");

              break;

            case 51:
              _this2._layerOnChange("mapBase3");

              break;

            case 52:
              _this2._layerOnChange("mapShadowMid1");

              break;

            case 53:
              _this2._layerOnChange("mapMid1");

              break;

            case 54:
              _this2._layerOnChange("mapShadowMid2");

              break;

            case 55:
              _this2._layerOnChange("mapMid2");

              break;

            case 56:
              _this2._layerOnChange("mapShadowTop");

              break;

            case 57:
              _this2._layerOnChange("mapTop");

              break;
          }
        }
      }); //================================================
      //==============MOUSE EVENTS ON MAP/TILES=========
      //================================================

      var attachment = false,
          lastPosition,
          position,
          difference;
      var ctx = frameSelect.getContext("2d"),
          ctx2 = mapClickCatcher.getContext("2d");
      var offX, offY;

      var frameSelectSquares = function frameSelectSquares() {
        if (_this2.state.isAnimationOn) {
          var len = _this2.state.animationFrames.length; //dont draw if frames are already 10

          if (len >= 10) return;
          var coloroyGbeef = ["#FF0000", "#FF00A2", "#C000FF", "#1800FF", "#007EFF", "#00FFE4", "#00FF60", "#48FF00", "#F0FF00", "#FF8400"];
          ctx.strokeStyle = coloroyGbeef[len];
        } else {
          ctx.strokeStyle = "red";
        }

        ctx.clearRect(0, 0, frameSelect.width, frameSelect.height);
        ctx.beginPath();
        ctx.rect(selX, selY, selW, selH);
        ctx.lineWidth = 5;
        ctx.stroke();
      }; //MOUSE DOWN


      var mDown = function mDown(e) {
        //drag
        if (e.buttons == 2) {
          attachment = true;
          lastPosition = [e.clientX, e.clientY];
        } //square


        if (e.buttons == 1 && e.target.id == "frameSelect") {
          offX = e.offsetX, offY = e.offsetY;
          selX = offX - offX % cellWidth;
          selY = offY - offY % cellHeight;
          saveX = selX;
          saveY = selY;
          selW = cellWidth;
          selH = cellHeight;

          _this2.setState(function (currState) {
            return {
              erase: false,
              //reset tiles after using tilepick
              ref: document.querySelector("#" + (currState.tileBeforeTilepick || currState.showTile)),
              showTile: currState.tileBeforeTilepick || currState.showTile,
              tileBeforeTilepick: null
            };
          });

          frameSelectSquares();
        }

        if (e.buttons == 1 && e.target.id == "mapClickCatcher") {
          e.target.style.cursor = !_this2.state.erase && e.buttons != 1 ? "grabbing" : !_this2.state.erase && e.buttons == 1 ? "grab" : "cell";

          _this2._drawTile(true);
        }
      }; //MOUSE MOVE


      var mMove = function mMove(e) {
        //drag/move tileset
        if (e.buttons == 2 && attachment == true) {
          position = [e.clientX, e.clientY];
          difference = [position[0] - lastPosition[0], position[1] - lastPosition[1]];
          var targetScroll;
          if (e.target.id == "frameSelect") targetScroll = tilesCont;

          if (targetScroll) {
            targetScroll.scrollLeft = targetScroll.scrollLeft - difference[0];
            targetScroll.scrollTop = targetScroll.scrollTop - difference[1];
            lastPosition = [e.clientX, e.clientY];
          } //TRY TRANSLATE MOVE ON CANVAS


          if (e.target.id == "mapClickCatcher") {
            var matches = mapScaler.style.transform.match(/(-)?(\d+)(\.)?(\d+)?/g);
            mapScaler.style.transform = "translate(".concat(parseInt(matches[0]) + difference[0], "px,").concat(parseInt(matches[1]) + difference[1], "px) scale(").concat(scX + 1, ",").concat(scY + 1, ")");
            lastPosition = [e.clientX, e.clientY];
          } //---------------------------------

        } //square on tileset


        if (e.buttons == 1 && e.target.id == "frameSelect") {
          offX = e.offsetX, offY = e.offsetY;
          var tempX = offX - selX,
              tempY = offY - selY;
          var operatorX = tempX >= 0 ? 1 : -1,
              operatorY = tempY >= 0 ? 1 : -1; //enable selecting square back and fort

          if (operatorX == -1) {
            selX = saveX + cellWidth;
          } else selX = saveX;

          if (operatorY == -1) {
            selY = saveY + cellHeight;
          } else selY = saveY;

          selW = tempX - tempX % cellWidth + cellWidth * operatorX;
          selH = tempY - tempY % cellHeight + cellHeight * operatorY;
          frameSelectSquares();
        } //mapClickCatcher square on mouse hover


        if (e.target.id == "mapClickCatcher") {
          e.target.style.cursor = _this2.state.tilepick ? "copy" : !_this2.state.erase && e.buttons != 1 ? "grabbing" : !_this2.state.erase && e.buttons == 1 ? "grab" : "cell";
          var oX = e.offsetX,
              oY = e.offsetY; //draw square function

          var strokeRect = function strokeRect(x, y, w, h) {
            ctx2.clearRect(0, 0, mapClickCatcher.width, mapClickCatcher.height);
            ctx2.beginPath();
            ctx2.rect(x, y, w, h);
            ctx2.strokeStyle = _this2.state.erase ? "white" : !_this2.state.showRenderControls ? "#7AFE70" : _this2.state.isAnimationOn ? "blue" : _this2.state.tilepick ? "#DE15DE" : "red";
            ctx2.lineWidth = 2;
            ctx2.stroke();
          }; //fillRect for path


          var fillRect = function fillRect(x, y, w, h) {
            ctx2.beginPath();
            ctx2.fillStyle = "red";
            ctx2.globalAlpha = 0.5;
            ctx2.fillRect(x, y, w, h);
          }; //pathXY


          if (!_this2.state.showRenderControls) {
            //the main setter of pathXY coordinates
            var adderWidth = _this2.state.isThirds ? 0 : charCellWidth / 2,
                adderHeight = _this2.state.isThirds ? 0 : charCellHeight / 2;
            var x = Math.floor((oX + adderWidth) / charCellWidth) * charCellWidth - adderWidth,
                y = Math.floor((oY + adderHeight) / charCellHeight) * charCellHeight - adderHeight; //if not setting the Z

            if (!_this2.state.ztart) {
              if (pathXY[0] != x || pathXY[1] != y) {
                //main pathXY setter
                pathXY = [x, y];
                var coords = getPathCoordinate(); //the green square

                strokeRect(pathXY[0], pathXY[1], charCellWidth, charCellHeight);
                var isAPath = mapPathArr[coords]; //if path, draw the red squares

                if (isAPath) {
                  isAPath.map(function (x, i) {
                    fillRect(pathXY[0], pathXY[1] - isAPath[i] * charCellHeight, charCellWidth, charCellHeight);
                  });
                }

                _this2.setState({
                  //z to update the list
                  z: isAPath,
                  //z_=0 to reset the selection
                  z_: 0
                });

                coordinates.textContent = "_PATH_XY:[".concat(coords, "]");
              } else return;
            } //else if setting the Z
            else {
                //the green square
                strokeRect(_this2.state.ztart[0], _this2.state.ztart[1], charCellWidth, charCellHeight);
                var yMult = Math.floor(oY / (charCellHeight * _this2.state.zMult)) * (charCellHeight * _this2.state.zMult) - adderHeight; //set the Z based on mouse Y

                var z = _this2.state.z;
                z[_this2.state.z_] = (_this2.state.ztart[1] / charCellHeight - yMult / charCellHeight).toFixed(1);
                if (z[_this2.state.z_] == -0.0) z[_this2.state.z_] = "0.0"; //put that in state

                _this2.setState({
                  z: z
                }); //draw all the red sqaures of each z's


                z.map(function (zEntry, i) {
                  fillRect(_this2.state.ztart[0], _this2.state.ztart[1] - z[i] * charCellHeight, charCellWidth, charCellHeight);
                });
              }
          } //renderXY
          else {
              var _x = Math.floor(oX / cellWidth) * cellWidth,
                  _y = Math.floor(oY / cellHeight) * cellHeight;

              if (renderXY[0] != _x || renderXY[1] != _y) {
                renderXY = [_x, _y];

                var _coords = getRenderCoordinate();

                if (_this2.state.erase) {
                  strokeRect(renderXY[0], renderXY[1], cellWidth, cellHeight);
                } else {
                  strokeRect(renderXY[0], renderXY[1], selW, selH);
                } //the layers stack preview function


                _this2.setState({
                  layersStackPreview: Object.keys(mapCellArr).map(function (l) {
                    return mapCellArr[l][_coords];
                  })
                });

                coordinates.textContent = "_RENDER_XY:[".concat(_coords, "]");
              } else return;
            } //PAINT TILE


          if (e.buttons == 1) {
            _this2._drawTile(false);
          }
        }
      }; //MOUSE UP


      var mUp = function mUp(e) {
        attachment = false;

        if (_this2.state.isAnimationOn && e.target.id == "frameSelect" && e.button == 0) {
          //if mouseup, push data to this.state.animationFrames
          var _ctx = frameSelectAnimation.getContext("2d");

          _ctx.drawImage(frameSelect, 0, 0, frameSelect.width, frameSelect.height);

          if (_this2.state.animationFrames.length < 7) {
            _this2.setState(function (currState) {
              return {
                animationFrames: currState.animationFrames.concat({
                  sx: selX,
                  sy: selY,
                  w: selW,
                  h: selH,
                  tileset: currState.showTile
                })
              };
            });
          }
        }

        if (e.target.id == "mapClickCatcher") {
          if (e.button == 0 && _this2.state.tilepick) {
            _this2.setState(function (currState) {
              return {
                tilepick: false
              };
            });
          } else if (!_this2.state.tilepick) {
            e.target.style.cursor = !_this2.state.erase ? "grabbing" : "cell";
          }
        }
      }; //AND NOW IT'S TIME TO ATTACH THESE EVENTS!!


      tilesCont.addEventListener("mousedown", mDown);
      tilesCont.addEventListener("mousemove", mMove);
      tilesCont.addEventListener("mouseup", mUp);
      mapCont.addEventListener("mousedown", mDown);
      mapCont.addEventListener("mousemove", mMove);
      mapCont.addEventListener("mouseup", mUp); //================AUTO RESIZE CANVAS=========

      var G2 = document.querySelector("#Group2");
      var s1 = document.querySelector("#G2s1");
      s1.addEventListener("mousedown", function () {
        if (_this2.state.autoResize == "15% 300px 1fr") _this2.setState({
          autoResize: "55% 300px 1fr"
        });
      });
      var s3 = document.querySelector("#G2s3");
      s3.addEventListener("mousedown", function () {
        if (_this2.state.autoResize == "55% 300px 1fr") _this2.setState({
          autoResize: "15% 300px 1fr"
        });
      }); //================DRAW FUNCTIONS=============
      //drawing layer canvas

      var getLayer = function getLayer() {
        return document.querySelector("#" + _this2.state.layer).getContext("2d");
      }; //char grid layer canvas


      var ctx4 = document.querySelector("#charGrid").getContext("2d");

      this.drawPath = function (x, y) {
        ctx4.globalAlpha = 0.5;
        ctx4.fillStyle = "blue";
        ctx4.fillRect(Math.round(x) + 1, Math.round(y) + 1, Math.floor(charCellWidth - 2), Math.floor(charCellHeight - 2));
      };

      this.erasePath = function (x, y) {
        ctx4.clearRect(Math.round(x) + 1, Math.round(y) + 1, Math.floor(charCellWidth - 2), Math.floor(charCellHeight - 2));
      };

      this.drawRender = function (ref, sx, sy, sw, sh, rx, ry, rw, rh, layer) {
        var ctx3 = layer ? document.querySelector("#" + layer).getContext("2d") : getLayer();
        ctx3.clearRect(rx, ry, rw, rh);
        ctx3.drawImage(ref, sx, sy, sw, sh, rx, ry, rw, rh, layer);
      };

      this.eraseRender = function (x, y, layer) {
        var ctx3 = layer ? document.querySelector("#" + layer).getContext("2d") : getLayer();
        ctx3.clearRect(x, y, cellWidth, cellHeight);
      }; //================================================
      //================================================


      this._mapAnimation();
    } // COMPONENTDIDMOUT ABOVE ------------------------------

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.actionIndex != this.state.actionIndex) {
        this.state.method && this._drawTimeTravel(this.state.method);
      }

      if ((prevState.changes != this.state.changes || JSON.stringify(prevState.layersStackPreview) != JSON.stringify(this.state.layersStackPreview)) && this.state.showRenderControls) {
        this.state.layersStackPreview.map(function (x, i) {
          var ctx = document.querySelector("#lsp_" + i).getContext("2d");
          ctx.clearRect(0, 0, cellWidth, cellHeight);

          if (x) {
            var ref = document.querySelector("#" + x[2]);
            ctx.drawImage(ref, x[0], x[1], cellWidth, cellHeight, 0, 0, cellWidth, cellHeight);
          }
        });
      }
    }
  }, {
    key: "_setStateCallback",
    value: function _setStateCallback(value) {
      this.setState(value);
    }
  }, {
    key: "_zoomFunction",
    value: function _zoomFunction(e) {
      scX = parseFloat(scX);
      scY = parseFloat(scY);
      var adj = 1,
          deductX = 0,
          deductY = 0;

      if (e) {
        e.preventDefault();

        var _ref = e.deltaY < 0 ? [scX + 1, scY + 1] : [scX - 1, scY - 1];

        var _ref2 = _slicedToArray(_ref, 2);

        scX = _ref2[0];
        scY = _ref2[1];
        //scale zoom associated with pointer position
        console.log("BEFORE: " + scX);

        if (scX >= -1 && scX <= 7) {
          var mapScalerSize = [parseInt(mapScaler.style.width), parseInt(mapScaler.style.height)];
          var divider = scX == 0.5 || scX == -1 ? 0.5 : 1;
          deductX = (mapScalerSize[0] / 2 - e.offsetX) * divider;
          deductY = (mapScalerSize[1] / 2 - e.offsetY) * divider;
          if (e.deltaY > 0) adj = -1;
        } //--------------------------------------------
        //min max


        if (scX < -0.5) {
          scX = -0.5;
          scY = -0.5;
        }

        if (scX == 0.5) {
          scX = 0;
          scY = 0;
        } //when increment from very bottom, readjust


        if (scX > 7) {
          scX = 7;
          scY = 7;
        }

        document.querySelector("#zoomValue").textContent = parseInt((scX + 1) * 100) + "%";
        document.querySelector("#zoom").value = "label";
      }

      var matches = mapScaler.style.transform.match(/(-)?(\d+)(\.)?(\d+)?/g);
      mapScaler.style.transform = "translate(".concat(parseFloat(matches[0]) + deductX * adj, "px,").concat(parseFloat(matches[1]) + deductY * adj, "px) scale(").concat(1 + scX, ",").concat(1 + scY, ")");
    }
  }, {
    key: "_showFileOptions",
    value: function _showFileOptions() {
      this.setState(function (currState) {
        return {
          showFileOptions: !currState.showFileOptions
        };
      });
    }
  }, {
    key: "_showChild",
    value: function _showChild(name) {
      this.setState(function (currState) {
        return {
          showOpsChildren: name
        };
      });
    }
  }, {
    key: "_toggleMapGrid",
    value: function _toggleMapGrid() {
      this.setState(function (currState) {
        return {
          toggleMapGrid: !currState.toggleMapGrid
        };
      });
    }
  }, {
    key: "_newMap",
    value: function _newMap(w, h, u) {
      //if current map is not yet saved, ask
      if (this.state.changes != 0) {
        var conf = confirm("You haven't saved your current progress yet, proceed with this action?");
        if (!conf) return false;
      } //redeclare variables


      scX = 0, scY = 0;
      mapCellArr = {
        mapBase1: {},
        mapBase2: {},
        mapBase3: {},
        mapShadowMid1: {},
        mapMid1: {},
        mapShadowMid2: {},
        mapMid2: {},
        mapShadowTop: {},
        mapTop: {}
      };
      mapPathArr = {};
      var g = document.querySelector("#mapGrid"),
          cg = document.querySelector("#charGrid");
      var mapW, mapH;

      if (u) {
        cols = Math.floor(w / cellWidth);
        rows = Math.floor(h / cellHeight);
        mapW = w, mapH = h;
      } else {
        cols = w, rows = h, mapW = w * cellWidth, mapH = h * cellHeight;
      }

      [mapBase1, mapBase2, mapBase3, mapShadowMid1, mapMid1, mapAnimate, mapShadowMid2, mapMid2, mapShadowTop, mapTop, g, cg, mapClickCatcher, captureCanvas].map(function (x) {
        x.width = mapW, x.height = mapH, x.style.opacity = 1;
      });
      mapScaler.style.width = mapW + "px";
      mapScaler.style.height = mapH + "px";
      mapScaler.style.left = 0;
      mapScaler.style.top = 0;
      mapScaler.style.transform = "scale(1,1)";
      scalerHeight = mapH;
      var adderWidth = this.state.isThirds ? 0 : charCellWidth / 2,
          adderHeight = this.state.isThirds ? 0 : charCellHeight / 2;
      var i, j;
      var ctx = g.getContext("2d");
      var ctx2 = cg.getContext("2d");
      ctx.clearRect(0, 0, g.width, g.height);
      ctx.strokeStyle = "black";
      ctx.lineWidth = 1;
      ctx2.clearRect(0, 0, cg.width, cg.height);
      ctx2.strokeStyle = "#538EF0";
      ctx2.globalAlpha = 0.8;
      ctx2.lineWidth = 1;
      i = 0;

      for (i; i <= cols; i++) {
        var x = i * cellWidth;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, mapH);
        ctx.stroke(); //the column label

        ctx.font = "20px Arial Bold";
        ctx.fillStyle = "white";
        ctx.fillText(i, x, cellHeight / 2);
        j = 0;

        for (j; j < 3; j++) {
          var x2 = x + j * charCellWidth + adderWidth;
          ctx2.beginPath();
          ctx2.moveTo(x2, 0);
          ctx2.lineTo(x2, mapH);
          ctx2.stroke();
        }
      }

      i = 0;

      for (i; i <= rows; i++) {
        var y = i * cellHeight;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(mapW, y);
        ctx.stroke(); //the row label

        ctx.font = "20px Arial Bold";
        ctx.fillStyle = "white";
        ctx.fillText(i, 0, y + cellHeight / 2);
        j = 0;

        for (j; j < 3; j++) {
          var y2 = y + j * charCellHeight + adderHeight;
          ctx2.beginPath();
          ctx2.moveTo(0, y2);
          ctx2.lineTo(mapW, y2);
          ctx2.stroke();
        }
      }

      this.setState({
        showFileOptions: false,
        showOpsChildren: "main",
        mapName: "",
        mapAnimationArr: []
      });
      return true;
    }
  }, {
    key: "_drawTile",
    value: function _drawTile(isMouseDown, fromAnimationHistory) {
      //the change done to store in data for redo undo
      var changeDone, mapAnimationArr; //if on PATH MODE

      if (!this.state.showRenderControls && !this.state.erase) {
        //set the path cell data and render square
        var coordTemp = getPathCoordinate();

        if (!(coordTemp in mapPathArr)) {
          //save the current state before changing
          changeDone = {
            undo: {
              arrSrc: "mapPathArr",
              prop: coordTemp,
              val: null,
              coordRender: [pathXY[0], pathXY[1]]
            },
            redo: {
              arrSrc: "mapPathArr",
              prop: coordTemp,
              val: ["0.0"],
              coordRender: [pathXY[0], pathXY[1]]
            }
          };
          mapPathArr[coordTemp] = ["0.0"];
          this.drawPath(pathXY[0], pathXY[1]);
        } else return;
      } //else if erase, just erase, update and return
      else if (this.state.erase && !fromAnimationHistory) {
          //use 'let' so we can delete it
          var prop1 = this.state.layer,
              prop2 = getRenderCoordinate();
          var objRender = mapCellArr[prop1][prop2]; //if on erase and rendering mode

          if (this.state.showRenderControls && objRender) {
            changeDone = {
              undo: {
                arrSrc: "mapCellArr",
                data: [{
                  layer: this.state.layer,
                  prop: prop2,
                  val: mapCellArr[prop1][prop2]
                }]
              },
              redo: {
                arrSrc: "mapCellArr",
                data: [{
                  layer: this.state.layer,
                  prop: prop2
                }]
              }
            }; //clear a tile

            this.eraseRender(renderXY[0], renderXY[1]); //remove the data of that tile (direct objRenderer cannot be deleted)

            delete mapCellArr[prop1][prop2];
          } //else if on erase and path mode
          else if (!this.state.showRenderControls) {
              var _coordTemp = getPathCoordinate();

              if (_coordTemp in mapPathArr) {
                //save the current state before changing
                changeDone = {
                  undo: {
                    arrSrc: "mapPathArr",
                    prop: _coordTemp,
                    val: mapPathArr[_coordTemp],
                    coordRender: [pathXY[0], pathXY[1]]
                  },
                  redo: {
                    arrSrc: "mapPathArr",
                    prop: _coordTemp,
                    val: null,
                    coordRender: [pathXY[0], pathXY[1]]
                  }
                }; //remove the data of that tile

                delete mapPathArr[_coordTemp]; //clear a tile

                this.erasePath(pathXY[0], pathXY[1]);
              } else return;
            } else return;
        } //else if tilepicking
        else if (this.state.tilepick) {
            //get the data of the cell clicked
            var cellData = mapCellArr[this.state.layer][getRenderCoordinate()]; //if celldata is not null/undefined

            if (cellData) {
              //set the variable to render from the celldata
              selX = cellData[0];
              selY = cellData[1];
              selW = cellWidth;
              selH = cellHeight;
              this.setState(function (currState) {
                return {
                  ref: document.querySelector("#" + cellData[2]),
                  //save the previous tileset before changing the showTile
                  tileBeforeTilepick: currState.tileBeforeTilepick || currState.showTile,
                  showTile: cellData[2]
                };
              });
            }

            return;
          } //else if bucketing
          else if (this.state.bucket) {} //else,if not animating and has selected tile, draw the tile
            else if (!this.state.isAnimationOn && selX != undefined && !fromAnimationHistory) {
                //setting for mapCellArr
                //DAYS LATER.. I DONT FKING KNOW NOW HOW DID THIS WORK
                //BECAUSE I FORGOT TO WRITE THE COMMENTS @#@#!%$#@$#@#
                var forJ = selH > 0 ? {
                  validate: function validate(a, b) {
                    return a < b;
                  },
                  incDec: 1,
                  adj: 0
                } : {
                  validate: function validate(a, b) {
                    return a > b;
                  },
                  incDec: -1,
                  adj: -1
                };
                var forI = selW > 0 ? {
                  validate: function validate(a, b) {
                    return a < b;
                  },
                  incDec: 1,
                  adj: 0
                } : {
                  validate: function validate(a, b) {
                    return a > b;
                  },
                  incDec: -1,
                  adj: -1
                }; //4/23/2020 - i'm modifying this now and surely gonna write comment!!
                //store data here to validate

                var data = [];
                var dataCompare = []; //the previous data to compare  to new

                for (var j = 0; forJ.validate(j, selH / cellHeight); j += forJ.incDec) {
                  //DID I EFFIN WRITE THESE??? WTFFFF #$@%#^%^@*#*
                  for (var i = 0; forI.validate(i, selW / cellWidth); i += forI.incDec) {
                    var xIndex = renderXY[0] / cellWidth + i + forI.adj,
                        yIndex = renderXY[1] / cellHeight + j + forJ.adj;

                    if (xIndex >= 0 && yIndex >= 0 && xIndex < cols && yIndex < rows) {
                      dataCompare.push({
                        layer: this.state.layer,
                        prop: xIndex + "_" + yIndex,
                        val: mapCellArr[this.state.layer][xIndex + "_" + yIndex]
                      });
                      data.push({
                        layer: this.state.layer,
                        prop: xIndex + "_" + yIndex,
                        val: [selX + (i + forI.adj) * cellWidth, selY + (j + forJ.adj) * cellHeight, this.state.showTile]
                      });
                    }
                  }
                } //if rendered vs to be rendered are the same, do nothing


                if (JSON.stringify(data) == JSON.stringify(dataCompare)) {
                  return;
                }

                changeDone = {
                  undo: {
                    arrSrc: "mapCellArr",
                    data: dataCompare
                  },
                  redo: {
                    arrSrc: "mapCellArr",
                    data: data
                  }
                };
                data.map(function (d) {
                  mapCellArr[d.layer][d.prop] = d.val;
                });
                this.drawRender(this.state.ref, selX, selY, selW, selH, renderXY[0], renderXY[1], selW, selH);
              } //else if animating.. (length will be > 0 if animating)
              else if (this.state.animationFrames.length > 0 && isMouseDown) {
                  changeDone = {
                    undo: {
                      arrSrc: "mapAnimationArr",
                      data: this.state.mapAnimationArr
                    },
                    redo: {
                      arrSrc: "mapAnimationArr",
                      data: this.state.mapAnimationArr.concat({
                        rx: renderXY[0],
                        ry: renderXY[1],
                        fps: this.state.fps,
                        src: this.state.animationFrames
                      })
                    }
                  };
                  mapAnimationArr = this.state.mapAnimationArr.concat({
                    rx: renderXY[0],
                    ry: renderXY[1],
                    fps: this.state.fps,
                    src: this.state.animationFrames
                  });
                } else if (fromAnimationHistory) {
                  var val = document.querySelector("#selAnimationInstance").value;
                  console.log(val);
                  var toDel;
                  {
                    /*if none choose, select the last index*/
                  }

                  if (this.state.mapAnimationArr.length > 0) {
                    if (val == "") {
                      toDel = this.state.mapAnimationArr.length - 1;
                    } else toDel = val;

                    var arrs = this.state.mapAnimationArr.concat();
                    arrs.splice(toDel, 1);
                    mapAnimationArr = arrs;
                    changeDone = {
                      undo: {
                        arrSrc: "mapAnimationArr",
                        data: this.state.mapAnimationArr
                      },
                      redo: {
                        arrSrc: "mapAnimationArr",
                        data: arrs
                      }
                    };
                  } else return;
                } else return; //if history and action index are not equal, cut the excess history indices


      var tempHistory;

      if (this.state.history.length > this.state.actionIndex + 1) {
        tempHistory = JSON.parse(JSON.stringify(this.state.history));
        tempHistory.splice(this.state.actionIndex + 1);
      }

      this.setState(function (currState) {
        return {
          changes: currState.changes + 1,
          history: tempHistory ? tempHistory.concat(changeDone) : currState.history.concat(changeDone),
          actionIndex: currState.actionIndex + 1,
          mapAnimationArr: mapAnimationArr ? mapAnimationArr : currState.mapAnimationArr,
          layersStackPreview: Object.keys(mapCellArr).map(function (l) {
            return mapCellArr[l][getRenderCoordinate()];
          })
        };
      });
    } //the draw function of history undo redo

  }, {
    key: "_drawTimeTravel",
    value: function _drawTimeTravel(method) {
      var _this3 = this;

      //get the pointer in history
      var toDo = method == "undo" ? this.state.history[this.state.actionIndex + 1] : this.state.history[this.state.actionIndex];

      switch (toDo[method].arrSrc) {
        case "mapPathArr":
          if (toDo[method].val) {
            mapPathArr[toDo[method].prop] = toDo[method].val;
            this.drawPath.apply(this, _toConsumableArray(toDo[method].coordRender));
          } else {
            delete mapPathArr[toDo[method].prop];
            this.erasePath.apply(this, _toConsumableArray(toDo[method].coordRender));
          }

          break;

        case "mapCellArr":
          //for render history
          if (toDo[method].data) {
            //-------
            toDo[method].data.map(function (d) {
              //render axis
              var axis = d.prop.split("_"); //draw the render data from toDo[method].data

              if (d.val) {
                _this3.drawRender(document.querySelector("#" + d.val[2]), d.val[0], d.val[1], cellWidth, cellHeight, axis[0] * cellWidth, axis[1] * cellHeight, cellWidth, cellHeight, d.layer); //set the mapCellArr


                mapCellArr[d.layer][d.prop] = d.val;
              } else {
                _this3.eraseRender(axis[0] * cellWidth, axis[1] * cellHeight, d.layer);

                delete mapCellArr[d.layer][d.prop];
              }
            }); //------------------
          }

          break;

        case "mapAnimationArr":
          this.setState({
            mapAnimationArr: toDo[method].data
          });
          break;
      } //turn method back to empty and update layer stack preview


      this.setState({
        method: "",
        layersStackPreview: Object.keys(mapCellArr).map(function (l) {
          return mapCellArr[l][getRenderCoordinate()];
        })
      });
    }
  }, {
    key: "_mapHistory",
    value: function _mapHistory(method) {
      //know the method then process
      if (method == "undo") {
        //decrement index when undo and valid
        if (this.state.actionIndex > -1) {
          this.setState(function (currState) {
            return {
              actionIndex: currState.actionIndex - 1,
              method: method,
              changes: currState.changes - 1
            };
          });
        }
      } //else if redo
      else {
          //increment index when redo and valid
          if (this.state.actionIndex < this.state.history.length - 1) {
            this.setState(function (currState) {
              return {
                actionIndex: currState.actionIndex + 1,
                method: method,
                changes: currState.changes + 1
              };
            });
          }
        }
    }
  }, {
    key: "_toggleVisibility",
    value: function _toggleVisibility(e) {
      document.querySelector("#" + e.target.name).style.opacity = parseInt(e.target.value) * 0.1;
    }
  }, {
    key: "_createNewStash",
    value: function _createNewStash() {
      var _this4 = this;

      var cStashName = document.querySelector("#cStashName").value;

      this._showChild("loading");

      var req = new XMLHttpRequest();
      req.open("POST", "/mapmaker/createstash", true);
      req.setRequestHeader("Content-Type", "text/plain");

      req.onreadystatechange = function () {
        if (req.readyState == 4 && req.status == 200) {
          _this4._showChild("createnewstash");

          var json = JSON.parse(req.responseText);
          var errDom = document.querySelector("#cStashErr");
          var valDom = document.querySelector("#cStashVal");

          _this4._showErrMsg(errDom, json, valDom);
        } else if (req.readyState == 4) {
          _this4.setState({
            showOpsChildren: "errormessage",
            errormessage: "Failed to create due to network issue, please try again."
          });
        }
      };

      req.send(cStashName);
    }
  }, {
    key: "_openStash",
    value: function _openStash(stashName, stashKey) {
      var _this5 = this;

      this._showChild("loading");

      var req = new XMLHttpRequest();
      req.open("POST", "/mapmaker/openstash", true);
      req.setRequestHeader("Content-Type", "application/json");

      req.onreadystatechange = function () {
        if (req.readyState == 4 && req.status == 200) {
          var json = JSON.parse(req.responseText);

          if (json.type == "error") {
            _this5._showChild("main");

            var errDom = document.querySelector("#oStashErr");

            _this5._showErrMsg(errDom, json);
          } else {
            stash = json.message;

            _this5._showChild("openstash");

            _this5.setState({
              stashName: stash.mapStashName
            });

            var jsx = /*#__PURE__*/React.createElement("select", {
              id: "mapList",
              size: "7",
              onChange: function onChange(e) {
                if (_this5.state.showOpsChildren == "saveas") {
                  document.querySelector("#saveAsName").value = e.target.value;
                }

                _this5.setState({
                  selectedMap: e.target.value
                });
              }
            }, Object.keys(stash.maps).map(function (x, i) {
              if (x) return /*#__PURE__*/React.createElement("option", {
                key: i,
                value: x
              }, x);
            }));

            _this5.setState({
              mapList: jsx
            });
          }
        } else if (req.readyState == 4) {
          _this5.setState({
            showOpsChildren: "errormessage",
            errormessage: "Failed to open due to network issue, please try again."
          });
        }
      };

      req.send(JSON.stringify({
        stashName: stashName,
        stashKey: stashKey
      }));
    }
  }, {
    key: "_showErrMsg",
    value: function _showErrMsg(dom, msgObj, val) {
      dom.style.color = msgObj.type == "error" ? "red" : "green";
      dom.textContent = msgObj.message;

      if (val) {
        val.textContent = msgObj.val;
      }
    }
  }, {
    key: "_saveAs",
    value: function _saveAs(directSave) {
      var _this6 = this;

      this._showChild("loading");

      var saveasname = directSave ? this.state.mapName : document.querySelector("#saveAsName").value; //if "save as" and no name input

      if (!saveasname && !directSave) {
        this._showChild("saveas");

        var errDom = document.querySelector("#saveErr");

        this._showErrMsg(errDom, {
          type: "error",
          message: "Invalid map name"
        });

        return;
      } else if (!saveasname && directSave) {
        //if not yet saved previously
        this._showChild("saveas");

        return;
      } else if (saveasname in stash.maps && !directSave) {
        //if replacing a file, ask confirmation
        var conf = confirm("Replace this file? \"".concat(saveasname, "\""));

        if (!conf) {
          this._showChild("saveas");

          return;
        }
      } //save the new map to local stash variable first


      stash.maps[saveasname] = {
        mapWidth: mapBase1.width,
        mapHeight: mapBase1.height,
        render: mapCellArr,
        pathData: mapPathArr,
        mapAnimationArr: this.state.mapAnimationArr
      };
      var req = new XMLHttpRequest();
      req.open("POST", "/mapmaker/savestash", true);
      req.setRequestHeader("Content-Type", "application/json");

      req.onreadystatechange = function () {
        if (req.readyState == 4 && req.status == 200) {
          var json = JSON.parse(req.responseText);
          console.log(json);

          if (json.type == "error") {
            _this6._showChild("saveas");

            var _errDom = document.querySelector("#saveErr");

            _this6._showErrMsg(_errDom, json);
          } else {
            var jsx = /*#__PURE__*/React.createElement("select", {
              id: "mapList",
              size: "7",
              onChange: function onChange(e) {
                if (_this6.state.showOpsChildren == "saveas") {
                  document.querySelector("#saveAsName").value = e.target.value;
                }

                _this6.setState({
                  selectedMap: e.target.value
                });
              }
            }, Object.keys(stash.maps).map(function (x, i) {
              if (x) return /*#__PURE__*/React.createElement("option", {
                key: i,
                value: x
              }, x);
            }));

            _this6.setState({
              mapList: jsx,
              mapName: saveasname,
              changes: 0
            });

            _this6._showFileOptions();
          }
        } else if (req.readyState == 4) {
          _this6.setState({
            showOpsChildren: "errormessage",
            errormessage: "Failed to save due to network issue, please try again."
          });
        }
      }; //send the local stash to server to save to DB


      req.send(JSON.stringify({
        mapStashName: stash.mapStashName,
        mapName: saveasname,
        mapData: stash.maps[saveasname]
      }));
    }
  }, {
    key: "_load",
    value: function _load(mapName) {
      console.log("Loading map: " + mapName); //get the map to load

      var map = stash.maps[mapName]; //create new map area to load the render

      var conf = this._newMap(map.mapWidth, map.mapHeight, true);

      if (!conf) return; //draw the render from all layers

      ["mapBase1", "mapBase2", "mapBase3", "mapShadowMid1", "mapMid1", "mapShadowMid2", "mapMid2", "mapShadowTop", "mapTop"].map(function (x) {
        var ctx = document.querySelector("#".concat(x)).getContext("2d");

        for (var prop in map.render[x]) {
          var axis = prop.split("_");
          ctx.drawImage(document.querySelector("#" + map.render[x][prop][2]), map.render[x][prop][0], map.render[x][prop][1], cellWidth, cellHeight, axis[0] * cellWidth, axis[1] * cellHeight, cellWidth, cellHeight);
        }
      }); //draw the path data/mapPathArr { }

      var ctx2 = document.querySelector("#charGrid").getContext("2d");
      ctx2.globalAlpha = 0.5;
      ctx2.fillStyle = "blue";
      var adderWidth = this.state.isThirds ? 0 : charCellWidth / 2,
          adderHeight = this.state.isThirds ? 0 : charCellHeight / 2;

      for (var prop in map.pathData) {
        var axis = prop.split("_");
        ctx2.fillRect(axis[0] * charCellWidth + 1 - adderWidth, axis[1] * charCellHeight + 1 - adderHeight, charCellWidth - 2, charCellHeight - 2);
      }

      this.setState({
        mapName: mapName,
        mapAnimationArr: map.mapAnimationArr,
        changes: 0,
        actionIndex: -1,
        history: []
      }); //when assigning directly (mapCellArr = map.render)
      //changing mapCellArr will also change map.render
      //because they SHARE the same OBJECT reference
      //so we use deep copy parse and stringify to prevent that

      mapCellArr = JSON.parse(JSON.stringify(map.render));
      mapPathArr = Array.isArray(map.pathData) ? {} : JSON.parse(JSON.stringify(map.pathData));
    }
  }, {
    key: "_tilesetOnChange",
    value: function _tilesetOnChange(tileset) {
      var ts = document.querySelector("#" + tileset),
          w = ts.width,
          h = ts.height,
          f = document.querySelector("#frame"),
          fs = document.querySelector("#frameSelect"),
          fsa = document.querySelector("#frameSelectAnimation");
      f.width = w;
      f.height = h;
      fs.width = w;
      fs.height = h;
      fsa.width = w;
      fsa.height = h;
      var g2s1 = document.querySelector("#G2s1");
      console.log(g2s1.offsetHeight);

      if (h < g2s1.offsetHeight) {
        tilesCont.style.height = h + 12 + "px";
      } else {
        tilesCont.style.height = "100%";
      }

      var cols = w / cellWidth,
          rows = h / cellHeight,
          ctx = f.getContext("2d");
      ctx.clearRect(0, 0, w, h);
      var i = 0;

      for (i; i <= cols; i++) {
        var x = i * cellWidth;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, h);
        ctx.stroke();
      }

      i = 0;

      for (i; i <= rows; i++) {
        var y = i * cellHeight;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(w, y);
        ctx.stroke();
      }

      this.setState({
        showTile: tileset,
        ref: document.querySelector("#" + tileset),
        tileBeforeTilepick: null
      }); //reset tile selection

      selX = null;
      selY = null;
    }
  }, {
    key: "_toggleAnimation",
    value: function _toggleAnimation(isFalse) {
      frameSelectAnimation.getContext("2d").clearRect(0, 0, frameSelectAnimation.width, frameSelectAnimation.height);
      frameSelect.getContext("2d").clearRect(0, 0, frameSelect.width, frameSelect.height);
      selX = undefined;
      selW = cellWidth;
      selH = cellHeight;
      this.setState(function (currState) {
        return {
          animationFrames: [],
          isAnimationOn: isFalse ? false : !currState.isAnimationOn,
          bucket: isFalse == "bucket" && !currState.bucket,
          tilepick: isFalse == "tilepick" && !currState.tilepick,
          erase: false
        };
      });
    }
  }, {
    key: "_mapAnimation",
    value: function _mapAnimation() {
      var _this7 = this;

      var ctx = mapAnimate.getContext("2d");
      var ctxCapture = captureCanvas.getContext("2d");

      var renderAnimation = function renderAnimation() {
        requestAnimationFrame(renderAnimation);
        ctx.clearRect(0, 0, mapAnimate.width, mapAnimate.height);
        ctxCapture.clearRect(0, 0, captureCanvas.width, captureCanvas.height);

        if (_this7.state.mapAnimationArr.length > 0) {
          //loop through all instances of animation objects
          _this7.state.mapAnimationArr.map(function (instance) {
            //initiate self frame counter for each instance
            if (instance.selfCounter == undefined || instance.selfCounter >= instance.src.length) instance.selfCounter = 0; //initiate self "FPS" counter for each instance

            if (instance.selfFPSCounter == undefined) instance.selfFPSCounter = 0;
            var frame = instance.src[instance.selfCounter];
            ctx.drawImage(document.querySelector("#" + frame.tileset), frame.sx, frame.sy, frame.w, frame.h, instance.rx, instance.ry, frame.w, frame.h);
            instance.selfFPSCounter++;

            if (instance.selfFPSCounter >= 60 / instance.fps) {
              instance.selfCounter++;
              instance.selfFPSCounter = 0;
            }
          });
        }

        if (durationCounter > 0) {
          [mapBase1, mapBase2, mapBase3, mapShadowMid1, mapMid1, mapAnimate, mapShadowMid2, mapMid2, mapShadowTop, mapTop].map(function (canv) {
            ctxCapture.drawImage(canv, 0, 0);
          });
          var bar = document.querySelector("#loadingBar");
          if (bar != undefined) bar.style.width = (_this7.state.ads * 60 - durationCounter) / (_this7.state.ads * 60) * 100 + "%";
          capturer.capture(captureCanvas);
          durationCounter--;
          durationCounter <= 0 && _this7.state.exFormat != "gif" && _this7._showFileOptions();
        }
      };

      requestAnimationFrame(renderAnimation);
    }
  }, {
    key: "_returnATileset",
    value: function _returnATileset(id, mapUrlName) {
      var _this8 = this;

      return /*#__PURE__*/React.createElement("img", {
        id: id,
        className: "tileset",
        src: mapUrlName ? "/assets/maps/" + mapUrlName + ".png" : this.state[id],
        style: {
          display: function () {
            if (_this8.state.tileBeforeTilepick) {
              return _this8.state.tileBeforeTilepick == id ? "block" : "none";
            } else {
              return _this8.state.showTile == id ? "block" : "none";
            }
          }(),
          position: "relative"
        },
        onLoad: function onLoad() {
          _this8.state.mapName ? _this8._tilesetOnChange(id) : _this8._tilesetOnChange("tileset1");
          _this8.state.mapName && _this8._load(_this8.state.mapName);
        }
      });
    }
  }, {
    key: "_layerOnChange",
    value: function _layerOnChange(l) {
      this.setState({
        layer: l
      });
    }
  }, {
    key: "_adjustFrameSize",
    value: function _adjustFrameSize(e) {
      var val = e.target.value;
      this.setState({
        autoResize: "".concat(val, "% 300px 1fr")
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this9 = this;

      return /*#__PURE__*/React.createElement("div", {
        id: "mainCont"
      }, /*#__PURE__*/React.createElement(Group1, {
        _drawTile: this._drawTile,
        _setStateCallback: this._setStateCallback,
        _tilesetOnChange: this._tilesetOnChange,
        _showChild: this._showChild,
        _showFileOptions: this._showFileOptions,
        _toggleMapGrid: this._toggleMapGrid,
        _zoomFunction: this._zoomFunction,
        _adjustFrameSize: this._adjustFrameSize,
        showRenderControls: this.state.showRenderControls,
        changes: this.state.changes,
        autoResize: this.state.autoResize,
        setScale: function setScale(val) {
          scX = val;
          scY = val;
        }
      }), /*#__PURE__*/React.createElement(Group2, {
        _drawTile: this._drawTile,
        _setStateCallback: this._setStateCallback,
        _returnATileset: this._returnATileset,
        _layerOnChange: this._layerOnChange,
        _toggleVisibility: this._toggleVisibility,
        _toggleAnimation: this._toggleAnimation,
        custom1: this.state.custom1,
        custom2: this.state.custom2,
        custom3: this.state.custom3,
        showTile: this.state.showTile,
        erase: this.state.erase,
        bucket: this.state.bucket,
        tilepick: this.state.tilepick,
        layer: this.state.layer,
        isAnimationOn: this.state.isAnimationOn,
        mapAnimationArr: this.state.mapAnimationArr,
        showRenderControls: this.state.showRenderControls,
        fps: this.state.fps,
        toggleMapGrid: this.state.toggleMapGrid,
        z: this.state.z,
        z_: this.state.z_,
        autoResize: this.state.autoResize,
        mapClickCatcher: mapClickCatcher,
        pathXY: pathXY,
        charCellWidth: charCellWidth,
        cellWidth: cellWidth,
        cellHeight: cellHeight
      }), this.state.showFileOptions && /*#__PURE__*/React.createElement("div", {
        id: "popupBG"
      }, this.state.showOpsChildren == "main" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        id: "oStashErr"
      }), /*#__PURE__*/React.createElement("input", {
        id: "stashName",
        type: "text",
        placeholder: "Stash name"
      }), /*#__PURE__*/React.createElement("input", {
        id: "stashKey",
        type: "text",
        placeholder: "Key"
      }), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9._openStash("r", "r");
        }
      }, "AUTO"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          var stashName = document.querySelector("#stashName").value,
              stashKey = document.querySelector("#stashKey").value;

          _this9._openStash(stashName, stashKey);
        }
      }, "Open stash"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("createnewstash");
        }
      }, "Create new stash"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return window.location.href = "/";
        }
      }, "<- Game Page")), this.state.showOpsChildren == "whatsnew" && /*#__PURE__*/React.createElement(Versioning, {
        _showChild: this._showChild
      }), this.state.showOpsChildren == "loading" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("h3", null, "Please wait.."), /*#__PURE__*/React.createElement("div", {
        id: "loadingBar"
      }), /*#__PURE__*/React.createElement("div", {
        id: "loadingDetails"
      })), this.state.showOpsChildren == "errormessage" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("h3", null, "Sorry.."), this.state.errormessage, /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return cols == undefined ? _this9._showChild("main") : _this9._showChild("files");
        }
      }, "Back")), this.state.showOpsChildren == "createnewstash" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        id: "cStashErr"
      }), /*#__PURE__*/React.createElement("div", {
        id: "cStashVal"
      }), /*#__PURE__*/React.createElement("input", {
        type: "text",
        id: "cStashName",
        placeholder: "Stash name"
      }), /*#__PURE__*/React.createElement("button", {
        onClick: this._createNewStash
      }, "Create"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("main");
        }
      }, "Back to login")), this.state.showOpsChildren == "openstash" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        id: "ooStashErr"
      }), /*#__PURE__*/React.createElement("h1", {
        id: "ooStashName"
      }, this.state.stashName), this.state.mapList, /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9.state.selectedMap && _this9._load(_this9.state.selectedMap);
        }
      }, "Select"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("new");
        }
      }, "New"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("main");
        }
      }, "Back")), this.state.showOpsChildren == "files" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        style: {
          fontWeight: "bold"
        }
      }, "v1.8.3"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("whatsnew");
        }
      }, "What's new?"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("load");
        }
      }, "Load"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9._saveAs(true);
        }
      }, "Save"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("saveas");
        }
      }, "Save As"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("new");
        }
      }, "New"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("export");
        }
      }, "Export"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          if (_this9.state.changes != 0) {
            var conf = confirm("Changes are not saved yet, proceed to the game page?");

            if (conf) {
              window.location.href = "/";
            }
          } else {
            window.location.href = "/";
          }
        }
      }, "<-- To Game Page"), /*#__PURE__*/React.createElement("button", {
        onClick: this._showFileOptions
      }, "Back")), this.state.showOpsChildren == "load" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", null, "Open a map"), this.state.mapList, /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9._load(_this9.state.selectedMap);
        }
      }, "Load"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("files");
        }
      }, "Back")), this.state.showOpsChildren == "saveas" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        id: "saveErr"
      }), this.state.mapList, /*#__PURE__*/React.createElement("input", {
        id: "saveAsName",
        type: "text",
        placeholder: "Map name"
      }), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9._saveAs(false);
        }
      }, "Save"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("files");
        }
      }, "Back")), this.state.showOpsChildren == "new" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("p", null, "New map"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", {
        htmlFor: "px"
      }, "pixel"), /*#__PURE__*/React.createElement("input", {
        type: "radio",
        name: "unit",
        defaultChecked: true,
        id: "px",
        value: "pixel"
      })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", {
        htmlFor: "cell"
      }, "cell"), /*#__PURE__*/React.createElement("input", {
        type: "radio",
        name: "unit",
        id: "cell",
        value: "cell"
      })), /*#__PURE__*/React.createElement("input", {
        type: "number",
        id: "newWidth",
        placeholder: "width"
      }), /*#__PURE__*/React.createElement("input", {
        type: "number",
        id: "newHeight",
        placeholder: "height"
      }), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._newMap(document.querySelector("#newWidth").value, document.querySelector("#newHeight").value, document.querySelector("#px").checked);
        }
      }, "Start"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return cols == undefined ? _this9._showChild("openstash") : _this9._showChild("files");
        }
      }, "Back")), this.state.showOpsChildren == "export" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("label", {
        htmlFor: "exFormat"
      }, "Export format:"), /*#__PURE__*/React.createElement("select", {
        id: "exFormat",
        onChange: function onChange(e) {
          _this9.setState({
            exFormat: e.target.value
          });
        },
        value: this.state.exFormat
      }, /*#__PURE__*/React.createElement("option", {
        value: "webm"
      }, ".webm(Chrome only)"), /*#__PURE__*/React.createElement("option", {
        value: "png"
      }, ".png"), /*#__PURE__*/React.createElement("option", {
        value: "gif"
      }, ".gif")), /*#__PURE__*/React.createElement("label", {
        htmlFor: "cps"
      }, "Captures per second", /*#__PURE__*/React.createElement("br", null), "(max 60):"), /*#__PURE__*/React.createElement("input", {
        id: "cps",
        type: "number",
        value: this.state.cps,
        onChange: function onChange(e) {
          if (e.target.value > 60) e.target.value = 60;
          if (e.target.value < 1) e.target.value = 1;

          _this9.setState({
            cps: e.target.value
          });
        }
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "ads"
      }, "Animation duration", /*#__PURE__*/React.createElement("br", null), "(in SECONDS) (max 5):"), /*#__PURE__*/React.createElement("input", {
        id: "ads",
        type: "number",
        value: this.state.ads,
        onChange: function onChange(e) {
          if (e.target.value > 5) e.target.value = 5;
          if (e.target.value < 1) e.target.value = 1;

          _this9.setState({
            ads: e.target.value
          });
        }
      }), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          _this9._showChild("loading");

          capturer = new CCapture({
            format: _this9.state.exFormat,
            workersPath: _this9.state.exFormat == "gif" && "/",
            framerate: _this9.state.cps,
            timeLimit: _this9.state.ads,
            verbose: true
          });
          durationCounter = 60 * _this9.state.ads;
          capturer.start();
        }
      }, "Export!"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return _this9._showChild("files");
        }
      }, "Back")), this.state.showOpsChildren == "help" && /*#__PURE__*/React.createElement("div", {
        className: "popupCont"
      }, /*#__PURE__*/React.createElement("div", {
        id: "instructions"
      }, /*#__PURE__*/React.createElement("h4", null, "Basic Controls"), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "To create a new map, click File -> New"), /*#__PURE__*/React.createElement("li", null, "To save your map, File -> Save/Save as"), /*#__PURE__*/React.createElement("li", null, "To load your map, File -> Load"), /*#__PURE__*/React.createElement("li", null, "Scroll to zoom-in/out the map"), /*#__PURE__*/React.createElement("li", null, "Hold right-click and drag on the map or tileset to navigate"), /*#__PURE__*/React.createElement("li", null, "Hold left-click to massive select on tileset"), /*#__PURE__*/React.createElement("li", null, "Press E to toggle Eraser on/off")), /*#__PURE__*/React.createElement("h4", null, "How To Animate?"), /*#__PURE__*/React.createElement("img", {
        src: "/assets/system/animationGuide.png"
      }), /*#__PURE__*/React.createElement("div", null, "Credits to Ivan Voirol for the tilesets! You can follow him", " ", /*#__PURE__*/React.createElement("a", {
        href: "https://opengameart.org/users/ivan-voirol",
        target: "_blank"
      }, "HERE")), /*#__PURE__*/React.createElement("div", null, "Suggestions?", /*#__PURE__*/React.createElement("br", null), "Found bug?", /*#__PURE__*/React.createElement("br", null), "Want to submit a tileset?", /*#__PURE__*/React.createElement("br", null), "Send me an e-mail at:", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", {
        id: "email"
      }, "vincauxryua@gmail.com"))), /*#__PURE__*/React.createElement("button", {
        onClick: this._showFileOptions
      }, "Back"))));
    }
  }]);

  return MapMaker;
}(React.Component);

module.exports = function () {
  return MapMaker;
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

module.exports = function Versioning(props) {
  return /*#__PURE__*/React.createElement("div", {
    className: "popupCont"
  }, /*#__PURE__*/React.createElement("h3", null, "What's new?"), /*#__PURE__*/React.createElement("ul", {
    id: "versioning"
  }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.8.3 [NEAT LAYER SELECTION]"), " Layer selection UI is now cleaner. (4/30/2020)"), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.7.3 [ZOOM + HOTKEYS]"), " Zoom amount can now be", " ", /*#__PURE__*/React.createElement("strong", null, "referenced or selected"), " below the opacity dropdown. List of hotkeys is now included in the tools area."), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.6.3 [LAYER STACK PREVIEW + DRAG ENHANCEMENT + LAYER SELECTION IN RADIO BUTTONS]"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "Previews of ", /*#__PURE__*/React.createElement("strong", null, "tiles used in a cell"), " ", "will be shown beside the visibility checkboxes whenever a user hover a mouse pointer on that cell. Further details can be included like the tileset used and the x-y coordinate of the tile, but we thought that it is not necessary as of now. Please inform us if you think it is, and we'll implement it :D"), /*#__PURE__*/React.createElement("li", null, "Users can now move the map with right click or zoom-in even the mouse pointer is not on the main canvas, as long as it is inside the container."), /*#__PURE__*/React.createElement("li", null, "Layer selection is now in radio buttons rather than dropdown list, and it is moved on the right side for easy access. (4/26/2020)"))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.5.3 [UNDO REDO + ACCURATE CHANGE COUNTER]"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "Undo and redo are now functioning, use them with the usual hotkeys z and y respectively", " ", /*#__PURE__*/React.createElement("strong", null, "without the ctrl button."), " The scope of this history is the entire canvas where the map is being rendered. There's no count-limit to use undo/redo. However, this feature is still on beta. We may put range limit to history whenever our app shows some performance drop when used for a long session, so please report to us if you noticed that drop."), /*#__PURE__*/React.createElement("li", null, "The ", /*#__PURE__*/React.createElement("strong", null, "Change rate"), " is not spamming anymore! In our previous versions, it increments every mouse move. Now it is more accurate and will only increment when real changes in canvas happened. The change rate can be a negative number when you", " ", /*#__PURE__*/React.createElement("strong", null, "Undo"), " just after saving the progress, it's like travelling back in time! :D (4/24/2020)"))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.4.2 [CUSTOM TILESET]"), " Now we can add our custom tileset, we can use maximum of 3 different custom tilesets. But since the local custom tileset is not saved on the server side, we would have to upload it everytime we continue our project. Please remember the slot where the tileset was uploaded, for example; We uploaded a tileset at", " ", /*#__PURE__*/React.createElement("strong", null, "Custom Tileset 1"), " and used it for our map, we have to upload the same tileset at the same slot(Custom Tileset 1) everytime we load our map, so it will re-render the map correctly. (4/23/2020)"), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.3.2 [MAP QUALITY IMPROVEMENT + EXPORTING]"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "The issue that was addressed in version 1.2.1.b is now fixed! No pixel loss anymore! And to add to that, while applying that fix, to our surprise we found out that the quality of the map doesn't blur anymore when zooming in! How's that? We caught 2 fishes in one pull! :D"), /*#__PURE__*/React.createElement("li", null, "The exporting function is now moved to File>Export since it is getting larger and it takes more spaces in the main tools area. And we now change the input value. Instead of only specifying the number of frames, it now accepts two values:", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", null, "Animation Duration"), " and", " ", /*#__PURE__*/React.createElement("span", null, "Captures Per Second"), " or simply the fps.", /*#__PURE__*/React.createElement("br", null), "Animation duration is simply how long the duration of the exported file would be. While captures per second is the number of images per second to export. Because we decided to make the animations in the map user-defined-fps, the exported animation will look odd if we make the exporting values fix or unchangeable, especially when the map has many animations with ", /*#__PURE__*/React.createElement("span", null, "different"), " fps.", /*#__PURE__*/React.createElement("br", null), "(Say the map has two animations, the first one has 25fps while the other has 10fps, the exported file will look odd if we export it in 10fps because the first animation will lose some frames)", /*#__PURE__*/React.createElement("br", null), "In case of having animations with different fps, we suggest to set the ", /*#__PURE__*/React.createElement("span", null, "Captures Per Second"), " ", "according to the highest fps you have in your map. Or if you want it to be really smooth, just set it to 60 captures per second."), /*#__PURE__*/React.createElement("li", null, "As an alternative to .webm(which only works on Chrome, see", " ", /*#__PURE__*/React.createElement("a", {
    href: "https://github.com/spite/ccapture.js/",
    target: "_blank"
  }, "here"), " ", "at the lower part of the page), we added an option to export animated .gif format. The quality, however, is reduced. So we use it at our own will."), /*#__PURE__*/React.createElement("li", null, "Be aware of the number of images when exporting in .png, if you set the", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", null, "Captures Per Second"), " to 60, and the", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", null, "Animation Duration"), " to 5, that would be 60x5=300 .PNG images! So we must be aware of that. (4/23/2020)"))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.2.1 [PNG EXPORTING + EDGE'S PIXEL LOSS]"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "Added an option to export the map to .png format. User can specify the number of frames to export(userful when converting frames to animated .gif format with other software)."), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", {
    style: {
      fontWeight: "bold"
    }
  }, "[Edge's pixel loss explained]"), "When rendering a tile into the map, edges of tiles from different layers may seem to reduce by 1pixel, this is due to html5 canvas layering issue. Although, it is only when making a map. The pixel loss will be automatically fixed when exporting to .webm or .png. (4/21/2020)"))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.1.1 [NETTWORK FAILURES]"), " Network failure causes loading window to stuck, we now added an error handling to network failure while saving, loading, opening/creating a stash. (4/20/2020)"), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.1.0 [HIDE TOOLS]"), " Added \"Hide tools\" button to have wider tileset view.", /*#__PURE__*/React.createElement("br", null), "Button hotkey: [W] (4/20/2020)"), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, "v1.0.0 [THE ROCKET IS LAUNCHED! :D]"), " Started Semantic Versioning (4/20/2020)")), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      return props._showChild("files");
    }
  }, "Back"));
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(0);

module.exports = function Group1(props) {
  var tilesetsSelection = {
    tileset1: "Slates V2 by Ivan Voirol",
    tileset2: "Slates V2 [Updated] by Ivan Voirol",
    tileset3: "Slates [OFFICIAL] by Ivan Voirol",
    tileset4: "Slates(x2 scale) [OFFICIAL] by Ivan Voirol",
    sample3: "Characters Preview [Development]",
    wip1: "New Tileset [WIP]",
    custom1: "Custom Tileset 1",
    custom2: "Custom Tileset 2",
    custom3: "Custom Tileset 3"
  };
  return /*#__PURE__*/React.createElement("div", {
    id: "Group1"
  }, /*#__PURE__*/React.createElement("div", {
    id: "G1s1"
  }, /*#__PURE__*/React.createElement("select", {
    onChange: function onChange(e) {
      props._tilesetOnChange(e.target.value);
    },
    defaultValue: "tileset1"
  }, Object.keys(tilesetsSelection).map(function (x, i) {
    return /*#__PURE__*/React.createElement("option", {
      key: i,
      value: x
    }, tilesetsSelection[x]);
  })), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._showChild("files");

      props._showFileOptions();
    }
  }, "File"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._showChild("help");

      props._showFileOptions();
    }
  }, "HELP!"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback(function (currState) {
        return {
          autoResize: currState.autoResize == "15% 300px 1fr" || currState.autoResize == "55% 300px 1fr" ? false : "15% 300px 1fr"
        };
      });
    },
    className: props.autoResize == "15% 300px 1fr" || props.autoResize == "55% 300px 1fr" ? "buttonActive" : ""
  }, "AutoResize[Q]"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback(function (currState) {
        return {
          autoResize: currState.autoResize == "0px 0px 100%" ? false : "0px 0px 100%"
        };
      });
    },
    className: props.autoResize == "0px 0px 100%" ? "buttonActive" : ""
  }, "Fullscreen[W]"), /*#__PURE__*/React.createElement("input", {
    type: "range",
    className: "slider",
    step: "2",
    min: "0",
    max: "75",
    onChange: props._adjustFrameSize
  })), /*#__PURE__*/React.createElement("div", {
    id: "G1s2"
  }, /*#__PURE__*/React.createElement("button", {
    onClick: props._toggleMapGrid
  }, "Grid[G]"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._setStateCallback(function (currState) {
        return {
          showRenderControls: !currState.showRenderControls
        };
      });
    },
    className: !props.showRenderControls ? "buttonActive" : ""
  }, props.showRenderControls ? "Switch to [PATH MODE]" : "Back to [RENDER MODE]"), /*#__PURE__*/React.createElement("div", {
    style: {
      color: props.changes > 300 ? "#FE0000" : props.changes > 200 ? "#FF9600" : props.changes > 100 ? "#EAFF00" : "#13DF26",
      backgroundColor: "black"
    }
  }, "Changes since your last save: ", props.changes), /*#__PURE__*/React.createElement("div", {
    id: "coordinates"
  })), /*#__PURE__*/React.createElement("div", {
    id: "G1s3"
  }, /*#__PURE__*/React.createElement("select", {
    id: "zoom",
    defaultValue: "label",
    onChange: function onChange(e) {
      props.setScale(e.target.value);

      props._zoomFunction();

      document.querySelector("#zoomValue").textContent = "zoom";
    }
  }, /*#__PURE__*/React.createElement("option", {
    id: "zoomValue",
    disabled: true,
    value: "label"
  }, "Zoom"), /*#__PURE__*/React.createElement("option", {
    value: -0.5
  }, "50%"), /*#__PURE__*/React.createElement("option", {
    value: 0
  }, "100%"), /*#__PURE__*/React.createElement("option", {
    value: 1
  }, "200%"), /*#__PURE__*/React.createElement("option", {
    value: 2
  }, "300%"), /*#__PURE__*/React.createElement("option", {
    value: 3
  }, "400%"), /*#__PURE__*/React.createElement("option", {
    value: 4
  }, "500%"), /*#__PURE__*/React.createElement("option", {
    value: 5
  }, "600%"), /*#__PURE__*/React.createElement("option", {
    value: 6
  }, "700%"), /*#__PURE__*/React.createElement("option", {
    value: 7
  }, "800%")), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props.setScale(0);
      document.querySelector("#zoomValue").textContent = "zoom";
      document.querySelector("#zoom").value = "label";
      document.querySelector("#mapScaler").style.transform = "translate(0px,0px) scale(1,1)";
    }
  }, "Reset View")));
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = __webpack_require__(0);

var TileUploader = __webpack_require__(81);

module.exports = function Group2(props) {
  var layers = ["mapTop", "mapShadowTop", "mapMid2", "mapShadowMid2", "mapAnimate", "mapMid1", "mapShadowMid1", "mapBase3", "mapBase2", "mapBase1"];
  return /*#__PURE__*/React.createElement("div", {
    id: "Group2",
    style: {
      gridTemplateColumns: props.autoResize ? props.autoResize : "35% 300px 1fr"
    }
  }, /*#__PURE__*/React.createElement("div", {
    id: "G2s1"
  }, /*#__PURE__*/React.createElement("div", {
    id: "tilesCont",
    onClick: function onClick(e) {}
  }, props._returnATileset("tileset1", "maptiles1"), props._returnATileset("tileset2", "maptiles2"), props._returnATileset("tileset3", "maptiles3"), props._returnATileset("tileset4", "maptiles4"), props._returnATileset("wip1", "wip1"), props._returnATileset("sample3", "sample3"), props._returnATileset("custom1"), props._returnATileset("custom2"), props._returnATileset("custom3"), /*#__PURE__*/React.createElement("canvas", {
    id: "frame"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "frameSelectAnimation"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "frameSelect"
  })), props[props.showTile] == "" && /*#__PURE__*/React.createElement(TileUploader, {
    cb: function cb(dataUrl) {
      var customs = _defineProperty({}, props.showTile, dataUrl);

      console.log(customs);

      props._setStateCallback(function (currState) {
        return customs;
      });
    }
  })), /*#__PURE__*/React.createElement("div", {
    id: "G2s2"
  }, /*#__PURE__*/React.createElement("div", {
    className: "G2s2subSection"
  }, /*#__PURE__*/React.createElement("span", null, "Layers"), function () {
    var tempJsx = [],
        i = layers.length - 1;

    var _iterator = _createForOfIteratorHelper(layers),
        _step;

    try {
      var _loop = function _loop() {
        var l = _step.value;
        tempJsx.push( /*#__PURE__*/React.createElement("div", {
          key: i,
          className: props.layer == l ? "G2s2layer buttonActive" : l != "mapAnimate" ? "G2s2layer" : ""
        }, /*#__PURE__*/React.createElement("div", {
          className: "layerSelInner1",
          onClick: function onClick() {
            l != "mapAnimate" && props._layerOnChange(l);
          }
        }, function () {
          var val = l.replace("map", "");

          switch (val) {
            case "ShadowTop":
              return "[8]Shadow-C";
              break;

            case "ShadowMid2":
              return "[6]Shadow-B";
              break;

            case "ShadowMid1":
              return "[4]Shadow-A";
              break;

            case "Animate":
              return "[ Animations ]";
              break;

            default:
              return "[".concat(i > 5 ? i : i + 1, "]").concat(val);
          }
        }()), /*#__PURE__*/React.createElement("div", {
          className: "layerSelInner2"
        }, l != "mapAnimate" && /*#__PURE__*/React.createElement("canvas", {
          id: "lsp_" + (i > 5 ? i - 1 : i),
          width: props.cellWidth,
          height: props.cellHeight,
          disabled: true,
          onClick: function onClick() {
            props._layerOnChange(l);
          }
        }), /*#__PURE__*/React.createElement("input", {
          onChange: props._toggleVisibility,
          type: "range",
          defaultValue: "10",
          min: "0",
          max: "10",
          className: "slider",
          name: l
        }))));
        i--;
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return tempJsx;
  }()), /*#__PURE__*/React.createElement("div", {
    className: "G2s2subSection",
    id: "tools"
  }, /*#__PURE__*/React.createElement("span", null, "Tools"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    id: "eraser",
    className: props.erase ? "buttonActive" : "",
    onClick: function onClick(e) {
      props._setStateCallback(function (currState) {
        return {
          erase: !currState.erase,
          bucket: false,
          tilepick: false
        };
      });
    }
  }, "Eraser[E]"), /*#__PURE__*/React.createElement("button", {
    className: props.bucket ? "buttonActive" : "",
    onClick: function onClick(e) {
      props._toggleAnimation("bucket");
    }
  }, "Bucket[B]")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: props.tilepick ? "buttonActive" : "",
    onClick: function onClick(e) {
      props._toggleAnimation("tilepick");
    }
  }, "Tile Picker[T]"))), /*#__PURE__*/React.createElement("div", {
    className: "G2s2subSection"
  }, /*#__PURE__*/React.createElement("span", null, "Animations"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: props.isAnimationOn ? "buttonActive" : "",
    onClick: function onClick() {
      props._toggleAnimation();
    }
  }, props.isAnimationOn ? "Select frames[A]" : "Animate![A]"), /*#__PURE__*/React.createElement("button", {
    onClick: function onClick() {
      props._drawTile(false, true);
    }
  }, "Delete")), /*#__PURE__*/React.createElement("label", {
    style: {
      color: "white",
      display: props.isAnimationOn ? "block" : "none"
    },
    htmlFor: "fps"
  }, "FPS:", /*#__PURE__*/React.createElement("input", {
    min: "1",
    max: "60",
    id: "fps",
    type: "number",
    value: props.fps,
    onChange: function onChange(e) {
      var val = e.target.value;
      if (e.target.value > 60) val = 60;
      if (e.target.value < 1) val = 1;

      props._setStateCallback({
        fps: val
      });
    }
  })), /*#__PURE__*/React.createElement("select", {
    id: "selAnimationInstance",
    size: "5",
    onChange: function onChange(e) {
      var x = props.mapAnimationArr[e.target.value].rx,
          y = props.mapAnimationArr[e.target.value].ry,
          w = props.mapAnimationArr[e.target.value].src[0].w,
          h = props.mapAnimationArr[e.target.value].src[0].h;
      var ctx2 = props.mapClickCatcher.getContext("2d");
      ctx2.clearRect(0, 0, props.mapClickCatcher.width, props.mapClickCatcher.height);
      ctx2.beginPath();
      ctx2.rect(x, y, w, h);
      ctx2.strokeStyle = "blue";
      ctx2.lineWidth = 5;
      ctx2.stroke();
    }
  }, props.mapAnimationArr.map(function (instance, i) {
    return /*#__PURE__*/React.createElement("option", {
      key: i,
      value: i
    }, instance.rx / props.cellWidth + "_" + instance.ry / props.cellHeight);
  })))), /*#__PURE__*/React.createElement("div", {
    id: "G2s3"
  }, /*#__PURE__*/React.createElement("div", {
    id: "mapCont"
  }, /*#__PURE__*/React.createElement("div", {
    id: "mapScaler"
  }, /*#__PURE__*/React.createElement("canvas", {
    id: "mapBase1",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapBase2",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapBase3",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapShadowMid1",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapMid1",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapAnimate",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapShadowMid2",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapMid2",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapShadowTop",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapTop",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "mapGrid",
    width: "0",
    height: "0",
    style: {
      display: props.toggleMapGrid ? "block" : "none"
    }
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "charGrid",
    width: "0",
    height: "0",
    style: {
      display: !props.showRenderControls ? "block" : "none"
    }
  }), /*#__PURE__*/React.createElement("ul", {
    id: "z",
    style: {
      left: props.pathXY[0] + props.charCellWidth || 0,
      top: props.pathXY[1] || 0,
      display: props.z ? "block" : "none"
    }
  }, props.z && props.z.map(function (x, i) {
    return /*#__PURE__*/React.createElement("li", {
      key: i,
      id: "z_" + i,
      style: props.z_ == i ? {
        color: "white",
        backgroundColor: "black"
      } : {
        color: "black",
        backgroundColor: "white"
      }
    }, "[", x, "]");
  })), /*#__PURE__*/React.createElement("canvas", {
    id: "mapClickCatcher",
    width: "0",
    height: "0"
  }), /*#__PURE__*/React.createElement("canvas", {
    id: "captureCanvas",
    width: "0",
    height: "0",
    style: {
      display: "none"
    }
  })))));
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = __webpack_require__(0); // Check for the various File API support.


if (window.File && window.FileReader && window.Blob) {
  // Great success! All the File APIs are supported.
  console.log("All file APIs are supported");
} else {
  alert("The File APIs are not fully supported in this browser.");
}

module.exports = /*#__PURE__*/function (_React$Component) {
  _inherits(TileUploader, _React$Component);

  var _super = _createSuper(TileUploader);

  function TileUploader(props) {
    var _this;

    _classCallCheck(this, TileUploader);

    _this = _super.call(this, props);
    _this._handleFileSelect = _this._handleFileSelect.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TileUploader, [{
    key: "_handleFileSelect",
    value: function _handleFileSelect(evt) {
      var _this2 = this;

      var file = evt.target.files;
      var reader = new FileReader();

      reader.onload = function (e) {
        _this2.props.cb(e.target.result);
      };

      reader.readAsDataURL(file[0]);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("input", {
        type: "file",
        id: "file",
        onChange: this._handleFileSelect,
        name: "file"
      }));
    }
  }]);

  return TileUploader;
}(React.Component);

/***/ })
/******/ ]);